/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
)

// checks if the QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll{}

// QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll The employee's payroll information.
type QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll struct {
	// How frequently this employee is paid (e.g., weekly, biweekly, monthly). This determines the schedule for generating paychecks.
	PayPeriod *string `json:"payPeriod,omitempty"`
	// The employee's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default.
	ClassId *string `json:"classId,omitempty"`
	// When `true`, deletes all earnings records for this employee.
	DeleteAllEarnings *bool `json:"deleteAllEarnings,omitempty"`
	// The employee's earnings.  **IMPORTANT**: When updating employees, if you include any earnings records in your update request, QuickBooks will delete all existing earnings records for this employee and replace them with the new records you provide. If you do not include any earnings records, the existing earnings records will remain unchanged. To delete all earnings records without adding new ones, set the `deleteAllEarnings` field to `true`.
	Earnings []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner `json:"earnings,omitempty"`
	// Indicates whether this employee is using time-tracking data to create paychecks.
	UseTimeDataToCreatePaychecks *string `json:"useTimeDataToCreatePaychecks,omitempty"`
	SickHours *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours `json:"sickHours,omitempty"`
	VacationHours *QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours `json:"vacationHours,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll

// NewQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll instantiates a new QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll() *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll {
	this := QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll{}
	return &this
}

// NewQuickbooksDesktopEmployeesIdPostRequestEmployeePayrollWithDefaults instantiates a new QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopEmployeesIdPostRequestEmployeePayrollWithDefaults() *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll {
	this := QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll{}
	return &this
}

// GetPayPeriod returns the PayPeriod field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetPayPeriod() string {
	if o == nil || IsNil(o.PayPeriod) {
		var ret string
		return ret
	}
	return *o.PayPeriod
}

// GetPayPeriodOk returns a tuple with the PayPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetPayPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.PayPeriod) {
		return nil, false
	}
	return o.PayPeriod, true
}

// HasPayPeriod returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) HasPayPeriod() bool {
	if o != nil && !IsNil(o.PayPeriod) {
		return true
	}

	return false
}

// SetPayPeriod gets a reference to the given string and assigns it to the PayPeriod field.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) SetPayPeriod(v string) {
	o.PayPeriod = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) SetClassId(v string) {
	o.ClassId = &v
}

// GetDeleteAllEarnings returns the DeleteAllEarnings field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetDeleteAllEarnings() bool {
	if o == nil || IsNil(o.DeleteAllEarnings) {
		var ret bool
		return ret
	}
	return *o.DeleteAllEarnings
}

// GetDeleteAllEarningsOk returns a tuple with the DeleteAllEarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetDeleteAllEarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteAllEarnings) {
		return nil, false
	}
	return o.DeleteAllEarnings, true
}

// HasDeleteAllEarnings returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) HasDeleteAllEarnings() bool {
	if o != nil && !IsNil(o.DeleteAllEarnings) {
		return true
	}

	return false
}

// SetDeleteAllEarnings gets a reference to the given bool and assigns it to the DeleteAllEarnings field.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) SetDeleteAllEarnings(v bool) {
	o.DeleteAllEarnings = &v
}

// GetEarnings returns the Earnings field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetEarnings() []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner {
	if o == nil || IsNil(o.Earnings) {
		var ret []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner
		return ret
	}
	return o.Earnings
}

// GetEarningsOk returns a tuple with the Earnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetEarningsOk() ([]QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner, bool) {
	if o == nil || IsNil(o.Earnings) {
		return nil, false
	}
	return o.Earnings, true
}

// HasEarnings returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) HasEarnings() bool {
	if o != nil && !IsNil(o.Earnings) {
		return true
	}

	return false
}

// SetEarnings gets a reference to the given []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner and assigns it to the Earnings field.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) SetEarnings(v []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner) {
	o.Earnings = v
}

// GetUseTimeDataToCreatePaychecks returns the UseTimeDataToCreatePaychecks field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetUseTimeDataToCreatePaychecks() string {
	if o == nil || IsNil(o.UseTimeDataToCreatePaychecks) {
		var ret string
		return ret
	}
	return *o.UseTimeDataToCreatePaychecks
}

// GetUseTimeDataToCreatePaychecksOk returns a tuple with the UseTimeDataToCreatePaychecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetUseTimeDataToCreatePaychecksOk() (*string, bool) {
	if o == nil || IsNil(o.UseTimeDataToCreatePaychecks) {
		return nil, false
	}
	return o.UseTimeDataToCreatePaychecks, true
}

// HasUseTimeDataToCreatePaychecks returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) HasUseTimeDataToCreatePaychecks() bool {
	if o != nil && !IsNil(o.UseTimeDataToCreatePaychecks) {
		return true
	}

	return false
}

// SetUseTimeDataToCreatePaychecks gets a reference to the given string and assigns it to the UseTimeDataToCreatePaychecks field.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) SetUseTimeDataToCreatePaychecks(v string) {
	o.UseTimeDataToCreatePaychecks = &v
}

// GetSickHours returns the SickHours field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetSickHours() QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours {
	if o == nil || IsNil(o.SickHours) {
		var ret QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours
		return ret
	}
	return *o.SickHours
}

// GetSickHoursOk returns a tuple with the SickHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetSickHoursOk() (*QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours, bool) {
	if o == nil || IsNil(o.SickHours) {
		return nil, false
	}
	return o.SickHours, true
}

// HasSickHours returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) HasSickHours() bool {
	if o != nil && !IsNil(o.SickHours) {
		return true
	}

	return false
}

// SetSickHours gets a reference to the given QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours and assigns it to the SickHours field.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) SetSickHours(v QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) {
	o.SickHours = &v
}

// GetVacationHours returns the VacationHours field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetVacationHours() QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours {
	if o == nil || IsNil(o.VacationHours) {
		var ret QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours
		return ret
	}
	return *o.VacationHours
}

// GetVacationHoursOk returns a tuple with the VacationHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) GetVacationHoursOk() (*QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours, bool) {
	if o == nil || IsNil(o.VacationHours) {
		return nil, false
	}
	return o.VacationHours, true
}

// HasVacationHours returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) HasVacationHours() bool {
	if o != nil && !IsNil(o.VacationHours) {
		return true
	}

	return false
}

// SetVacationHours gets a reference to the given QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours and assigns it to the VacationHours field.
func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) SetVacationHours(v QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours) {
	o.VacationHours = &v
}

func (o QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayPeriod) {
		toSerialize["payPeriod"] = o.PayPeriod
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.DeleteAllEarnings) {
		toSerialize["deleteAllEarnings"] = o.DeleteAllEarnings
	}
	if !IsNil(o.Earnings) {
		toSerialize["earnings"] = o.Earnings
	}
	if !IsNil(o.UseTimeDataToCreatePaychecks) {
		toSerialize["useTimeDataToCreatePaychecks"] = o.UseTimeDataToCreatePaychecks
	}
	if !IsNil(o.SickHours) {
		toSerialize["sickHours"] = o.SickHours
	}
	if !IsNil(o.VacationHours) {
		toSerialize["vacationHours"] = o.VacationHours
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) UnmarshalJSON(data []byte) (err error) {
	varQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll := _QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll{}

	err = json.Unmarshal(data, &varQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll(varQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payPeriod")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "deleteAllEarnings")
		delete(additionalProperties, "earnings")
		delete(additionalProperties, "useTimeDataToCreatePaychecks")
		delete(additionalProperties, "sickHours")
		delete(additionalProperties, "vacationHours")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll struct {
	value *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll
	isSet bool
}

func (v NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) Get() *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll {
	return v.value
}

func (v *NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) Set(val *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll(val *QuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) *NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll {
	return &NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopEmployeesIdPostRequestEmployeePayroll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


