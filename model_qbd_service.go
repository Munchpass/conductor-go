/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QbdService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdService{}

// QbdService struct for QbdService
type QbdService struct {
	// The case-insensitive unique name of this service, unique across all services.  **NOTE**: Services do not have a `fullName` field because they are not hierarchical objects, which is why `name` is unique for them but not for objects that have parents.
	Name string `json:"name"`
	// The domain of this subscribed service
	Domain NullableString `json:"domain"`
	// The status of this service's subscription.
	ServiceStatus NullableString `json:"serviceStatus"`
}

type _QbdService QbdService

// NewQbdService instantiates a new QbdService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdService(name string, domain NullableString, serviceStatus NullableString) *QbdService {
	this := QbdService{}
	this.Name = name
	this.Domain = domain
	this.ServiceStatus = serviceStatus
	return &this
}

// NewQbdServiceWithDefaults instantiates a new QbdService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdServiceWithDefaults() *QbdService {
	this := QbdService{}
	return &this
}

// GetName returns the Name field value
func (o *QbdService) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QbdService) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QbdService) SetName(v string) {
	o.Name = v
}

// GetDomain returns the Domain field value
// If the value is explicit nil, the zero value for string will be returned
func (o *QbdService) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}

	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdService) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// SetDomain sets field value
func (o *QbdService) SetDomain(v string) {
	o.Domain.Set(&v)
}

// GetServiceStatus returns the ServiceStatus field value
// If the value is explicit nil, the zero value for string will be returned
func (o *QbdService) GetServiceStatus() string {
	if o == nil || o.ServiceStatus.Get() == nil {
		var ret string
		return ret
	}

	return *o.ServiceStatus.Get()
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdService) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceStatus.Get(), o.ServiceStatus.IsSet()
}

// SetServiceStatus sets field value
func (o *QbdService) SetServiceStatus(v string) {
	o.ServiceStatus.Set(&v)
}

func (o QbdService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["domain"] = o.Domain.Get()
	toSerialize["serviceStatus"] = o.ServiceStatus.Get()
	return toSerialize, nil
}

func (o *QbdService) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"domain",
		"serviceStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdService := _QbdService{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQbdService)

	if err != nil {
		return err
	}

	*o = QbdService(varQbdService)

	return err
}

type NullableQbdService struct {
	value *QbdService
	isSet bool
}

func (v NullableQbdService) Get() *QbdService {
	return v.value
}

func (v *NullableQbdService) Set(val *QbdService) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdService) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdService(val *QbdService) *NullableQbdService {
	return &NullableQbdService{value: val, isSet: true}
}

func (v NullableQbdService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


