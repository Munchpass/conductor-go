/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopSalesTaxItemsIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopSalesTaxItemsIdPostRequest{}

// QuickbooksDesktopSalesTaxItemsIdPostRequest struct for QuickbooksDesktopSalesTaxItemsIdPostRequest
type QuickbooksDesktopSalesTaxItemsIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the sales-tax item object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The case-insensitive unique name of this sales-tax item, unique across all sales-tax items.  **NOTE**: Sales-tax items do not have a `fullName` field because they are not hierarchical objects, which is why `name` is unique for them but not for objects that have parents.  Maximum length: 31 characters.
	Name *string `json:"name,omitempty"`
	Barcode *QuickbooksDesktopSalesTaxItemsPostRequestBarcode `json:"barcode,omitempty"`
	// Indicates whether this sales-tax item is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// The sales-tax item's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default.
	ClassId *string `json:"classId,omitempty"`
	// The sales-tax item's description that will appear on sales forms that include this item.
	Description *string `json:"description,omitempty"`
	// The tax rate defined by this sales-tax item, represented as a decimal string. For example, \"7.5\" represents a 7.5% tax rate. This rate determines the amount of sales tax applied when this item is used in transactions. If a non-zero `taxRate` is specified, then the `taxVendor` field is required.
	TaxRate *string `json:"taxRate,omitempty"`
	// The tax agency (vendor) to whom collected sales taxes are owed for this sales-tax item. This field refers to a vendor in QuickBooks that represents the tax authority. If a non-zero `taxRate` is specified, then `taxVendor` is required.
	TaxVendorId *string `json:"taxVendorId,omitempty"`
	// The specific line on the sales tax return form where the tax collected using this sales-tax item should be reported.
	SalesTaxReturnLineId *string `json:"salesTaxReturnLineId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopSalesTaxItemsIdPostRequest QuickbooksDesktopSalesTaxItemsIdPostRequest

// NewQuickbooksDesktopSalesTaxItemsIdPostRequest instantiates a new QuickbooksDesktopSalesTaxItemsIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopSalesTaxItemsIdPostRequest(revisionNumber string) *QuickbooksDesktopSalesTaxItemsIdPostRequest {
	this := QuickbooksDesktopSalesTaxItemsIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopSalesTaxItemsIdPostRequestWithDefaults instantiates a new QuickbooksDesktopSalesTaxItemsIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopSalesTaxItemsIdPostRequestWithDefaults() *QuickbooksDesktopSalesTaxItemsIdPostRequest {
	this := QuickbooksDesktopSalesTaxItemsIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetName(v string) {
	o.Name = &v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetBarcode() QuickbooksDesktopSalesTaxItemsPostRequestBarcode {
	if o == nil || IsNil(o.Barcode) {
		var ret QuickbooksDesktopSalesTaxItemsPostRequestBarcode
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetBarcodeOk() (*QuickbooksDesktopSalesTaxItemsPostRequestBarcode, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given QuickbooksDesktopSalesTaxItemsPostRequestBarcode and assigns it to the Barcode field.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetBarcode(v QuickbooksDesktopSalesTaxItemsPostRequestBarcode) {
	o.Barcode = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetClassId(v string) {
	o.ClassId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetTaxRate returns the TaxRate field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetTaxRate() string {
	if o == nil || IsNil(o.TaxRate) {
		var ret string
		return ret
	}
	return *o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetTaxRateOk() (*string, bool) {
	if o == nil || IsNil(o.TaxRate) {
		return nil, false
	}
	return o.TaxRate, true
}

// HasTaxRate returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) HasTaxRate() bool {
	if o != nil && !IsNil(o.TaxRate) {
		return true
	}

	return false
}

// SetTaxRate gets a reference to the given string and assigns it to the TaxRate field.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetTaxRate(v string) {
	o.TaxRate = &v
}

// GetTaxVendorId returns the TaxVendorId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetTaxVendorId() string {
	if o == nil || IsNil(o.TaxVendorId) {
		var ret string
		return ret
	}
	return *o.TaxVendorId
}

// GetTaxVendorIdOk returns a tuple with the TaxVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetTaxVendorIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaxVendorId) {
		return nil, false
	}
	return o.TaxVendorId, true
}

// HasTaxVendorId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) HasTaxVendorId() bool {
	if o != nil && !IsNil(o.TaxVendorId) {
		return true
	}

	return false
}

// SetTaxVendorId gets a reference to the given string and assigns it to the TaxVendorId field.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetTaxVendorId(v string) {
	o.TaxVendorId = &v
}

// GetSalesTaxReturnLineId returns the SalesTaxReturnLineId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetSalesTaxReturnLineId() string {
	if o == nil || IsNil(o.SalesTaxReturnLineId) {
		var ret string
		return ret
	}
	return *o.SalesTaxReturnLineId
}

// GetSalesTaxReturnLineIdOk returns a tuple with the SalesTaxReturnLineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) GetSalesTaxReturnLineIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxReturnLineId) {
		return nil, false
	}
	return o.SalesTaxReturnLineId, true
}

// HasSalesTaxReturnLineId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) HasSalesTaxReturnLineId() bool {
	if o != nil && !IsNil(o.SalesTaxReturnLineId) {
		return true
	}

	return false
}

// SetSalesTaxReturnLineId gets a reference to the given string and assigns it to the SalesTaxReturnLineId field.
func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) SetSalesTaxReturnLineId(v string) {
	o.SalesTaxReturnLineId = &v
}

func (o QuickbooksDesktopSalesTaxItemsIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopSalesTaxItemsIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TaxRate) {
		toSerialize["taxRate"] = o.TaxRate
	}
	if !IsNil(o.TaxVendorId) {
		toSerialize["taxVendorId"] = o.TaxVendorId
	}
	if !IsNil(o.SalesTaxReturnLineId) {
		toSerialize["salesTaxReturnLineId"] = o.SalesTaxReturnLineId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopSalesTaxItemsIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopSalesTaxItemsIdPostRequest := _QuickbooksDesktopSalesTaxItemsIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopSalesTaxItemsIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopSalesTaxItemsIdPostRequest(varQuickbooksDesktopSalesTaxItemsIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "name")
		delete(additionalProperties, "barcode")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "description")
		delete(additionalProperties, "taxRate")
		delete(additionalProperties, "taxVendorId")
		delete(additionalProperties, "salesTaxReturnLineId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopSalesTaxItemsIdPostRequest struct {
	value *QuickbooksDesktopSalesTaxItemsIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopSalesTaxItemsIdPostRequest) Get() *QuickbooksDesktopSalesTaxItemsIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopSalesTaxItemsIdPostRequest) Set(val *QuickbooksDesktopSalesTaxItemsIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopSalesTaxItemsIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopSalesTaxItemsIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopSalesTaxItemsIdPostRequest(val *QuickbooksDesktopSalesTaxItemsIdPostRequest) *NullableQuickbooksDesktopSalesTaxItemsIdPostRequest {
	return &NullableQuickbooksDesktopSalesTaxItemsIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopSalesTaxItemsIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopSalesTaxItemsIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


