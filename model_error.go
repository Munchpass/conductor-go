/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the Error type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Error{}

// Error struct for Error
type Error struct {
	// The developer error message for your logs.
	Message string `json:"message"`
	// The user-friendly error message, written specifically for displaying to your end-users in your app's UI.  This value exists for _every_ error. E.g., a QBD connection error might recommend the end-user to confirm their QuickBooks Desktop is open and that they're logged in. But if a Conductor API key is expired, e.g., this message will be masked and just say _\"An internal server error occurred. Please try again later.\"_
	UserFacingMessage string `json:"userFacingMessage"`
	// The type of error that occurred.
	Type string `json:"type"`
	// The unique error code from Conductor, which is useful for adding special handling for specific errors. E.g., `'RESOURCE_MISSING'`, `'API_KEY_INVALID'`, or `'QBD_REQUEST_ERROR'`. In contrast, the error field `type` is more general and categorizes the error.
	Code string `json:"code"`
	// The unique error code supplied by the third-party integration for errors returned by the integration (e.g., QuickBooks Desktop) or integration connector (e.g., Web Connector). This is useful for adding special handling for specific errors from the third-party integration or connector.  The integration's corresponding error message for this code is in `error.message`.
	IntegrationCode *string `json:"integrationCode,omitempty"`
	// The HTTP status code of the response that returned this error.
	HttpStatusCode float32 `json:"httpStatusCode"`
	// The unique identifier for the request that returned this error.  If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution.
	RequestId string `json:"requestId"`
	AdditionalProperties map[string]interface{}
}

type _Error Error

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError(message string, userFacingMessage string, type_ string, code string, httpStatusCode float32, requestId string) *Error {
	this := Error{}
	this.Message = message
	this.UserFacingMessage = userFacingMessage
	this.Type = type_
	this.Code = code
	this.HttpStatusCode = httpStatusCode
	this.RequestId = requestId
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetMessage returns the Message field value
func (o *Error) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *Error) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *Error) SetMessage(v string) {
	o.Message = v
}

// GetUserFacingMessage returns the UserFacingMessage field value
func (o *Error) GetUserFacingMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserFacingMessage
}

// GetUserFacingMessageOk returns a tuple with the UserFacingMessage field value
// and a boolean to check if the value has been set.
func (o *Error) GetUserFacingMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserFacingMessage, true
}

// SetUserFacingMessage sets field value
func (o *Error) SetUserFacingMessage(v string) {
	o.UserFacingMessage = v
}

// GetType returns the Type field value
func (o *Error) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Error) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Error) SetType(v string) {
	o.Type = v
}

// GetCode returns the Code field value
func (o *Error) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *Error) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *Error) SetCode(v string) {
	o.Code = v
}

// GetIntegrationCode returns the IntegrationCode field value if set, zero value otherwise.
func (o *Error) GetIntegrationCode() string {
	if o == nil || IsNil(o.IntegrationCode) {
		var ret string
		return ret
	}
	return *o.IntegrationCode
}

// GetIntegrationCodeOk returns a tuple with the IntegrationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetIntegrationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IntegrationCode) {
		return nil, false
	}
	return o.IntegrationCode, true
}

// HasIntegrationCode returns a boolean if a field has been set.
func (o *Error) HasIntegrationCode() bool {
	if o != nil && !IsNil(o.IntegrationCode) {
		return true
	}

	return false
}

// SetIntegrationCode gets a reference to the given string and assigns it to the IntegrationCode field.
func (o *Error) SetIntegrationCode(v string) {
	o.IntegrationCode = &v
}

// GetHttpStatusCode returns the HttpStatusCode field value
func (o *Error) GetHttpStatusCode() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.HttpStatusCode
}

// GetHttpStatusCodeOk returns a tuple with the HttpStatusCode field value
// and a boolean to check if the value has been set.
func (o *Error) GetHttpStatusCodeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpStatusCode, true
}

// SetHttpStatusCode sets field value
func (o *Error) SetHttpStatusCode(v float32) {
	o.HttpStatusCode = v
}

// GetRequestId returns the RequestId field value
func (o *Error) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *Error) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *Error) SetRequestId(v string) {
	o.RequestId = v
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Error) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["userFacingMessage"] = o.UserFacingMessage
	toSerialize["type"] = o.Type
	toSerialize["code"] = o.Code
	if !IsNil(o.IntegrationCode) {
		toSerialize["integrationCode"] = o.IntegrationCode
	}
	toSerialize["httpStatusCode"] = o.HttpStatusCode
	toSerialize["requestId"] = o.RequestId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Error) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"userFacingMessage",
		"type",
		"code",
		"httpStatusCode",
		"requestId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varError := _Error{}

	err = json.Unmarshal(data, &varError)

	if err != nil {
		return err
	}

	*o = Error(varError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "userFacingMessage")
		delete(additionalProperties, "type")
		delete(additionalProperties, "code")
		delete(additionalProperties, "integrationCode")
		delete(additionalProperties, "httpStatusCode")
		delete(additionalProperties, "requestId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


