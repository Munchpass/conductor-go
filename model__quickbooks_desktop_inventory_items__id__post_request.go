/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopInventoryItemsIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopInventoryItemsIdPostRequest{}

// QuickbooksDesktopInventoryItemsIdPostRequest struct for QuickbooksDesktopInventoryItemsIdPostRequest
type QuickbooksDesktopInventoryItemsIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the inventory item object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The case-insensitive name of this inventory item. Not guaranteed to be unique because it does not include the names of its hierarchical parent objects like `fullName` does. For example, two inventory items could both have the `name` \"Cabinet\", but they could have unique `fullName` values, such as \"Kitchen:Cabinet\" and \"Inventory:Cabinet\".  Maximum length: 31 characters.
	Name *string `json:"name,omitempty"`
	Barcode *QuickbooksDesktopInventoryItemsPostRequestBarcode `json:"barcode,omitempty"`
	// Indicates whether this inventory item is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// The inventory item's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default.
	ClassId *string `json:"classId,omitempty"`
	// The parent inventory item one level above this one in the hierarchy. For example, if this inventory item has a `fullName` of \"Kitchen:Cabinet\", its parent has a `fullName` of \"Kitchen\". If this inventory item is at the top level, this field will be `null`.
	ParentId *string `json:"parentId,omitempty"`
	// The inventory item's stock keeping unit (SKU), which is sometimes the manufacturer's part number.
	Sku *string `json:"sku,omitempty"`
	// The unit-of-measure set associated with this inventory item, which consists of a base unit and related units.
	UnitOfMeasureSetId *string `json:"unitOfMeasureSetId,omitempty"`
	// Indicates whether to allow changing the inventory item's unit-of-measure set (using the `unitOfMeasureSetId` field) when the base unit of the new unit-of-measure set does not match that of the currently assigned set. Without setting this field to `true` in this scenario, the request will fail with an error; hence, this field is equivalent to accepting the warning prompt in the QuickBooks UI.  NOTE: Changing the base unit requires you to update the item's quantities-on-hand and cost to reflect the new unit; otherwise, these values will be inaccurate. Alternatively, consider creating a new item with the desired unit-of-measure set and deactivating the old item.
	ForceUnitOfMeasureChange *bool `json:"forceUnitOfMeasureChange,omitempty"`
	// The default sales-tax code for this inventory item, determining whether it is taxable or non-taxable. This can be overridden at the transaction-line level.  Default codes include \"Non\" (non-taxable) and \"Tax\" (taxable), but custom codes can also be created in QuickBooks. If QuickBooks is not set up to charge sales tax (via the \"Do You Charge Sales Tax?\" preference), it will assign the default non-taxable code to all sales.
	SalesTaxCodeId *string `json:"salesTaxCodeId,omitempty"`
	// The description of this inventory item that appears on sales forms (e.g., invoices, sales receipts) when sold to customers.
	SalesDescription *string `json:"salesDescription,omitempty"`
	// The price at which this inventory item is sold to customers, represented as a decimal string.
	SalesPrice *string `json:"salesPrice,omitempty"`
	// The income account used to track revenue from sales of this inventory item.
	IncomeAccountId *string `json:"incomeAccountId,omitempty"`
	// When `true`, applies the new income account (specified by the `incomeAccountId` field) to all existing transactions that use this inventory item. This updates historical data and should be used with caution. The update will fail if any affected transaction falls within a closed accounting period. If this parameter is not specified, QuickBooks will prompt the user before making any changes.
	UpdateExistingTransactionsIncomeAccount *bool `json:"updateExistingTransactionsIncomeAccount,omitempty"`
	// The description of this inventory item that appears on purchase forms (e.g., checks, bills, item receipts) when it is ordered or bought from vendors.
	PurchaseDescription *string `json:"purchaseDescription,omitempty"`
	// The cost at which this inventory item is purchased from vendors, represented as a decimal string.
	PurchaseCost *string `json:"purchaseCost,omitempty"`
	// The tax code applied to purchases of this inventory item. Applicable in regions where purchase taxes are used, such as Canada or the UK.
	PurchaseTaxCodeId *string `json:"purchaseTaxCodeId,omitempty"`
	// The Cost of Goods Sold (COGS) account for this inventory item, tracking the original direct costs of producing goods sold.
	CogsAccountId *string `json:"cogsAccountId,omitempty"`
	// When `true`, applies the new COGS account (specified by the `cogsAccountId` field) to all existing transactions that use this inventory item. This updates historical data and should be used with caution. The update will fail if any affected transaction falls within a closed accounting period. If this parameter is not specified, QuickBooks will prompt the user before making any changes.
	UpdateExistingTransactionsCogsAccount *bool `json:"updateExistingTransactionsCogsAccount,omitempty"`
	// The preferred vendor from whom this inventory item is typically purchased.
	PreferredVendorId *string `json:"preferredVendorId,omitempty"`
	// The asset account used to track the current value of this inventory item in inventory.
	AssetAccountId *string `json:"assetAccountId,omitempty"`
	// The minimum quantity of this inventory item at which QuickBooks prompts for reordering.
	ReorderPoint *float32 `json:"reorderPoint,omitempty"`
	// The maximum quantity of this inventory item desired in inventory.
	MaximumQuantityOnHand *float32 `json:"maximumQuantityOnHand,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopInventoryItemsIdPostRequest QuickbooksDesktopInventoryItemsIdPostRequest

// NewQuickbooksDesktopInventoryItemsIdPostRequest instantiates a new QuickbooksDesktopInventoryItemsIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopInventoryItemsIdPostRequest(revisionNumber string) *QuickbooksDesktopInventoryItemsIdPostRequest {
	this := QuickbooksDesktopInventoryItemsIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopInventoryItemsIdPostRequestWithDefaults instantiates a new QuickbooksDesktopInventoryItemsIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopInventoryItemsIdPostRequestWithDefaults() *QuickbooksDesktopInventoryItemsIdPostRequest {
	this := QuickbooksDesktopInventoryItemsIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetName(v string) {
	o.Name = &v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetBarcode() QuickbooksDesktopInventoryItemsPostRequestBarcode {
	if o == nil || IsNil(o.Barcode) {
		var ret QuickbooksDesktopInventoryItemsPostRequestBarcode
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetBarcodeOk() (*QuickbooksDesktopInventoryItemsPostRequestBarcode, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given QuickbooksDesktopInventoryItemsPostRequestBarcode and assigns it to the Barcode field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetBarcode(v QuickbooksDesktopInventoryItemsPostRequestBarcode) {
	o.Barcode = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetClassId(v string) {
	o.ClassId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetParentId(v string) {
	o.ParentId = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetSku(v string) {
	o.Sku = &v
}

// GetUnitOfMeasureSetId returns the UnitOfMeasureSetId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetUnitOfMeasureSetId() string {
	if o == nil || IsNil(o.UnitOfMeasureSetId) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasureSetId
}

// GetUnitOfMeasureSetIdOk returns a tuple with the UnitOfMeasureSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetUnitOfMeasureSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasureSetId) {
		return nil, false
	}
	return o.UnitOfMeasureSetId, true
}

// HasUnitOfMeasureSetId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasUnitOfMeasureSetId() bool {
	if o != nil && !IsNil(o.UnitOfMeasureSetId) {
		return true
	}

	return false
}

// SetUnitOfMeasureSetId gets a reference to the given string and assigns it to the UnitOfMeasureSetId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetUnitOfMeasureSetId(v string) {
	o.UnitOfMeasureSetId = &v
}

// GetForceUnitOfMeasureChange returns the ForceUnitOfMeasureChange field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetForceUnitOfMeasureChange() bool {
	if o == nil || IsNil(o.ForceUnitOfMeasureChange) {
		var ret bool
		return ret
	}
	return *o.ForceUnitOfMeasureChange
}

// GetForceUnitOfMeasureChangeOk returns a tuple with the ForceUnitOfMeasureChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetForceUnitOfMeasureChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceUnitOfMeasureChange) {
		return nil, false
	}
	return o.ForceUnitOfMeasureChange, true
}

// HasForceUnitOfMeasureChange returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasForceUnitOfMeasureChange() bool {
	if o != nil && !IsNil(o.ForceUnitOfMeasureChange) {
		return true
	}

	return false
}

// SetForceUnitOfMeasureChange gets a reference to the given bool and assigns it to the ForceUnitOfMeasureChange field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetForceUnitOfMeasureChange(v bool) {
	o.ForceUnitOfMeasureChange = &v
}

// GetSalesTaxCodeId returns the SalesTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetSalesTaxCodeId() string {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		var ret string
		return ret
	}
	return *o.SalesTaxCodeId
}

// GetSalesTaxCodeIdOk returns a tuple with the SalesTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetSalesTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		return nil, false
	}
	return o.SalesTaxCodeId, true
}

// HasSalesTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasSalesTaxCodeId() bool {
	if o != nil && !IsNil(o.SalesTaxCodeId) {
		return true
	}

	return false
}

// SetSalesTaxCodeId gets a reference to the given string and assigns it to the SalesTaxCodeId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetSalesTaxCodeId(v string) {
	o.SalesTaxCodeId = &v
}

// GetSalesDescription returns the SalesDescription field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetSalesDescription() string {
	if o == nil || IsNil(o.SalesDescription) {
		var ret string
		return ret
	}
	return *o.SalesDescription
}

// GetSalesDescriptionOk returns a tuple with the SalesDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetSalesDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SalesDescription) {
		return nil, false
	}
	return o.SalesDescription, true
}

// HasSalesDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasSalesDescription() bool {
	if o != nil && !IsNil(o.SalesDescription) {
		return true
	}

	return false
}

// SetSalesDescription gets a reference to the given string and assigns it to the SalesDescription field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetSalesDescription(v string) {
	o.SalesDescription = &v
}

// GetSalesPrice returns the SalesPrice field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetSalesPrice() string {
	if o == nil || IsNil(o.SalesPrice) {
		var ret string
		return ret
	}
	return *o.SalesPrice
}

// GetSalesPriceOk returns a tuple with the SalesPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetSalesPriceOk() (*string, bool) {
	if o == nil || IsNil(o.SalesPrice) {
		return nil, false
	}
	return o.SalesPrice, true
}

// HasSalesPrice returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasSalesPrice() bool {
	if o != nil && !IsNil(o.SalesPrice) {
		return true
	}

	return false
}

// SetSalesPrice gets a reference to the given string and assigns it to the SalesPrice field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetSalesPrice(v string) {
	o.SalesPrice = &v
}

// GetIncomeAccountId returns the IncomeAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetIncomeAccountId() string {
	if o == nil || IsNil(o.IncomeAccountId) {
		var ret string
		return ret
	}
	return *o.IncomeAccountId
}

// GetIncomeAccountIdOk returns a tuple with the IncomeAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetIncomeAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.IncomeAccountId) {
		return nil, false
	}
	return o.IncomeAccountId, true
}

// HasIncomeAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasIncomeAccountId() bool {
	if o != nil && !IsNil(o.IncomeAccountId) {
		return true
	}

	return false
}

// SetIncomeAccountId gets a reference to the given string and assigns it to the IncomeAccountId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetIncomeAccountId(v string) {
	o.IncomeAccountId = &v
}

// GetUpdateExistingTransactionsIncomeAccount returns the UpdateExistingTransactionsIncomeAccount field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetUpdateExistingTransactionsIncomeAccount() bool {
	if o == nil || IsNil(o.UpdateExistingTransactionsIncomeAccount) {
		var ret bool
		return ret
	}
	return *o.UpdateExistingTransactionsIncomeAccount
}

// GetUpdateExistingTransactionsIncomeAccountOk returns a tuple with the UpdateExistingTransactionsIncomeAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetUpdateExistingTransactionsIncomeAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateExistingTransactionsIncomeAccount) {
		return nil, false
	}
	return o.UpdateExistingTransactionsIncomeAccount, true
}

// HasUpdateExistingTransactionsIncomeAccount returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasUpdateExistingTransactionsIncomeAccount() bool {
	if o != nil && !IsNil(o.UpdateExistingTransactionsIncomeAccount) {
		return true
	}

	return false
}

// SetUpdateExistingTransactionsIncomeAccount gets a reference to the given bool and assigns it to the UpdateExistingTransactionsIncomeAccount field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetUpdateExistingTransactionsIncomeAccount(v bool) {
	o.UpdateExistingTransactionsIncomeAccount = &v
}

// GetPurchaseDescription returns the PurchaseDescription field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetPurchaseDescription() string {
	if o == nil || IsNil(o.PurchaseDescription) {
		var ret string
		return ret
	}
	return *o.PurchaseDescription
}

// GetPurchaseDescriptionOk returns a tuple with the PurchaseDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetPurchaseDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseDescription) {
		return nil, false
	}
	return o.PurchaseDescription, true
}

// HasPurchaseDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasPurchaseDescription() bool {
	if o != nil && !IsNil(o.PurchaseDescription) {
		return true
	}

	return false
}

// SetPurchaseDescription gets a reference to the given string and assigns it to the PurchaseDescription field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetPurchaseDescription(v string) {
	o.PurchaseDescription = &v
}

// GetPurchaseCost returns the PurchaseCost field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetPurchaseCost() string {
	if o == nil || IsNil(o.PurchaseCost) {
		var ret string
		return ret
	}
	return *o.PurchaseCost
}

// GetPurchaseCostOk returns a tuple with the PurchaseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetPurchaseCostOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseCost) {
		return nil, false
	}
	return o.PurchaseCost, true
}

// HasPurchaseCost returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasPurchaseCost() bool {
	if o != nil && !IsNil(o.PurchaseCost) {
		return true
	}

	return false
}

// SetPurchaseCost gets a reference to the given string and assigns it to the PurchaseCost field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetPurchaseCost(v string) {
	o.PurchaseCost = &v
}

// GetPurchaseTaxCodeId returns the PurchaseTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetPurchaseTaxCodeId() string {
	if o == nil || IsNil(o.PurchaseTaxCodeId) {
		var ret string
		return ret
	}
	return *o.PurchaseTaxCodeId
}

// GetPurchaseTaxCodeIdOk returns a tuple with the PurchaseTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetPurchaseTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseTaxCodeId) {
		return nil, false
	}
	return o.PurchaseTaxCodeId, true
}

// HasPurchaseTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasPurchaseTaxCodeId() bool {
	if o != nil && !IsNil(o.PurchaseTaxCodeId) {
		return true
	}

	return false
}

// SetPurchaseTaxCodeId gets a reference to the given string and assigns it to the PurchaseTaxCodeId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetPurchaseTaxCodeId(v string) {
	o.PurchaseTaxCodeId = &v
}

// GetCogsAccountId returns the CogsAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetCogsAccountId() string {
	if o == nil || IsNil(o.CogsAccountId) {
		var ret string
		return ret
	}
	return *o.CogsAccountId
}

// GetCogsAccountIdOk returns a tuple with the CogsAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetCogsAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.CogsAccountId) {
		return nil, false
	}
	return o.CogsAccountId, true
}

// HasCogsAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasCogsAccountId() bool {
	if o != nil && !IsNil(o.CogsAccountId) {
		return true
	}

	return false
}

// SetCogsAccountId gets a reference to the given string and assigns it to the CogsAccountId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetCogsAccountId(v string) {
	o.CogsAccountId = &v
}

// GetUpdateExistingTransactionsCogsAccount returns the UpdateExistingTransactionsCogsAccount field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetUpdateExistingTransactionsCogsAccount() bool {
	if o == nil || IsNil(o.UpdateExistingTransactionsCogsAccount) {
		var ret bool
		return ret
	}
	return *o.UpdateExistingTransactionsCogsAccount
}

// GetUpdateExistingTransactionsCogsAccountOk returns a tuple with the UpdateExistingTransactionsCogsAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetUpdateExistingTransactionsCogsAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateExistingTransactionsCogsAccount) {
		return nil, false
	}
	return o.UpdateExistingTransactionsCogsAccount, true
}

// HasUpdateExistingTransactionsCogsAccount returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasUpdateExistingTransactionsCogsAccount() bool {
	if o != nil && !IsNil(o.UpdateExistingTransactionsCogsAccount) {
		return true
	}

	return false
}

// SetUpdateExistingTransactionsCogsAccount gets a reference to the given bool and assigns it to the UpdateExistingTransactionsCogsAccount field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetUpdateExistingTransactionsCogsAccount(v bool) {
	o.UpdateExistingTransactionsCogsAccount = &v
}

// GetPreferredVendorId returns the PreferredVendorId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetPreferredVendorId() string {
	if o == nil || IsNil(o.PreferredVendorId) {
		var ret string
		return ret
	}
	return *o.PreferredVendorId
}

// GetPreferredVendorIdOk returns a tuple with the PreferredVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetPreferredVendorIdOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredVendorId) {
		return nil, false
	}
	return o.PreferredVendorId, true
}

// HasPreferredVendorId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasPreferredVendorId() bool {
	if o != nil && !IsNil(o.PreferredVendorId) {
		return true
	}

	return false
}

// SetPreferredVendorId gets a reference to the given string and assigns it to the PreferredVendorId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetPreferredVendorId(v string) {
	o.PreferredVendorId = &v
}

// GetAssetAccountId returns the AssetAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetAssetAccountId() string {
	if o == nil || IsNil(o.AssetAccountId) {
		var ret string
		return ret
	}
	return *o.AssetAccountId
}

// GetAssetAccountIdOk returns a tuple with the AssetAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetAssetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetAccountId) {
		return nil, false
	}
	return o.AssetAccountId, true
}

// HasAssetAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasAssetAccountId() bool {
	if o != nil && !IsNil(o.AssetAccountId) {
		return true
	}

	return false
}

// SetAssetAccountId gets a reference to the given string and assigns it to the AssetAccountId field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetAssetAccountId(v string) {
	o.AssetAccountId = &v
}

// GetReorderPoint returns the ReorderPoint field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetReorderPoint() float32 {
	if o == nil || IsNil(o.ReorderPoint) {
		var ret float32
		return ret
	}
	return *o.ReorderPoint
}

// GetReorderPointOk returns a tuple with the ReorderPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetReorderPointOk() (*float32, bool) {
	if o == nil || IsNil(o.ReorderPoint) {
		return nil, false
	}
	return o.ReorderPoint, true
}

// HasReorderPoint returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasReorderPoint() bool {
	if o != nil && !IsNil(o.ReorderPoint) {
		return true
	}

	return false
}

// SetReorderPoint gets a reference to the given float32 and assigns it to the ReorderPoint field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetReorderPoint(v float32) {
	o.ReorderPoint = &v
}

// GetMaximumQuantityOnHand returns the MaximumQuantityOnHand field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetMaximumQuantityOnHand() float32 {
	if o == nil || IsNil(o.MaximumQuantityOnHand) {
		var ret float32
		return ret
	}
	return *o.MaximumQuantityOnHand
}

// GetMaximumQuantityOnHandOk returns a tuple with the MaximumQuantityOnHand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) GetMaximumQuantityOnHandOk() (*float32, bool) {
	if o == nil || IsNil(o.MaximumQuantityOnHand) {
		return nil, false
	}
	return o.MaximumQuantityOnHand, true
}

// HasMaximumQuantityOnHand returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) HasMaximumQuantityOnHand() bool {
	if o != nil && !IsNil(o.MaximumQuantityOnHand) {
		return true
	}

	return false
}

// SetMaximumQuantityOnHand gets a reference to the given float32 and assigns it to the MaximumQuantityOnHand field.
func (o *QuickbooksDesktopInventoryItemsIdPostRequest) SetMaximumQuantityOnHand(v float32) {
	o.MaximumQuantityOnHand = &v
}

func (o QuickbooksDesktopInventoryItemsIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopInventoryItemsIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.UnitOfMeasureSetId) {
		toSerialize["unitOfMeasureSetId"] = o.UnitOfMeasureSetId
	}
	if !IsNil(o.ForceUnitOfMeasureChange) {
		toSerialize["forceUnitOfMeasureChange"] = o.ForceUnitOfMeasureChange
	}
	if !IsNil(o.SalesTaxCodeId) {
		toSerialize["salesTaxCodeId"] = o.SalesTaxCodeId
	}
	if !IsNil(o.SalesDescription) {
		toSerialize["salesDescription"] = o.SalesDescription
	}
	if !IsNil(o.SalesPrice) {
		toSerialize["salesPrice"] = o.SalesPrice
	}
	if !IsNil(o.IncomeAccountId) {
		toSerialize["incomeAccountId"] = o.IncomeAccountId
	}
	if !IsNil(o.UpdateExistingTransactionsIncomeAccount) {
		toSerialize["updateExistingTransactionsIncomeAccount"] = o.UpdateExistingTransactionsIncomeAccount
	}
	if !IsNil(o.PurchaseDescription) {
		toSerialize["purchaseDescription"] = o.PurchaseDescription
	}
	if !IsNil(o.PurchaseCost) {
		toSerialize["purchaseCost"] = o.PurchaseCost
	}
	if !IsNil(o.PurchaseTaxCodeId) {
		toSerialize["purchaseTaxCodeId"] = o.PurchaseTaxCodeId
	}
	if !IsNil(o.CogsAccountId) {
		toSerialize["cogsAccountId"] = o.CogsAccountId
	}
	if !IsNil(o.UpdateExistingTransactionsCogsAccount) {
		toSerialize["updateExistingTransactionsCogsAccount"] = o.UpdateExistingTransactionsCogsAccount
	}
	if !IsNil(o.PreferredVendorId) {
		toSerialize["preferredVendorId"] = o.PreferredVendorId
	}
	if !IsNil(o.AssetAccountId) {
		toSerialize["assetAccountId"] = o.AssetAccountId
	}
	if !IsNil(o.ReorderPoint) {
		toSerialize["reorderPoint"] = o.ReorderPoint
	}
	if !IsNil(o.MaximumQuantityOnHand) {
		toSerialize["maximumQuantityOnHand"] = o.MaximumQuantityOnHand
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopInventoryItemsIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopInventoryItemsIdPostRequest := _QuickbooksDesktopInventoryItemsIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopInventoryItemsIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopInventoryItemsIdPostRequest(varQuickbooksDesktopInventoryItemsIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "name")
		delete(additionalProperties, "barcode")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "parentId")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "unitOfMeasureSetId")
		delete(additionalProperties, "forceUnitOfMeasureChange")
		delete(additionalProperties, "salesTaxCodeId")
		delete(additionalProperties, "salesDescription")
		delete(additionalProperties, "salesPrice")
		delete(additionalProperties, "incomeAccountId")
		delete(additionalProperties, "updateExistingTransactionsIncomeAccount")
		delete(additionalProperties, "purchaseDescription")
		delete(additionalProperties, "purchaseCost")
		delete(additionalProperties, "purchaseTaxCodeId")
		delete(additionalProperties, "cogsAccountId")
		delete(additionalProperties, "updateExistingTransactionsCogsAccount")
		delete(additionalProperties, "preferredVendorId")
		delete(additionalProperties, "assetAccountId")
		delete(additionalProperties, "reorderPoint")
		delete(additionalProperties, "maximumQuantityOnHand")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopInventoryItemsIdPostRequest struct {
	value *QuickbooksDesktopInventoryItemsIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopInventoryItemsIdPostRequest) Get() *QuickbooksDesktopInventoryItemsIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopInventoryItemsIdPostRequest) Set(val *QuickbooksDesktopInventoryItemsIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopInventoryItemsIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopInventoryItemsIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopInventoryItemsIdPostRequest(val *QuickbooksDesktopInventoryItemsIdPostRequest) *NullableQuickbooksDesktopInventoryItemsIdPostRequest {
	return &NullableQuickbooksDesktopInventoryItemsIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopInventoryItemsIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopInventoryItemsIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


