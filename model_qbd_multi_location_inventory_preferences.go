/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QbdMultiLocationInventoryPreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdMultiLocationInventoryPreferences{}

// QbdMultiLocationInventoryPreferences struct for QbdMultiLocationInventoryPreferences
type QbdMultiLocationInventoryPreferences struct {
	// Indicates whether the multilocation inventory feature is available for this company file. When `true`, the feature can potentially be enabled.
	IsMultiLocationInventoryAvailable NullableBool `json:"isMultiLocationInventoryAvailable"`
	// Indicates whether the multilocation inventory feature is enabled for this company file. When `true`, inventory can be tracked across multiple locations.
	IsMultiLocationInventoryEnabled NullableBool `json:"isMultiLocationInventoryEnabled"`
}

type _QbdMultiLocationInventoryPreferences QbdMultiLocationInventoryPreferences

// NewQbdMultiLocationInventoryPreferences instantiates a new QbdMultiLocationInventoryPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdMultiLocationInventoryPreferences(isMultiLocationInventoryAvailable NullableBool, isMultiLocationInventoryEnabled NullableBool) *QbdMultiLocationInventoryPreferences {
	this := QbdMultiLocationInventoryPreferences{}
	this.IsMultiLocationInventoryAvailable = isMultiLocationInventoryAvailable
	this.IsMultiLocationInventoryEnabled = isMultiLocationInventoryEnabled
	return &this
}

// NewQbdMultiLocationInventoryPreferencesWithDefaults instantiates a new QbdMultiLocationInventoryPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdMultiLocationInventoryPreferencesWithDefaults() *QbdMultiLocationInventoryPreferences {
	this := QbdMultiLocationInventoryPreferences{}
	return &this
}

// GetIsMultiLocationInventoryAvailable returns the IsMultiLocationInventoryAvailable field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *QbdMultiLocationInventoryPreferences) GetIsMultiLocationInventoryAvailable() bool {
	if o == nil || o.IsMultiLocationInventoryAvailable.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsMultiLocationInventoryAvailable.Get()
}

// GetIsMultiLocationInventoryAvailableOk returns a tuple with the IsMultiLocationInventoryAvailable field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdMultiLocationInventoryPreferences) GetIsMultiLocationInventoryAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMultiLocationInventoryAvailable.Get(), o.IsMultiLocationInventoryAvailable.IsSet()
}

// SetIsMultiLocationInventoryAvailable sets field value
func (o *QbdMultiLocationInventoryPreferences) SetIsMultiLocationInventoryAvailable(v bool) {
	o.IsMultiLocationInventoryAvailable.Set(&v)
}

// GetIsMultiLocationInventoryEnabled returns the IsMultiLocationInventoryEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *QbdMultiLocationInventoryPreferences) GetIsMultiLocationInventoryEnabled() bool {
	if o == nil || o.IsMultiLocationInventoryEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsMultiLocationInventoryEnabled.Get()
}

// GetIsMultiLocationInventoryEnabledOk returns a tuple with the IsMultiLocationInventoryEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdMultiLocationInventoryPreferences) GetIsMultiLocationInventoryEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMultiLocationInventoryEnabled.Get(), o.IsMultiLocationInventoryEnabled.IsSet()
}

// SetIsMultiLocationInventoryEnabled sets field value
func (o *QbdMultiLocationInventoryPreferences) SetIsMultiLocationInventoryEnabled(v bool) {
	o.IsMultiLocationInventoryEnabled.Set(&v)
}

func (o QbdMultiLocationInventoryPreferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdMultiLocationInventoryPreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isMultiLocationInventoryAvailable"] = o.IsMultiLocationInventoryAvailable.Get()
	toSerialize["isMultiLocationInventoryEnabled"] = o.IsMultiLocationInventoryEnabled.Get()
	return toSerialize, nil
}

func (o *QbdMultiLocationInventoryPreferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isMultiLocationInventoryAvailable",
		"isMultiLocationInventoryEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdMultiLocationInventoryPreferences := _QbdMultiLocationInventoryPreferences{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQbdMultiLocationInventoryPreferences)

	if err != nil {
		return err
	}

	*o = QbdMultiLocationInventoryPreferences(varQbdMultiLocationInventoryPreferences)

	return err
}

type NullableQbdMultiLocationInventoryPreferences struct {
	value *QbdMultiLocationInventoryPreferences
	isSet bool
}

func (v NullableQbdMultiLocationInventoryPreferences) Get() *QbdMultiLocationInventoryPreferences {
	return v.value
}

func (v *NullableQbdMultiLocationInventoryPreferences) Set(val *QbdMultiLocationInventoryPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdMultiLocationInventoryPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdMultiLocationInventoryPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdMultiLocationInventoryPreferences(val *QbdMultiLocationInventoryPreferences) *NullableQbdMultiLocationInventoryPreferences {
	return &NullableQbdMultiLocationInventoryPreferences{value: val, isSet: true}
}

func (v NullableQbdMultiLocationInventoryPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdMultiLocationInventoryPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


