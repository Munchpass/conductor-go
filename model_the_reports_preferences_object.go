/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TheReportsPreferencesObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TheReportsPreferencesObject{}

// TheReportsPreferencesObject The reporting preferences for this company file.
type TheReportsPreferencesObject struct {
	// Determines how the aging periods are calculated in accounts receivable and accounts payable reports for this company file. When set to `age_from_due_date`, the overdue days shown in these reports begin with the due date on the invoice. When set to `age_from_transaction_date`, the overdue days begin with the date the transaction was created.
	AgingReportBasis string `json:"agingReportBasis"`
	// Indicates whether summary reports for this company file use cash-basis or accrual-basis bookkeeping. With `accrual` basis, transactions are recorded when they occur regardless of when payment is received or made. With `cash` basis, transactions are recorded only when payment is received or made.
	SummaryReportBasis string `json:"summaryReportBasis"`
}

type _TheReportsPreferencesObject TheReportsPreferencesObject

// NewTheReportsPreferencesObject instantiates a new TheReportsPreferencesObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTheReportsPreferencesObject(agingReportBasis string, summaryReportBasis string) *TheReportsPreferencesObject {
	this := TheReportsPreferencesObject{}
	this.AgingReportBasis = agingReportBasis
	this.SummaryReportBasis = summaryReportBasis
	return &this
}

// NewTheReportsPreferencesObjectWithDefaults instantiates a new TheReportsPreferencesObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTheReportsPreferencesObjectWithDefaults() *TheReportsPreferencesObject {
	this := TheReportsPreferencesObject{}
	return &this
}

// GetAgingReportBasis returns the AgingReportBasis field value
func (o *TheReportsPreferencesObject) GetAgingReportBasis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgingReportBasis
}

// GetAgingReportBasisOk returns a tuple with the AgingReportBasis field value
// and a boolean to check if the value has been set.
func (o *TheReportsPreferencesObject) GetAgingReportBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgingReportBasis, true
}

// SetAgingReportBasis sets field value
func (o *TheReportsPreferencesObject) SetAgingReportBasis(v string) {
	o.AgingReportBasis = v
}

// GetSummaryReportBasis returns the SummaryReportBasis field value
func (o *TheReportsPreferencesObject) GetSummaryReportBasis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SummaryReportBasis
}

// GetSummaryReportBasisOk returns a tuple with the SummaryReportBasis field value
// and a boolean to check if the value has been set.
func (o *TheReportsPreferencesObject) GetSummaryReportBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SummaryReportBasis, true
}

// SetSummaryReportBasis sets field value
func (o *TheReportsPreferencesObject) SetSummaryReportBasis(v string) {
	o.SummaryReportBasis = v
}

func (o TheReportsPreferencesObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TheReportsPreferencesObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["agingReportBasis"] = o.AgingReportBasis
	toSerialize["summaryReportBasis"] = o.SummaryReportBasis
	return toSerialize, nil
}

func (o *TheReportsPreferencesObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"agingReportBasis",
		"summaryReportBasis",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTheReportsPreferencesObject := _TheReportsPreferencesObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTheReportsPreferencesObject)

	if err != nil {
		return err
	}

	*o = TheReportsPreferencesObject(varTheReportsPreferencesObject)

	return err
}

type NullableTheReportsPreferencesObject struct {
	value *TheReportsPreferencesObject
	isSet bool
}

func (v NullableTheReportsPreferencesObject) Get() *TheReportsPreferencesObject {
	return v.value
}

func (v *NullableTheReportsPreferencesObject) Set(val *TheReportsPreferencesObject) {
	v.value = val
	v.isSet = true
}

func (v NullableTheReportsPreferencesObject) IsSet() bool {
	return v.isSet
}

func (v *NullableTheReportsPreferencesObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTheReportsPreferencesObject(val *TheReportsPreferencesObject) *NullableTheReportsPreferencesObject {
	return &NullableTheReportsPreferencesObject{value: val, isSet: true}
}

func (v NullableTheReportsPreferencesObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTheReportsPreferencesObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


