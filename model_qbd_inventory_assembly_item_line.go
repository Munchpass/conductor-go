/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdInventoryAssemblyItemLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdInventoryAssemblyItemLine{}

// QbdInventoryAssemblyItemLine struct for QbdInventoryAssemblyItemLine
type QbdInventoryAssemblyItemLine struct {
	InventoryItem QbdInventoryAssemblyItemLineInventoryItem `json:"inventoryItem"`
	// The quantity of the item associated with this inventory assembly item line. This field cannot be cleared.  **NOTE**: Do not use this field if the associated item is a discount item.
	Quantity float32 `json:"quantity"`
	AdditionalProperties map[string]interface{}
}

type _QbdInventoryAssemblyItemLine QbdInventoryAssemblyItemLine

// NewQbdInventoryAssemblyItemLine instantiates a new QbdInventoryAssemblyItemLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdInventoryAssemblyItemLine(inventoryItem QbdInventoryAssemblyItemLineInventoryItem, quantity float32) *QbdInventoryAssemblyItemLine {
	this := QbdInventoryAssemblyItemLine{}
	this.InventoryItem = inventoryItem
	this.Quantity = quantity
	return &this
}

// NewQbdInventoryAssemblyItemLineWithDefaults instantiates a new QbdInventoryAssemblyItemLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdInventoryAssemblyItemLineWithDefaults() *QbdInventoryAssemblyItemLine {
	this := QbdInventoryAssemblyItemLine{}
	return &this
}

// GetInventoryItem returns the InventoryItem field value
func (o *QbdInventoryAssemblyItemLine) GetInventoryItem() QbdInventoryAssemblyItemLineInventoryItem {
	if o == nil {
		var ret QbdInventoryAssemblyItemLineInventoryItem
		return ret
	}

	return o.InventoryItem
}

// GetInventoryItemOk returns a tuple with the InventoryItem field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAssemblyItemLine) GetInventoryItemOk() (*QbdInventoryAssemblyItemLineInventoryItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InventoryItem, true
}

// SetInventoryItem sets field value
func (o *QbdInventoryAssemblyItemLine) SetInventoryItem(v QbdInventoryAssemblyItemLineInventoryItem) {
	o.InventoryItem = v
}

// GetQuantity returns the Quantity field value
func (o *QbdInventoryAssemblyItemLine) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAssemblyItemLine) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *QbdInventoryAssemblyItemLine) SetQuantity(v float32) {
	o.Quantity = v
}

func (o QbdInventoryAssemblyItemLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdInventoryAssemblyItemLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inventoryItem"] = o.InventoryItem
	toSerialize["quantity"] = o.Quantity

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdInventoryAssemblyItemLine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inventoryItem",
		"quantity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdInventoryAssemblyItemLine := _QbdInventoryAssemblyItemLine{}

	err = json.Unmarshal(data, &varQbdInventoryAssemblyItemLine)

	if err != nil {
		return err
	}

	*o = QbdInventoryAssemblyItemLine(varQbdInventoryAssemblyItemLine)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "inventoryItem")
		delete(additionalProperties, "quantity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdInventoryAssemblyItemLine struct {
	value *QbdInventoryAssemblyItemLine
	isSet bool
}

func (v NullableQbdInventoryAssemblyItemLine) Get() *QbdInventoryAssemblyItemLine {
	return v.value
}

func (v *NullableQbdInventoryAssemblyItemLine) Set(val *QbdInventoryAssemblyItemLine) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdInventoryAssemblyItemLine) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdInventoryAssemblyItemLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdInventoryAssemblyItemLine(val *QbdInventoryAssemblyItemLine) *NullableQbdInventoryAssemblyItemLine {
	return &NullableQbdInventoryAssemblyItemLine{value: val, isSet: true}
}

func (v NullableQbdInventoryAssemblyItemLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdInventoryAssemblyItemLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


