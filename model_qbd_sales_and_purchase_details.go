/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdSalesAndPurchaseDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdSalesAndPurchaseDetails{}

// QbdSalesAndPurchaseDetails struct for QbdSalesAndPurchaseDetails
type QbdSalesAndPurchaseDetails struct {
	// The description of this item that appears on sales forms (e.g., invoices, sales receipts) when sold to customers.
	SalesDescription string `json:"salesDescription"`
	// The price at which this item is sold to customers, represented as a decimal string.
	SalesPrice string `json:"salesPrice"`
	IncomeAccount QbdSalesAndPurchaseDetailsIncomeAccount `json:"incomeAccount"`
	// The description of this item that appears on purchase forms (e.g., checks, bills, item receipts) when it is ordered or bought from vendors.
	PurchaseDescription string `json:"purchaseDescription"`
	// The cost at which this item is purchased from vendors, represented as a decimal string.
	PurchaseCost string `json:"purchaseCost"`
	PurchaseTaxCode QbdSalesAndPurchaseDetailsPurchaseTaxCode `json:"purchaseTaxCode"`
	ExpenseAccount QbdSalesAndPurchaseDetailsExpenseAccount `json:"expenseAccount"`
	PreferredVendor QbdSalesAndPurchaseDetailsPreferredVendor `json:"preferredVendor"`
	AdditionalProperties map[string]interface{}
}

type _QbdSalesAndPurchaseDetails QbdSalesAndPurchaseDetails

// NewQbdSalesAndPurchaseDetails instantiates a new QbdSalesAndPurchaseDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdSalesAndPurchaseDetails(salesDescription string, salesPrice string, incomeAccount QbdSalesAndPurchaseDetailsIncomeAccount, purchaseDescription string, purchaseCost string, purchaseTaxCode QbdSalesAndPurchaseDetailsPurchaseTaxCode, expenseAccount QbdSalesAndPurchaseDetailsExpenseAccount, preferredVendor QbdSalesAndPurchaseDetailsPreferredVendor) *QbdSalesAndPurchaseDetails {
	this := QbdSalesAndPurchaseDetails{}
	this.SalesDescription = salesDescription
	this.SalesPrice = salesPrice
	this.IncomeAccount = incomeAccount
	this.PurchaseDescription = purchaseDescription
	this.PurchaseCost = purchaseCost
	this.PurchaseTaxCode = purchaseTaxCode
	this.ExpenseAccount = expenseAccount
	this.PreferredVendor = preferredVendor
	return &this
}

// NewQbdSalesAndPurchaseDetailsWithDefaults instantiates a new QbdSalesAndPurchaseDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdSalesAndPurchaseDetailsWithDefaults() *QbdSalesAndPurchaseDetails {
	this := QbdSalesAndPurchaseDetails{}
	return &this
}

// GetSalesDescription returns the SalesDescription field value
func (o *QbdSalesAndPurchaseDetails) GetSalesDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SalesDescription
}

// GetSalesDescriptionOk returns a tuple with the SalesDescription field value
// and a boolean to check if the value has been set.
func (o *QbdSalesAndPurchaseDetails) GetSalesDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesDescription, true
}

// SetSalesDescription sets field value
func (o *QbdSalesAndPurchaseDetails) SetSalesDescription(v string) {
	o.SalesDescription = v
}

// GetSalesPrice returns the SalesPrice field value
func (o *QbdSalesAndPurchaseDetails) GetSalesPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SalesPrice
}

// GetSalesPriceOk returns a tuple with the SalesPrice field value
// and a boolean to check if the value has been set.
func (o *QbdSalesAndPurchaseDetails) GetSalesPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesPrice, true
}

// SetSalesPrice sets field value
func (o *QbdSalesAndPurchaseDetails) SetSalesPrice(v string) {
	o.SalesPrice = v
}

// GetIncomeAccount returns the IncomeAccount field value
func (o *QbdSalesAndPurchaseDetails) GetIncomeAccount() QbdSalesAndPurchaseDetailsIncomeAccount {
	if o == nil {
		var ret QbdSalesAndPurchaseDetailsIncomeAccount
		return ret
	}

	return o.IncomeAccount
}

// GetIncomeAccountOk returns a tuple with the IncomeAccount field value
// and a boolean to check if the value has been set.
func (o *QbdSalesAndPurchaseDetails) GetIncomeAccountOk() (*QbdSalesAndPurchaseDetailsIncomeAccount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncomeAccount, true
}

// SetIncomeAccount sets field value
func (o *QbdSalesAndPurchaseDetails) SetIncomeAccount(v QbdSalesAndPurchaseDetailsIncomeAccount) {
	o.IncomeAccount = v
}

// GetPurchaseDescription returns the PurchaseDescription field value
func (o *QbdSalesAndPurchaseDetails) GetPurchaseDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PurchaseDescription
}

// GetPurchaseDescriptionOk returns a tuple with the PurchaseDescription field value
// and a boolean to check if the value has been set.
func (o *QbdSalesAndPurchaseDetails) GetPurchaseDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchaseDescription, true
}

// SetPurchaseDescription sets field value
func (o *QbdSalesAndPurchaseDetails) SetPurchaseDescription(v string) {
	o.PurchaseDescription = v
}

// GetPurchaseCost returns the PurchaseCost field value
func (o *QbdSalesAndPurchaseDetails) GetPurchaseCost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PurchaseCost
}

// GetPurchaseCostOk returns a tuple with the PurchaseCost field value
// and a boolean to check if the value has been set.
func (o *QbdSalesAndPurchaseDetails) GetPurchaseCostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchaseCost, true
}

// SetPurchaseCost sets field value
func (o *QbdSalesAndPurchaseDetails) SetPurchaseCost(v string) {
	o.PurchaseCost = v
}

// GetPurchaseTaxCode returns the PurchaseTaxCode field value
func (o *QbdSalesAndPurchaseDetails) GetPurchaseTaxCode() QbdSalesAndPurchaseDetailsPurchaseTaxCode {
	if o == nil {
		var ret QbdSalesAndPurchaseDetailsPurchaseTaxCode
		return ret
	}

	return o.PurchaseTaxCode
}

// GetPurchaseTaxCodeOk returns a tuple with the PurchaseTaxCode field value
// and a boolean to check if the value has been set.
func (o *QbdSalesAndPurchaseDetails) GetPurchaseTaxCodeOk() (*QbdSalesAndPurchaseDetailsPurchaseTaxCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchaseTaxCode, true
}

// SetPurchaseTaxCode sets field value
func (o *QbdSalesAndPurchaseDetails) SetPurchaseTaxCode(v QbdSalesAndPurchaseDetailsPurchaseTaxCode) {
	o.PurchaseTaxCode = v
}

// GetExpenseAccount returns the ExpenseAccount field value
func (o *QbdSalesAndPurchaseDetails) GetExpenseAccount() QbdSalesAndPurchaseDetailsExpenseAccount {
	if o == nil {
		var ret QbdSalesAndPurchaseDetailsExpenseAccount
		return ret
	}

	return o.ExpenseAccount
}

// GetExpenseAccountOk returns a tuple with the ExpenseAccount field value
// and a boolean to check if the value has been set.
func (o *QbdSalesAndPurchaseDetails) GetExpenseAccountOk() (*QbdSalesAndPurchaseDetailsExpenseAccount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpenseAccount, true
}

// SetExpenseAccount sets field value
func (o *QbdSalesAndPurchaseDetails) SetExpenseAccount(v QbdSalesAndPurchaseDetailsExpenseAccount) {
	o.ExpenseAccount = v
}

// GetPreferredVendor returns the PreferredVendor field value
func (o *QbdSalesAndPurchaseDetails) GetPreferredVendor() QbdSalesAndPurchaseDetailsPreferredVendor {
	if o == nil {
		var ret QbdSalesAndPurchaseDetailsPreferredVendor
		return ret
	}

	return o.PreferredVendor
}

// GetPreferredVendorOk returns a tuple with the PreferredVendor field value
// and a boolean to check if the value has been set.
func (o *QbdSalesAndPurchaseDetails) GetPreferredVendorOk() (*QbdSalesAndPurchaseDetailsPreferredVendor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreferredVendor, true
}

// SetPreferredVendor sets field value
func (o *QbdSalesAndPurchaseDetails) SetPreferredVendor(v QbdSalesAndPurchaseDetailsPreferredVendor) {
	o.PreferredVendor = v
}

func (o QbdSalesAndPurchaseDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdSalesAndPurchaseDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["salesDescription"] = o.SalesDescription
	toSerialize["salesPrice"] = o.SalesPrice
	toSerialize["incomeAccount"] = o.IncomeAccount
	toSerialize["purchaseDescription"] = o.PurchaseDescription
	toSerialize["purchaseCost"] = o.PurchaseCost
	toSerialize["purchaseTaxCode"] = o.PurchaseTaxCode
	toSerialize["expenseAccount"] = o.ExpenseAccount
	toSerialize["preferredVendor"] = o.PreferredVendor

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdSalesAndPurchaseDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"salesDescription",
		"salesPrice",
		"incomeAccount",
		"purchaseDescription",
		"purchaseCost",
		"purchaseTaxCode",
		"expenseAccount",
		"preferredVendor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdSalesAndPurchaseDetails := _QbdSalesAndPurchaseDetails{}

	err = json.Unmarshal(data, &varQbdSalesAndPurchaseDetails)

	if err != nil {
		return err
	}

	*o = QbdSalesAndPurchaseDetails(varQbdSalesAndPurchaseDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "salesDescription")
		delete(additionalProperties, "salesPrice")
		delete(additionalProperties, "incomeAccount")
		delete(additionalProperties, "purchaseDescription")
		delete(additionalProperties, "purchaseCost")
		delete(additionalProperties, "purchaseTaxCode")
		delete(additionalProperties, "expenseAccount")
		delete(additionalProperties, "preferredVendor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdSalesAndPurchaseDetails struct {
	value *QbdSalesAndPurchaseDetails
	isSet bool
}

func (v NullableQbdSalesAndPurchaseDetails) Get() *QbdSalesAndPurchaseDetails {
	return v.value
}

func (v *NullableQbdSalesAndPurchaseDetails) Set(val *QbdSalesAndPurchaseDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdSalesAndPurchaseDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdSalesAndPurchaseDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdSalesAndPurchaseDetails(val *QbdSalesAndPurchaseDetails) *NullableQbdSalesAndPurchaseDetails {
	return &NullableQbdSalesAndPurchaseDetails{value: val, isSet: true}
}

func (v NullableQbdSalesAndPurchaseDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdSalesAndPurchaseDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


