/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
)

// checks if the QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours{}

// QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours The employee's sick hours, including how sick time is accrued and the total hours accrued.
type QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours struct {
	// The total number of sick hours currently available for the employee to use, in ISO 8601 format for time intervals (PTnHnMnS). For example, 1 hour and 30 minutes is represented as PT1H30M. Defaults to 0.
	HoursAvailable *string `json:"hoursAvailable,omitempty"`
	// How frequently the employee's sick hours are accrued.
	AccrualPeriod *string `json:"accrualPeriod,omitempty"`
	// The number of sick hours the employee will accrue per accrual period, in ISO 8601 format for time intervals (PTnHnMnS). For example, 1 hour and 30 minutes is represented as PT1H30M.
	HoursAccruedPerPeriod *string `json:"hoursAccruedPerPeriod,omitempty"`
	// The maximum number of sick hours the employee can accrue, in ISO 8601 format for time intervals (PTnHnMnS). For example, 1 hour and 30 minutes is represented as PT1H30M.
	MaximumHours *string `json:"maximumHours,omitempty"`
	// Indicates whether the employee's sick hours reset to zero at the beginning of the new year.
	ResetsHoursEachYear *bool `json:"resetsHoursEachYear,omitempty"`
	// The number of sick hours the employee has used, in ISO 8601 format for time intervals (PTnHnMnS). For example, 1 hour and 30 minutes is represented as PT1H30M.
	HoursUsed *string `json:"hoursUsed,omitempty"`
	// The date the employee's sick hours began to accrue, in ISO 8601 format (YYYY-MM-DD).
	AccrualStartDate *string `json:"accrualStartDate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours

// NewQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours instantiates a new QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours() *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours {
	this := QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours{}
	return &this
}

// NewQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHoursWithDefaults instantiates a new QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHoursWithDefaults() *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours {
	this := QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours{}
	return &this
}

// GetHoursAvailable returns the HoursAvailable field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetHoursAvailable() string {
	if o == nil || IsNil(o.HoursAvailable) {
		var ret string
		return ret
	}
	return *o.HoursAvailable
}

// GetHoursAvailableOk returns a tuple with the HoursAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetHoursAvailableOk() (*string, bool) {
	if o == nil || IsNil(o.HoursAvailable) {
		return nil, false
	}
	return o.HoursAvailable, true
}

// HasHoursAvailable returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) HasHoursAvailable() bool {
	if o != nil && !IsNil(o.HoursAvailable) {
		return true
	}

	return false
}

// SetHoursAvailable gets a reference to the given string and assigns it to the HoursAvailable field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) SetHoursAvailable(v string) {
	o.HoursAvailable = &v
}

// GetAccrualPeriod returns the AccrualPeriod field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetAccrualPeriod() string {
	if o == nil || IsNil(o.AccrualPeriod) {
		var ret string
		return ret
	}
	return *o.AccrualPeriod
}

// GetAccrualPeriodOk returns a tuple with the AccrualPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetAccrualPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.AccrualPeriod) {
		return nil, false
	}
	return o.AccrualPeriod, true
}

// HasAccrualPeriod returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) HasAccrualPeriod() bool {
	if o != nil && !IsNil(o.AccrualPeriod) {
		return true
	}

	return false
}

// SetAccrualPeriod gets a reference to the given string and assigns it to the AccrualPeriod field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) SetAccrualPeriod(v string) {
	o.AccrualPeriod = &v
}

// GetHoursAccruedPerPeriod returns the HoursAccruedPerPeriod field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetHoursAccruedPerPeriod() string {
	if o == nil || IsNil(o.HoursAccruedPerPeriod) {
		var ret string
		return ret
	}
	return *o.HoursAccruedPerPeriod
}

// GetHoursAccruedPerPeriodOk returns a tuple with the HoursAccruedPerPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetHoursAccruedPerPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.HoursAccruedPerPeriod) {
		return nil, false
	}
	return o.HoursAccruedPerPeriod, true
}

// HasHoursAccruedPerPeriod returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) HasHoursAccruedPerPeriod() bool {
	if o != nil && !IsNil(o.HoursAccruedPerPeriod) {
		return true
	}

	return false
}

// SetHoursAccruedPerPeriod gets a reference to the given string and assigns it to the HoursAccruedPerPeriod field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) SetHoursAccruedPerPeriod(v string) {
	o.HoursAccruedPerPeriod = &v
}

// GetMaximumHours returns the MaximumHours field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetMaximumHours() string {
	if o == nil || IsNil(o.MaximumHours) {
		var ret string
		return ret
	}
	return *o.MaximumHours
}

// GetMaximumHoursOk returns a tuple with the MaximumHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetMaximumHoursOk() (*string, bool) {
	if o == nil || IsNil(o.MaximumHours) {
		return nil, false
	}
	return o.MaximumHours, true
}

// HasMaximumHours returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) HasMaximumHours() bool {
	if o != nil && !IsNil(o.MaximumHours) {
		return true
	}

	return false
}

// SetMaximumHours gets a reference to the given string and assigns it to the MaximumHours field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) SetMaximumHours(v string) {
	o.MaximumHours = &v
}

// GetResetsHoursEachYear returns the ResetsHoursEachYear field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetResetsHoursEachYear() bool {
	if o == nil || IsNil(o.ResetsHoursEachYear) {
		var ret bool
		return ret
	}
	return *o.ResetsHoursEachYear
}

// GetResetsHoursEachYearOk returns a tuple with the ResetsHoursEachYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetResetsHoursEachYearOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetsHoursEachYear) {
		return nil, false
	}
	return o.ResetsHoursEachYear, true
}

// HasResetsHoursEachYear returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) HasResetsHoursEachYear() bool {
	if o != nil && !IsNil(o.ResetsHoursEachYear) {
		return true
	}

	return false
}

// SetResetsHoursEachYear gets a reference to the given bool and assigns it to the ResetsHoursEachYear field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) SetResetsHoursEachYear(v bool) {
	o.ResetsHoursEachYear = &v
}

// GetHoursUsed returns the HoursUsed field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetHoursUsed() string {
	if o == nil || IsNil(o.HoursUsed) {
		var ret string
		return ret
	}
	return *o.HoursUsed
}

// GetHoursUsedOk returns a tuple with the HoursUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetHoursUsedOk() (*string, bool) {
	if o == nil || IsNil(o.HoursUsed) {
		return nil, false
	}
	return o.HoursUsed, true
}

// HasHoursUsed returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) HasHoursUsed() bool {
	if o != nil && !IsNil(o.HoursUsed) {
		return true
	}

	return false
}

// SetHoursUsed gets a reference to the given string and assigns it to the HoursUsed field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) SetHoursUsed(v string) {
	o.HoursUsed = &v
}

// GetAccrualStartDate returns the AccrualStartDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetAccrualStartDate() string {
	if o == nil || IsNil(o.AccrualStartDate) {
		var ret string
		return ret
	}
	return *o.AccrualStartDate
}

// GetAccrualStartDateOk returns a tuple with the AccrualStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) GetAccrualStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.AccrualStartDate) {
		return nil, false
	}
	return o.AccrualStartDate, true
}

// HasAccrualStartDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) HasAccrualStartDate() bool {
	if o != nil && !IsNil(o.AccrualStartDate) {
		return true
	}

	return false
}

// SetAccrualStartDate gets a reference to the given string and assigns it to the AccrualStartDate field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) SetAccrualStartDate(v string) {
	o.AccrualStartDate = &v
}

func (o QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HoursAvailable) {
		toSerialize["hoursAvailable"] = o.HoursAvailable
	}
	if !IsNil(o.AccrualPeriod) {
		toSerialize["accrualPeriod"] = o.AccrualPeriod
	}
	if !IsNil(o.HoursAccruedPerPeriod) {
		toSerialize["hoursAccruedPerPeriod"] = o.HoursAccruedPerPeriod
	}
	if !IsNil(o.MaximumHours) {
		toSerialize["maximumHours"] = o.MaximumHours
	}
	if !IsNil(o.ResetsHoursEachYear) {
		toSerialize["resetsHoursEachYear"] = o.ResetsHoursEachYear
	}
	if !IsNil(o.HoursUsed) {
		toSerialize["hoursUsed"] = o.HoursUsed
	}
	if !IsNil(o.AccrualStartDate) {
		toSerialize["accrualStartDate"] = o.AccrualStartDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) UnmarshalJSON(data []byte) (err error) {
	varQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours := _QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours{}

	err = json.Unmarshal(data, &varQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours(varQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hoursAvailable")
		delete(additionalProperties, "accrualPeriod")
		delete(additionalProperties, "hoursAccruedPerPeriod")
		delete(additionalProperties, "maximumHours")
		delete(additionalProperties, "resetsHoursEachYear")
		delete(additionalProperties, "hoursUsed")
		delete(additionalProperties, "accrualStartDate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours struct {
	value *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours
	isSet bool
}

func (v NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) Get() *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours {
	return v.value
}

func (v *NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) Set(val *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours(val *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) *NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours {
	return &NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


