/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TheAccountingPreferencesObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TheAccountingPreferencesObject{}

// TheAccountingPreferencesObject The accounting preferences for this company file.
type TheAccountingPreferencesObject struct {
	// Indicates whether this company file is configured to record an account number for new accounts. If you include an account number when creating a new account while this preference is `false`, the account number will still be set, but will not be visible in the QuickBooks user interface.
	IsUsingAccountNumbers bool `json:"isUsingAccountNumbers"`
	// Indicates whether this company file is configured to require an account for new transactions. If `true`, a transaction cannot be recorded in the QuickBooks user interface unless it is assigned to an account. (However, transactions affected by this preference always require an account to be specified when added through the API.)
	IsRequiringAccounts bool `json:"isRequiringAccounts"`
	// Indicates whether this company file is configured to use the `class` field on all transactions.
	IsUsingClassTracking bool `json:"isUsingClassTracking"`
	// The default class assigned to transactions for this company file.
	DefaultTransactionClass string `json:"defaultTransactionClass"`
	// Indicates whether this company file is configured to log all transaction changes in the audit trail report. If `false`, QuickBooks logs only the most recent version of each transaction.
	IsUsingAuditTrail bool `json:"isUsingAuditTrail"`
	// Indicates whether this company file is configured to automatically assign a number to each journal entry.
	IsAssigningJournalEntryNumbers bool `json:"isAssigningJournalEntryNumbers"`
	// The company closing date set within this company file. (The QuickBooks Admin can assign a password restricting access to transactions that occurred before this date.)
	ClosingDate string `json:"closingDate"`
}

type _TheAccountingPreferencesObject TheAccountingPreferencesObject

// NewTheAccountingPreferencesObject instantiates a new TheAccountingPreferencesObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTheAccountingPreferencesObject(isUsingAccountNumbers bool, isRequiringAccounts bool, isUsingClassTracking bool, defaultTransactionClass string, isUsingAuditTrail bool, isAssigningJournalEntryNumbers bool, closingDate string) *TheAccountingPreferencesObject {
	this := TheAccountingPreferencesObject{}
	this.IsUsingAccountNumbers = isUsingAccountNumbers
	this.IsRequiringAccounts = isRequiringAccounts
	this.IsUsingClassTracking = isUsingClassTracking
	this.DefaultTransactionClass = defaultTransactionClass
	this.IsUsingAuditTrail = isUsingAuditTrail
	this.IsAssigningJournalEntryNumbers = isAssigningJournalEntryNumbers
	this.ClosingDate = closingDate
	return &this
}

// NewTheAccountingPreferencesObjectWithDefaults instantiates a new TheAccountingPreferencesObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTheAccountingPreferencesObjectWithDefaults() *TheAccountingPreferencesObject {
	this := TheAccountingPreferencesObject{}
	return &this
}

// GetIsUsingAccountNumbers returns the IsUsingAccountNumbers field value
func (o *TheAccountingPreferencesObject) GetIsUsingAccountNumbers() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUsingAccountNumbers
}

// GetIsUsingAccountNumbersOk returns a tuple with the IsUsingAccountNumbers field value
// and a boolean to check if the value has been set.
func (o *TheAccountingPreferencesObject) GetIsUsingAccountNumbersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUsingAccountNumbers, true
}

// SetIsUsingAccountNumbers sets field value
func (o *TheAccountingPreferencesObject) SetIsUsingAccountNumbers(v bool) {
	o.IsUsingAccountNumbers = v
}

// GetIsRequiringAccounts returns the IsRequiringAccounts field value
func (o *TheAccountingPreferencesObject) GetIsRequiringAccounts() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRequiringAccounts
}

// GetIsRequiringAccountsOk returns a tuple with the IsRequiringAccounts field value
// and a boolean to check if the value has been set.
func (o *TheAccountingPreferencesObject) GetIsRequiringAccountsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRequiringAccounts, true
}

// SetIsRequiringAccounts sets field value
func (o *TheAccountingPreferencesObject) SetIsRequiringAccounts(v bool) {
	o.IsRequiringAccounts = v
}

// GetIsUsingClassTracking returns the IsUsingClassTracking field value
func (o *TheAccountingPreferencesObject) GetIsUsingClassTracking() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUsingClassTracking
}

// GetIsUsingClassTrackingOk returns a tuple with the IsUsingClassTracking field value
// and a boolean to check if the value has been set.
func (o *TheAccountingPreferencesObject) GetIsUsingClassTrackingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUsingClassTracking, true
}

// SetIsUsingClassTracking sets field value
func (o *TheAccountingPreferencesObject) SetIsUsingClassTracking(v bool) {
	o.IsUsingClassTracking = v
}

// GetDefaultTransactionClass returns the DefaultTransactionClass field value
func (o *TheAccountingPreferencesObject) GetDefaultTransactionClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultTransactionClass
}

// GetDefaultTransactionClassOk returns a tuple with the DefaultTransactionClass field value
// and a boolean to check if the value has been set.
func (o *TheAccountingPreferencesObject) GetDefaultTransactionClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultTransactionClass, true
}

// SetDefaultTransactionClass sets field value
func (o *TheAccountingPreferencesObject) SetDefaultTransactionClass(v string) {
	o.DefaultTransactionClass = v
}

// GetIsUsingAuditTrail returns the IsUsingAuditTrail field value
func (o *TheAccountingPreferencesObject) GetIsUsingAuditTrail() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUsingAuditTrail
}

// GetIsUsingAuditTrailOk returns a tuple with the IsUsingAuditTrail field value
// and a boolean to check if the value has been set.
func (o *TheAccountingPreferencesObject) GetIsUsingAuditTrailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUsingAuditTrail, true
}

// SetIsUsingAuditTrail sets field value
func (o *TheAccountingPreferencesObject) SetIsUsingAuditTrail(v bool) {
	o.IsUsingAuditTrail = v
}

// GetIsAssigningJournalEntryNumbers returns the IsAssigningJournalEntryNumbers field value
func (o *TheAccountingPreferencesObject) GetIsAssigningJournalEntryNumbers() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAssigningJournalEntryNumbers
}

// GetIsAssigningJournalEntryNumbersOk returns a tuple with the IsAssigningJournalEntryNumbers field value
// and a boolean to check if the value has been set.
func (o *TheAccountingPreferencesObject) GetIsAssigningJournalEntryNumbersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAssigningJournalEntryNumbers, true
}

// SetIsAssigningJournalEntryNumbers sets field value
func (o *TheAccountingPreferencesObject) SetIsAssigningJournalEntryNumbers(v bool) {
	o.IsAssigningJournalEntryNumbers = v
}

// GetClosingDate returns the ClosingDate field value
func (o *TheAccountingPreferencesObject) GetClosingDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClosingDate
}

// GetClosingDateOk returns a tuple with the ClosingDate field value
// and a boolean to check if the value has been set.
func (o *TheAccountingPreferencesObject) GetClosingDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosingDate, true
}

// SetClosingDate sets field value
func (o *TheAccountingPreferencesObject) SetClosingDate(v string) {
	o.ClosingDate = v
}

func (o TheAccountingPreferencesObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TheAccountingPreferencesObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isUsingAccountNumbers"] = o.IsUsingAccountNumbers
	toSerialize["isRequiringAccounts"] = o.IsRequiringAccounts
	toSerialize["isUsingClassTracking"] = o.IsUsingClassTracking
	toSerialize["defaultTransactionClass"] = o.DefaultTransactionClass
	toSerialize["isUsingAuditTrail"] = o.IsUsingAuditTrail
	toSerialize["isAssigningJournalEntryNumbers"] = o.IsAssigningJournalEntryNumbers
	toSerialize["closingDate"] = o.ClosingDate
	return toSerialize, nil
}

func (o *TheAccountingPreferencesObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isUsingAccountNumbers",
		"isRequiringAccounts",
		"isUsingClassTracking",
		"defaultTransactionClass",
		"isUsingAuditTrail",
		"isAssigningJournalEntryNumbers",
		"closingDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTheAccountingPreferencesObject := _TheAccountingPreferencesObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTheAccountingPreferencesObject)

	if err != nil {
		return err
	}

	*o = TheAccountingPreferencesObject(varTheAccountingPreferencesObject)

	return err
}

type NullableTheAccountingPreferencesObject struct {
	value *TheAccountingPreferencesObject
	isSet bool
}

func (v NullableTheAccountingPreferencesObject) Get() *TheAccountingPreferencesObject {
	return v.value
}

func (v *NullableTheAccountingPreferencesObject) Set(val *TheAccountingPreferencesObject) {
	v.value = val
	v.isSet = true
}

func (v NullableTheAccountingPreferencesObject) IsSet() bool {
	return v.isSet
}

func (v *NullableTheAccountingPreferencesObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTheAccountingPreferencesObject(val *TheAccountingPreferencesObject) *NullableTheAccountingPreferencesObject {
	return &NullableTheAccountingPreferencesObject{value: val, isSet: true}
}

func (v NullableTheAccountingPreferencesObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTheAccountingPreferencesObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


