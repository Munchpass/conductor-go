/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopTimeTrackingActivitiesIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopTimeTrackingActivitiesIdPostRequest{}

// QuickbooksDesktopTimeTrackingActivitiesIdPostRequest struct for QuickbooksDesktopTimeTrackingActivitiesIdPostRequest
type QuickbooksDesktopTimeTrackingActivitiesIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the time tracking activity object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The date of this time tracking activity, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate *string `json:"transactionDate,omitempty"`
	// The employee, vendor, or person on QuickBooks's \"Other Names\" list whose time is being tracked in this time tracking activity. This cannot refer to a customer - use the `customer` field to associate a customer or customer-job with this time tracking activity.  **IMPORTANT**: This field is required for updating time tracking activities, even if the field is not being modified, because of a bug in QuickBooks itself.
	EntityId string `json:"entityId"`
	// The customer or customer-job to which this time tracking activity could be billed. If `billingStatus` is set to \"billable\", this field is required.
	CustomerId *string `json:"customerId,omitempty"`
	// The type of service performed during this time tracking activity, referring to billable or purchasable services such as specialized labor, consulting hours, and professional fees.  **NOTE**: This field is not required if no `customer` is specified. However, if `billingStatus` is set to \"billable\", both this field and `customer` are required.
	ServiceItemId *string `json:"serviceItemId,omitempty"`
	// The time spent performing the service during this time tracking activity, in ISO 8601 format for time intervals (PTnHnMnS). For example, 1 hour and 30 minutes is represented as PT1H30M.  **NOTE**: Although seconds can be specified when creating a time tracking activity, they are not returned in responses since QuickBooks Desktop's UI does not display seconds.  **IMPORTANT**: This field is required for updating time tracking activities, even if the field is not being modified, because of a bug in QuickBooks itself.
	Duration string `json:"duration"`
	// The time tracking activity's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default.
	ClassId *string `json:"classId,omitempty"`
	// The payroll wage item (e.g., Regular Pay, Overtime Pay) to use for this time tracking activity. This field can only be used for time tracking if: (1) the person specified in `entity` is an employee in QuickBooks, and (2) the \"Use time data to create paychecks\" preference is enabled in their payroll settings.
	PayrollWageItemId *string `json:"payrollWageItemId,omitempty"`
	// A note or comment about this time tracking activity.
	Note *string `json:"note,omitempty"`
	// The billing status of this time tracking activity.  **IMPORTANT**: When this field is set to \"billable\" for time tracking activities, both `customer` and `serviceItem` are required so that an invoice can be created.
	BillingStatus *string `json:"billingStatus,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopTimeTrackingActivitiesIdPostRequest QuickbooksDesktopTimeTrackingActivitiesIdPostRequest

// NewQuickbooksDesktopTimeTrackingActivitiesIdPostRequest instantiates a new QuickbooksDesktopTimeTrackingActivitiesIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopTimeTrackingActivitiesIdPostRequest(revisionNumber string, entityId string, duration string) *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest {
	this := QuickbooksDesktopTimeTrackingActivitiesIdPostRequest{}
	this.RevisionNumber = revisionNumber
	this.EntityId = entityId
	this.Duration = duration
	return &this
}

// NewQuickbooksDesktopTimeTrackingActivitiesIdPostRequestWithDefaults instantiates a new QuickbooksDesktopTimeTrackingActivitiesIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopTimeTrackingActivitiesIdPostRequestWithDefaults() *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest {
	this := QuickbooksDesktopTimeTrackingActivitiesIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetEntityId returns the EntityId field value
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetEntityId(v string) {
	o.EntityId = v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetServiceItemId returns the ServiceItemId field value if set, zero value otherwise.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetServiceItemId() string {
	if o == nil || IsNil(o.ServiceItemId) {
		var ret string
		return ret
	}
	return *o.ServiceItemId
}

// GetServiceItemIdOk returns a tuple with the ServiceItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetServiceItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceItemId) {
		return nil, false
	}
	return o.ServiceItemId, true
}

// HasServiceItemId returns a boolean if a field has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) HasServiceItemId() bool {
	if o != nil && !IsNil(o.ServiceItemId) {
		return true
	}

	return false
}

// SetServiceItemId gets a reference to the given string and assigns it to the ServiceItemId field.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetServiceItemId(v string) {
	o.ServiceItemId = &v
}

// GetDuration returns the Duration field value
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetDuration(v string) {
	o.Duration = v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetClassId(v string) {
	o.ClassId = &v
}

// GetPayrollWageItemId returns the PayrollWageItemId field value if set, zero value otherwise.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetPayrollWageItemId() string {
	if o == nil || IsNil(o.PayrollWageItemId) {
		var ret string
		return ret
	}
	return *o.PayrollWageItemId
}

// GetPayrollWageItemIdOk returns a tuple with the PayrollWageItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetPayrollWageItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.PayrollWageItemId) {
		return nil, false
	}
	return o.PayrollWageItemId, true
}

// HasPayrollWageItemId returns a boolean if a field has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) HasPayrollWageItemId() bool {
	if o != nil && !IsNil(o.PayrollWageItemId) {
		return true
	}

	return false
}

// SetPayrollWageItemId gets a reference to the given string and assigns it to the PayrollWageItemId field.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetPayrollWageItemId(v string) {
	o.PayrollWageItemId = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetNote(v string) {
	o.Note = &v
}

// GetBillingStatus returns the BillingStatus field value if set, zero value otherwise.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetBillingStatus() string {
	if o == nil || IsNil(o.BillingStatus) {
		var ret string
		return ret
	}
	return *o.BillingStatus
}

// GetBillingStatusOk returns a tuple with the BillingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) GetBillingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BillingStatus) {
		return nil, false
	}
	return o.BillingStatus, true
}

// HasBillingStatus returns a boolean if a field has been set.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) HasBillingStatus() bool {
	if o != nil && !IsNil(o.BillingStatus) {
		return true
	}

	return false
}

// SetBillingStatus gets a reference to the given string and assigns it to the BillingStatus field.
func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) SetBillingStatus(v string) {
	o.BillingStatus = &v
}

func (o QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	toSerialize["entityId"] = o.EntityId
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.ServiceItemId) {
		toSerialize["serviceItemId"] = o.ServiceItemId
	}
	toSerialize["duration"] = o.Duration
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.PayrollWageItemId) {
		toSerialize["payrollWageItemId"] = o.PayrollWageItemId
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.BillingStatus) {
		toSerialize["billingStatus"] = o.BillingStatus
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
		"entityId",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopTimeTrackingActivitiesIdPostRequest := _QuickbooksDesktopTimeTrackingActivitiesIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopTimeTrackingActivitiesIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopTimeTrackingActivitiesIdPostRequest(varQuickbooksDesktopTimeTrackingActivitiesIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "entityId")
		delete(additionalProperties, "customerId")
		delete(additionalProperties, "serviceItemId")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "payrollWageItemId")
		delete(additionalProperties, "note")
		delete(additionalProperties, "billingStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest struct {
	value *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest) Get() *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest) Set(val *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest(val *QuickbooksDesktopTimeTrackingActivitiesIdPostRequest) *NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest {
	return &NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopTimeTrackingActivitiesIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


