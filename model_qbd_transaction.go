/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdTransaction{}

// QbdTransaction struct for QbdTransaction
type QbdTransaction struct {
	// The type of transaction.
	TransactionType string `json:"transactionType"`
	// The QuickBooks-assigned unique identifier of this transaction. If `transactionLineId` is also defined, this is the identifier of the line's parent transaction object.
	TransactionId string `json:"transactionId"`
	// The QuickBooks-assigned unique identifier of this transaction line. If `null`, this result is a transaction object.
	TransactionLineId string `json:"transactionLineId"`
	// The date and time when this transaction was created, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). The time zone is the same as the user's time zone in QuickBooks.
	CreatedAt string `json:"createdAt"`
	// The date and time when this transaction was last updated, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). The time zone is the same as the user's time zone in QuickBooks.
	UpdatedAt string `json:"updatedAt"`
	Entity QbdTransactionEntity `json:"entity"`
	Account QbdTransactionAccount `json:"account"`
	// The date of this transaction, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate string `json:"transactionDate"`
	// The case-sensitive user-defined reference number for this transaction, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user.
	RefNumber string `json:"refNumber"`
	// The monetary amount of this transaction, represented as a decimal string.
	Amount string `json:"amount"`
	Currency QbdTransactionCurrency `json:"currency"`
	// The market exchange rate between this transaction's currency and the home currency in QuickBooks at the time of this transaction. Represented as a decimal value (e.g., 1.2345 for 1 EUR = 1.2345 USD if USD is the home currency).
	ExchangeRate float32 `json:"exchangeRate"`
	// The monetary amount of this transaction converted to the home currency of the QuickBooks company file. Represented as a decimal string.
	AmountInHomeCurrency string `json:"amountInHomeCurrency"`
	// A memo or note for this transaction.
	Memo string `json:"memo"`
	AdditionalProperties map[string]interface{}
}

type _QbdTransaction QbdTransaction

// NewQbdTransaction instantiates a new QbdTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdTransaction(transactionType string, transactionId string, transactionLineId string, createdAt string, updatedAt string, entity QbdTransactionEntity, account QbdTransactionAccount, transactionDate string, refNumber string, amount string, currency QbdTransactionCurrency, exchangeRate float32, amountInHomeCurrency string, memo string) *QbdTransaction {
	this := QbdTransaction{}
	this.TransactionType = transactionType
	this.TransactionId = transactionId
	this.TransactionLineId = transactionLineId
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Entity = entity
	this.Account = account
	this.TransactionDate = transactionDate
	this.RefNumber = refNumber
	this.Amount = amount
	this.Currency = currency
	this.ExchangeRate = exchangeRate
	this.AmountInHomeCurrency = amountInHomeCurrency
	this.Memo = memo
	return &this
}

// NewQbdTransactionWithDefaults instantiates a new QbdTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdTransactionWithDefaults() *QbdTransaction {
	this := QbdTransaction{}
	return &this
}

// GetTransactionType returns the TransactionType field value
func (o *QbdTransaction) GetTransactionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionType, true
}

// SetTransactionType sets field value
func (o *QbdTransaction) SetTransactionType(v string) {
	o.TransactionType = v
}

// GetTransactionId returns the TransactionId field value
func (o *QbdTransaction) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *QbdTransaction) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetTransactionLineId returns the TransactionLineId field value
func (o *QbdTransaction) GetTransactionLineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionLineId
}

// GetTransactionLineIdOk returns a tuple with the TransactionLineId field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetTransactionLineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionLineId, true
}

// SetTransactionLineId sets field value
func (o *QbdTransaction) SetTransactionLineId(v string) {
	o.TransactionLineId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *QbdTransaction) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *QbdTransaction) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *QbdTransaction) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *QbdTransaction) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetEntity returns the Entity field value
func (o *QbdTransaction) GetEntity() QbdTransactionEntity {
	if o == nil {
		var ret QbdTransactionEntity
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetEntityOk() (*QbdTransactionEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *QbdTransaction) SetEntity(v QbdTransactionEntity) {
	o.Entity = v
}

// GetAccount returns the Account field value
func (o *QbdTransaction) GetAccount() QbdTransactionAccount {
	if o == nil {
		var ret QbdTransactionAccount
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetAccountOk() (*QbdTransactionAccount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *QbdTransaction) SetAccount(v QbdTransactionAccount) {
	o.Account = v
}

// GetTransactionDate returns the TransactionDate field value
func (o *QbdTransaction) GetTransactionDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetTransactionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionDate, true
}

// SetTransactionDate sets field value
func (o *QbdTransaction) SetTransactionDate(v string) {
	o.TransactionDate = v
}

// GetRefNumber returns the RefNumber field value
func (o *QbdTransaction) GetRefNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefNumber
}

// GetRefNumberOk returns a tuple with the RefNumber field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetRefNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefNumber, true
}

// SetRefNumber sets field value
func (o *QbdTransaction) SetRefNumber(v string) {
	o.RefNumber = v
}

// GetAmount returns the Amount field value
func (o *QbdTransaction) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *QbdTransaction) SetAmount(v string) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *QbdTransaction) GetCurrency() QbdTransactionCurrency {
	if o == nil {
		var ret QbdTransactionCurrency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetCurrencyOk() (*QbdTransactionCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *QbdTransaction) SetCurrency(v QbdTransactionCurrency) {
	o.Currency = v
}

// GetExchangeRate returns the ExchangeRate field value
func (o *QbdTransaction) GetExchangeRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetExchangeRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeRate, true
}

// SetExchangeRate sets field value
func (o *QbdTransaction) SetExchangeRate(v float32) {
	o.ExchangeRate = v
}

// GetAmountInHomeCurrency returns the AmountInHomeCurrency field value
func (o *QbdTransaction) GetAmountInHomeCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmountInHomeCurrency
}

// GetAmountInHomeCurrencyOk returns a tuple with the AmountInHomeCurrency field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetAmountInHomeCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountInHomeCurrency, true
}

// SetAmountInHomeCurrency sets field value
func (o *QbdTransaction) SetAmountInHomeCurrency(v string) {
	o.AmountInHomeCurrency = v
}

// GetMemo returns the Memo field value
func (o *QbdTransaction) GetMemo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Memo
}

// GetMemoOk returns a tuple with the Memo field value
// and a boolean to check if the value has been set.
func (o *QbdTransaction) GetMemoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memo, true
}

// SetMemo sets field value
func (o *QbdTransaction) SetMemo(v string) {
	o.Memo = v
}

func (o QbdTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactionType"] = o.TransactionType
	toSerialize["transactionId"] = o.TransactionId
	toSerialize["transactionLineId"] = o.TransactionLineId
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["entity"] = o.Entity
	toSerialize["account"] = o.Account
	toSerialize["transactionDate"] = o.TransactionDate
	toSerialize["refNumber"] = o.RefNumber
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["exchangeRate"] = o.ExchangeRate
	toSerialize["amountInHomeCurrency"] = o.AmountInHomeCurrency
	toSerialize["memo"] = o.Memo

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transactionType",
		"transactionId",
		"transactionLineId",
		"createdAt",
		"updatedAt",
		"entity",
		"account",
		"transactionDate",
		"refNumber",
		"amount",
		"currency",
		"exchangeRate",
		"amountInHomeCurrency",
		"memo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdTransaction := _QbdTransaction{}

	err = json.Unmarshal(data, &varQbdTransaction)

	if err != nil {
		return err
	}

	*o = QbdTransaction(varQbdTransaction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "transactionType")
		delete(additionalProperties, "transactionId")
		delete(additionalProperties, "transactionLineId")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "entity")
		delete(additionalProperties, "account")
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "refNumber")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "exchangeRate")
		delete(additionalProperties, "amountInHomeCurrency")
		delete(additionalProperties, "memo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdTransaction struct {
	value *QbdTransaction
	isSet bool
}

func (v NullableQbdTransaction) Get() *QbdTransaction {
	return v.value
}

func (v *NullableQbdTransaction) Set(val *QbdTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdTransaction(val *QbdTransaction) *NullableQbdTransaction {
	return &NullableQbdTransaction{value: val, isSet: true}
}

func (v NullableQbdTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


