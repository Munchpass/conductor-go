/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopInventoryAssemblyItemsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopInventoryAssemblyItemsPostRequest{}

// QuickbooksDesktopInventoryAssemblyItemsPostRequest struct for QuickbooksDesktopInventoryAssemblyItemsPostRequest
type QuickbooksDesktopInventoryAssemblyItemsPostRequest struct {
	// The case-insensitive name of this inventory assembly item. Not guaranteed to be unique because it does not include the names of its hierarchical parent objects like `fullName` does. For example, two inventory assembly items could both have the `name` \"Deluxe Kit\", but they could have unique `fullName` values, such as \"Assemblies:Deluxe Kit\" and \"Inventory:Deluxe Kit\".  Maximum length: 31 characters.
	Name string `json:"name"`
	Barcode *QuickbooksDesktopInventoryAssemblyItemsPostRequestBarcode `json:"barcode,omitempty"`
	// Indicates whether this inventory assembly item is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// The inventory assembly item's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default.
	ClassId *string `json:"classId,omitempty"`
	// The parent inventory assembly item one level above this one in the hierarchy. For example, if this inventory assembly item has a `fullName` of \"Assemblies:Deluxe Kit\", its parent has a `fullName` of \"Assemblies\". If this inventory assembly item is at the top level, this field will be `null`.
	ParentId *string `json:"parentId,omitempty"`
	// The unit-of-measure set associated with this inventory assembly item, which consists of a base unit and related units.
	UnitOfMeasureSetId *string `json:"unitOfMeasureSetId,omitempty"`
	// The default sales-tax code for this inventory assembly item, determining whether it is taxable or non-taxable. This can be overridden at the transaction-line level.  Default codes include \"Non\" (non-taxable) and \"Tax\" (taxable), but custom codes can also be created in QuickBooks. If QuickBooks is not set up to charge sales tax (via the \"Do You Charge Sales Tax?\" preference), it will assign the default non-taxable code to all sales.
	SalesTaxCodeId *string `json:"salesTaxCodeId,omitempty"`
	// The description of this inventory assembly item that appears on sales forms (e.g., invoices, sales receipts) when sold to customers.
	SalesDescription *string `json:"salesDescription,omitempty"`
	// The price at which this inventory assembly item is sold to customers, represented as a decimal string.
	SalesPrice *string `json:"salesPrice,omitempty"`
	// The income account used to track revenue from sales of this inventory assembly item.
	IncomeAccountId string `json:"incomeAccountId"`
	// The description of this inventory assembly item that appears on purchase forms (e.g., checks, bills, item receipts) when it is ordered or bought from vendors.
	PurchaseDescription *string `json:"purchaseDescription,omitempty"`
	// The cost at which this inventory assembly item is purchased from vendors, represented as a decimal string.
	PurchaseCost *string `json:"purchaseCost,omitempty"`
	// The tax code applied to purchases of this inventory assembly item. Applicable in regions where purchase taxes are used, such as Canada or the UK.
	PurchaseTaxCodeId *string `json:"purchaseTaxCodeId,omitempty"`
	// The Cost of Goods Sold (COGS) account for this inventory assembly item, tracking the original direct costs of producing goods sold.
	CogsAccountId string `json:"cogsAccountId"`
	// The preferred vendor from whom this inventory assembly item is typically purchased.
	PreferredVendorId *string `json:"preferredVendorId,omitempty"`
	// The asset account used to track the current value of this inventory assembly item in inventory.
	AssetAccountId string `json:"assetAccountId"`
	// The inventory assembly item's minimum quantity threshold that triggers a build notification in QuickBooks. When the sum of `quantityOnHand` (current inventory) and `quantityOnOrder` (pending purchase orders) drops below this threshold, QuickBooks will notify users that more units need to be built or assembled. This helps ensure adequate inventory levels for inventory assembly items.
	BuildNotificationThreshold *float32 `json:"buildNotificationThreshold,omitempty"`
	// The maximum quantity of this inventory assembly item desired in inventory.
	MaximumQuantityOnHand *float32 `json:"maximumQuantityOnHand,omitempty"`
	// The current quantity of this inventory assembly item available in inventory. To change the `quantityOnHand` for an inventory assembly item, you must create an inventory-adjustment instead of updating this inventory assembly item directly.
	QuantityOnHand *float32 `json:"quantityOnHand,omitempty"`
	// The total value of this inventory assembly item. If `totalValue` is provided, `quantityOnHand` must also be provided and must be greater than zero. If both `quantityOnHand` and `purchaseCost` are provided, then `totalValue` will be set to `quantityOnHand` times `purchaseCost`, regardless of what `totalValue` is explicitly set to.
	TotalValue *string `json:"totalValue,omitempty"`
	// The date when this inventory assembly item was converted into an inventory item from some other type of item, in ISO 8601 format (YYYY-MM-DD).
	InventoryDate *string `json:"inventoryDate,omitempty"`
	// A globally unique identifier (GUID) you, the developer, can provide for tracking this object in your external system. This field is immutable and can only be set during object creation.  **IMPORTANT**: This field must be formatted as a valid GUID; otherwise, QuickBooks will return an error.
	ExternalId *string `json:"externalId,omitempty"`
	// The inventory assembly item's lines.
	Lines []QuickbooksDesktopInventoryAssemblyItemsPostRequestLinesInner `json:"lines,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopInventoryAssemblyItemsPostRequest QuickbooksDesktopInventoryAssemblyItemsPostRequest

// NewQuickbooksDesktopInventoryAssemblyItemsPostRequest instantiates a new QuickbooksDesktopInventoryAssemblyItemsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopInventoryAssemblyItemsPostRequest(name string, incomeAccountId string, cogsAccountId string, assetAccountId string) *QuickbooksDesktopInventoryAssemblyItemsPostRequest {
	this := QuickbooksDesktopInventoryAssemblyItemsPostRequest{}
	this.Name = name
	var isActive bool = true
	this.IsActive = &isActive
	this.IncomeAccountId = incomeAccountId
	this.CogsAccountId = cogsAccountId
	this.AssetAccountId = assetAccountId
	return &this
}

// NewQuickbooksDesktopInventoryAssemblyItemsPostRequestWithDefaults instantiates a new QuickbooksDesktopInventoryAssemblyItemsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopInventoryAssemblyItemsPostRequestWithDefaults() *QuickbooksDesktopInventoryAssemblyItemsPostRequest {
	this := QuickbooksDesktopInventoryAssemblyItemsPostRequest{}
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// GetName returns the Name field value
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetName(v string) {
	o.Name = v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetBarcode() QuickbooksDesktopInventoryAssemblyItemsPostRequestBarcode {
	if o == nil || IsNil(o.Barcode) {
		var ret QuickbooksDesktopInventoryAssemblyItemsPostRequestBarcode
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetBarcodeOk() (*QuickbooksDesktopInventoryAssemblyItemsPostRequestBarcode, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given QuickbooksDesktopInventoryAssemblyItemsPostRequestBarcode and assigns it to the Barcode field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetBarcode(v QuickbooksDesktopInventoryAssemblyItemsPostRequestBarcode) {
	o.Barcode = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetClassId(v string) {
	o.ClassId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetParentId(v string) {
	o.ParentId = &v
}

// GetUnitOfMeasureSetId returns the UnitOfMeasureSetId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetUnitOfMeasureSetId() string {
	if o == nil || IsNil(o.UnitOfMeasureSetId) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasureSetId
}

// GetUnitOfMeasureSetIdOk returns a tuple with the UnitOfMeasureSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetUnitOfMeasureSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasureSetId) {
		return nil, false
	}
	return o.UnitOfMeasureSetId, true
}

// HasUnitOfMeasureSetId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasUnitOfMeasureSetId() bool {
	if o != nil && !IsNil(o.UnitOfMeasureSetId) {
		return true
	}

	return false
}

// SetUnitOfMeasureSetId gets a reference to the given string and assigns it to the UnitOfMeasureSetId field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetUnitOfMeasureSetId(v string) {
	o.UnitOfMeasureSetId = &v
}

// GetSalesTaxCodeId returns the SalesTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetSalesTaxCodeId() string {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		var ret string
		return ret
	}
	return *o.SalesTaxCodeId
}

// GetSalesTaxCodeIdOk returns a tuple with the SalesTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetSalesTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		return nil, false
	}
	return o.SalesTaxCodeId, true
}

// HasSalesTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasSalesTaxCodeId() bool {
	if o != nil && !IsNil(o.SalesTaxCodeId) {
		return true
	}

	return false
}

// SetSalesTaxCodeId gets a reference to the given string and assigns it to the SalesTaxCodeId field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetSalesTaxCodeId(v string) {
	o.SalesTaxCodeId = &v
}

// GetSalesDescription returns the SalesDescription field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetSalesDescription() string {
	if o == nil || IsNil(o.SalesDescription) {
		var ret string
		return ret
	}
	return *o.SalesDescription
}

// GetSalesDescriptionOk returns a tuple with the SalesDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetSalesDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SalesDescription) {
		return nil, false
	}
	return o.SalesDescription, true
}

// HasSalesDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasSalesDescription() bool {
	if o != nil && !IsNil(o.SalesDescription) {
		return true
	}

	return false
}

// SetSalesDescription gets a reference to the given string and assigns it to the SalesDescription field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetSalesDescription(v string) {
	o.SalesDescription = &v
}

// GetSalesPrice returns the SalesPrice field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetSalesPrice() string {
	if o == nil || IsNil(o.SalesPrice) {
		var ret string
		return ret
	}
	return *o.SalesPrice
}

// GetSalesPriceOk returns a tuple with the SalesPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetSalesPriceOk() (*string, bool) {
	if o == nil || IsNil(o.SalesPrice) {
		return nil, false
	}
	return o.SalesPrice, true
}

// HasSalesPrice returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasSalesPrice() bool {
	if o != nil && !IsNil(o.SalesPrice) {
		return true
	}

	return false
}

// SetSalesPrice gets a reference to the given string and assigns it to the SalesPrice field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetSalesPrice(v string) {
	o.SalesPrice = &v
}

// GetIncomeAccountId returns the IncomeAccountId field value
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetIncomeAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncomeAccountId
}

// GetIncomeAccountIdOk returns a tuple with the IncomeAccountId field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetIncomeAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncomeAccountId, true
}

// SetIncomeAccountId sets field value
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetIncomeAccountId(v string) {
	o.IncomeAccountId = v
}

// GetPurchaseDescription returns the PurchaseDescription field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetPurchaseDescription() string {
	if o == nil || IsNil(o.PurchaseDescription) {
		var ret string
		return ret
	}
	return *o.PurchaseDescription
}

// GetPurchaseDescriptionOk returns a tuple with the PurchaseDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetPurchaseDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseDescription) {
		return nil, false
	}
	return o.PurchaseDescription, true
}

// HasPurchaseDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasPurchaseDescription() bool {
	if o != nil && !IsNil(o.PurchaseDescription) {
		return true
	}

	return false
}

// SetPurchaseDescription gets a reference to the given string and assigns it to the PurchaseDescription field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetPurchaseDescription(v string) {
	o.PurchaseDescription = &v
}

// GetPurchaseCost returns the PurchaseCost field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetPurchaseCost() string {
	if o == nil || IsNil(o.PurchaseCost) {
		var ret string
		return ret
	}
	return *o.PurchaseCost
}

// GetPurchaseCostOk returns a tuple with the PurchaseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetPurchaseCostOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseCost) {
		return nil, false
	}
	return o.PurchaseCost, true
}

// HasPurchaseCost returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasPurchaseCost() bool {
	if o != nil && !IsNil(o.PurchaseCost) {
		return true
	}

	return false
}

// SetPurchaseCost gets a reference to the given string and assigns it to the PurchaseCost field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetPurchaseCost(v string) {
	o.PurchaseCost = &v
}

// GetPurchaseTaxCodeId returns the PurchaseTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetPurchaseTaxCodeId() string {
	if o == nil || IsNil(o.PurchaseTaxCodeId) {
		var ret string
		return ret
	}
	return *o.PurchaseTaxCodeId
}

// GetPurchaseTaxCodeIdOk returns a tuple with the PurchaseTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetPurchaseTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseTaxCodeId) {
		return nil, false
	}
	return o.PurchaseTaxCodeId, true
}

// HasPurchaseTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasPurchaseTaxCodeId() bool {
	if o != nil && !IsNil(o.PurchaseTaxCodeId) {
		return true
	}

	return false
}

// SetPurchaseTaxCodeId gets a reference to the given string and assigns it to the PurchaseTaxCodeId field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetPurchaseTaxCodeId(v string) {
	o.PurchaseTaxCodeId = &v
}

// GetCogsAccountId returns the CogsAccountId field value
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetCogsAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CogsAccountId
}

// GetCogsAccountIdOk returns a tuple with the CogsAccountId field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetCogsAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CogsAccountId, true
}

// SetCogsAccountId sets field value
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetCogsAccountId(v string) {
	o.CogsAccountId = v
}

// GetPreferredVendorId returns the PreferredVendorId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetPreferredVendorId() string {
	if o == nil || IsNil(o.PreferredVendorId) {
		var ret string
		return ret
	}
	return *o.PreferredVendorId
}

// GetPreferredVendorIdOk returns a tuple with the PreferredVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetPreferredVendorIdOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredVendorId) {
		return nil, false
	}
	return o.PreferredVendorId, true
}

// HasPreferredVendorId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasPreferredVendorId() bool {
	if o != nil && !IsNil(o.PreferredVendorId) {
		return true
	}

	return false
}

// SetPreferredVendorId gets a reference to the given string and assigns it to the PreferredVendorId field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetPreferredVendorId(v string) {
	o.PreferredVendorId = &v
}

// GetAssetAccountId returns the AssetAccountId field value
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetAssetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetAccountId
}

// GetAssetAccountIdOk returns a tuple with the AssetAccountId field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetAssetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetAccountId, true
}

// SetAssetAccountId sets field value
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetAssetAccountId(v string) {
	o.AssetAccountId = v
}

// GetBuildNotificationThreshold returns the BuildNotificationThreshold field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetBuildNotificationThreshold() float32 {
	if o == nil || IsNil(o.BuildNotificationThreshold) {
		var ret float32
		return ret
	}
	return *o.BuildNotificationThreshold
}

// GetBuildNotificationThresholdOk returns a tuple with the BuildNotificationThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetBuildNotificationThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.BuildNotificationThreshold) {
		return nil, false
	}
	return o.BuildNotificationThreshold, true
}

// HasBuildNotificationThreshold returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasBuildNotificationThreshold() bool {
	if o != nil && !IsNil(o.BuildNotificationThreshold) {
		return true
	}

	return false
}

// SetBuildNotificationThreshold gets a reference to the given float32 and assigns it to the BuildNotificationThreshold field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetBuildNotificationThreshold(v float32) {
	o.BuildNotificationThreshold = &v
}

// GetMaximumQuantityOnHand returns the MaximumQuantityOnHand field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetMaximumQuantityOnHand() float32 {
	if o == nil || IsNil(o.MaximumQuantityOnHand) {
		var ret float32
		return ret
	}
	return *o.MaximumQuantityOnHand
}

// GetMaximumQuantityOnHandOk returns a tuple with the MaximumQuantityOnHand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetMaximumQuantityOnHandOk() (*float32, bool) {
	if o == nil || IsNil(o.MaximumQuantityOnHand) {
		return nil, false
	}
	return o.MaximumQuantityOnHand, true
}

// HasMaximumQuantityOnHand returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasMaximumQuantityOnHand() bool {
	if o != nil && !IsNil(o.MaximumQuantityOnHand) {
		return true
	}

	return false
}

// SetMaximumQuantityOnHand gets a reference to the given float32 and assigns it to the MaximumQuantityOnHand field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetMaximumQuantityOnHand(v float32) {
	o.MaximumQuantityOnHand = &v
}

// GetQuantityOnHand returns the QuantityOnHand field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetQuantityOnHand() float32 {
	if o == nil || IsNil(o.QuantityOnHand) {
		var ret float32
		return ret
	}
	return *o.QuantityOnHand
}

// GetQuantityOnHandOk returns a tuple with the QuantityOnHand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetQuantityOnHandOk() (*float32, bool) {
	if o == nil || IsNil(o.QuantityOnHand) {
		return nil, false
	}
	return o.QuantityOnHand, true
}

// HasQuantityOnHand returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasQuantityOnHand() bool {
	if o != nil && !IsNil(o.QuantityOnHand) {
		return true
	}

	return false
}

// SetQuantityOnHand gets a reference to the given float32 and assigns it to the QuantityOnHand field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetQuantityOnHand(v float32) {
	o.QuantityOnHand = &v
}

// GetTotalValue returns the TotalValue field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetTotalValue() string {
	if o == nil || IsNil(o.TotalValue) {
		var ret string
		return ret
	}
	return *o.TotalValue
}

// GetTotalValueOk returns a tuple with the TotalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetTotalValueOk() (*string, bool) {
	if o == nil || IsNil(o.TotalValue) {
		return nil, false
	}
	return o.TotalValue, true
}

// HasTotalValue returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasTotalValue() bool {
	if o != nil && !IsNil(o.TotalValue) {
		return true
	}

	return false
}

// SetTotalValue gets a reference to the given string and assigns it to the TotalValue field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetTotalValue(v string) {
	o.TotalValue = &v
}

// GetInventoryDate returns the InventoryDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetInventoryDate() string {
	if o == nil || IsNil(o.InventoryDate) {
		var ret string
		return ret
	}
	return *o.InventoryDate
}

// GetInventoryDateOk returns a tuple with the InventoryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetInventoryDateOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryDate) {
		return nil, false
	}
	return o.InventoryDate, true
}

// HasInventoryDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasInventoryDate() bool {
	if o != nil && !IsNil(o.InventoryDate) {
		return true
	}

	return false
}

// SetInventoryDate gets a reference to the given string and assigns it to the InventoryDate field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetInventoryDate(v string) {
	o.InventoryDate = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetLines() []QuickbooksDesktopInventoryAssemblyItemsPostRequestLinesInner {
	if o == nil || IsNil(o.Lines) {
		var ret []QuickbooksDesktopInventoryAssemblyItemsPostRequestLinesInner
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) GetLinesOk() ([]QuickbooksDesktopInventoryAssemblyItemsPostRequestLinesInner, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []QuickbooksDesktopInventoryAssemblyItemsPostRequestLinesInner and assigns it to the Lines field.
func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) SetLines(v []QuickbooksDesktopInventoryAssemblyItemsPostRequestLinesInner) {
	o.Lines = v
}

func (o QuickbooksDesktopInventoryAssemblyItemsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopInventoryAssemblyItemsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.UnitOfMeasureSetId) {
		toSerialize["unitOfMeasureSetId"] = o.UnitOfMeasureSetId
	}
	if !IsNil(o.SalesTaxCodeId) {
		toSerialize["salesTaxCodeId"] = o.SalesTaxCodeId
	}
	if !IsNil(o.SalesDescription) {
		toSerialize["salesDescription"] = o.SalesDescription
	}
	if !IsNil(o.SalesPrice) {
		toSerialize["salesPrice"] = o.SalesPrice
	}
	toSerialize["incomeAccountId"] = o.IncomeAccountId
	if !IsNil(o.PurchaseDescription) {
		toSerialize["purchaseDescription"] = o.PurchaseDescription
	}
	if !IsNil(o.PurchaseCost) {
		toSerialize["purchaseCost"] = o.PurchaseCost
	}
	if !IsNil(o.PurchaseTaxCodeId) {
		toSerialize["purchaseTaxCodeId"] = o.PurchaseTaxCodeId
	}
	toSerialize["cogsAccountId"] = o.CogsAccountId
	if !IsNil(o.PreferredVendorId) {
		toSerialize["preferredVendorId"] = o.PreferredVendorId
	}
	toSerialize["assetAccountId"] = o.AssetAccountId
	if !IsNil(o.BuildNotificationThreshold) {
		toSerialize["buildNotificationThreshold"] = o.BuildNotificationThreshold
	}
	if !IsNil(o.MaximumQuantityOnHand) {
		toSerialize["maximumQuantityOnHand"] = o.MaximumQuantityOnHand
	}
	if !IsNil(o.QuantityOnHand) {
		toSerialize["quantityOnHand"] = o.QuantityOnHand
	}
	if !IsNil(o.TotalValue) {
		toSerialize["totalValue"] = o.TotalValue
	}
	if !IsNil(o.InventoryDate) {
		toSerialize["inventoryDate"] = o.InventoryDate
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopInventoryAssemblyItemsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"incomeAccountId",
		"cogsAccountId",
		"assetAccountId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopInventoryAssemblyItemsPostRequest := _QuickbooksDesktopInventoryAssemblyItemsPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopInventoryAssemblyItemsPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopInventoryAssemblyItemsPostRequest(varQuickbooksDesktopInventoryAssemblyItemsPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "barcode")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "parentId")
		delete(additionalProperties, "unitOfMeasureSetId")
		delete(additionalProperties, "salesTaxCodeId")
		delete(additionalProperties, "salesDescription")
		delete(additionalProperties, "salesPrice")
		delete(additionalProperties, "incomeAccountId")
		delete(additionalProperties, "purchaseDescription")
		delete(additionalProperties, "purchaseCost")
		delete(additionalProperties, "purchaseTaxCodeId")
		delete(additionalProperties, "cogsAccountId")
		delete(additionalProperties, "preferredVendorId")
		delete(additionalProperties, "assetAccountId")
		delete(additionalProperties, "buildNotificationThreshold")
		delete(additionalProperties, "maximumQuantityOnHand")
		delete(additionalProperties, "quantityOnHand")
		delete(additionalProperties, "totalValue")
		delete(additionalProperties, "inventoryDate")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "lines")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest struct {
	value *QuickbooksDesktopInventoryAssemblyItemsPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest) Get() *QuickbooksDesktopInventoryAssemblyItemsPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest) Set(val *QuickbooksDesktopInventoryAssemblyItemsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopInventoryAssemblyItemsPostRequest(val *QuickbooksDesktopInventoryAssemblyItemsPostRequest) *NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest {
	return &NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopInventoryAssemblyItemsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


