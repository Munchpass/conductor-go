/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdEarnings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdEarnings{}

// QbdEarnings struct for QbdEarnings
type QbdEarnings struct {
	PayrollWageItem QbdEarningsPayrollWageItem `json:"payrollWageItem"`
	// The hourly rate for this employee, represented as a decimal string.
	Rate string `json:"rate"`
	// The hourly rate for this employee expressed as a percentage.
	RatePercent string `json:"ratePercent"`
	AdditionalProperties map[string]interface{}
}

type _QbdEarnings QbdEarnings

// NewQbdEarnings instantiates a new QbdEarnings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdEarnings(payrollWageItem QbdEarningsPayrollWageItem, rate string, ratePercent string) *QbdEarnings {
	this := QbdEarnings{}
	this.PayrollWageItem = payrollWageItem
	this.Rate = rate
	this.RatePercent = ratePercent
	return &this
}

// NewQbdEarningsWithDefaults instantiates a new QbdEarnings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdEarningsWithDefaults() *QbdEarnings {
	this := QbdEarnings{}
	return &this
}

// GetPayrollWageItem returns the PayrollWageItem field value
func (o *QbdEarnings) GetPayrollWageItem() QbdEarningsPayrollWageItem {
	if o == nil {
		var ret QbdEarningsPayrollWageItem
		return ret
	}

	return o.PayrollWageItem
}

// GetPayrollWageItemOk returns a tuple with the PayrollWageItem field value
// and a boolean to check if the value has been set.
func (o *QbdEarnings) GetPayrollWageItemOk() (*QbdEarningsPayrollWageItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayrollWageItem, true
}

// SetPayrollWageItem sets field value
func (o *QbdEarnings) SetPayrollWageItem(v QbdEarningsPayrollWageItem) {
	o.PayrollWageItem = v
}

// GetRate returns the Rate field value
func (o *QbdEarnings) GetRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *QbdEarnings) GetRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *QbdEarnings) SetRate(v string) {
	o.Rate = v
}

// GetRatePercent returns the RatePercent field value
func (o *QbdEarnings) GetRatePercent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RatePercent
}

// GetRatePercentOk returns a tuple with the RatePercent field value
// and a boolean to check if the value has been set.
func (o *QbdEarnings) GetRatePercentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RatePercent, true
}

// SetRatePercent sets field value
func (o *QbdEarnings) SetRatePercent(v string) {
	o.RatePercent = v
}

func (o QbdEarnings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdEarnings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["payrollWageItem"] = o.PayrollWageItem
	toSerialize["rate"] = o.Rate
	toSerialize["ratePercent"] = o.RatePercent

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdEarnings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"payrollWageItem",
		"rate",
		"ratePercent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdEarnings := _QbdEarnings{}

	err = json.Unmarshal(data, &varQbdEarnings)

	if err != nil {
		return err
	}

	*o = QbdEarnings(varQbdEarnings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payrollWageItem")
		delete(additionalProperties, "rate")
		delete(additionalProperties, "ratePercent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdEarnings struct {
	value *QbdEarnings
	isSet bool
}

func (v NullableQbdEarnings) Get() *QbdEarnings {
	return v.value
}

func (v *NullableQbdEarnings) Set(val *QbdEarnings) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdEarnings) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdEarnings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdEarnings(val *QbdEarnings) *NullableQbdEarnings {
	return &NullableQbdEarnings{value: val, isSet: true}
}

func (v NullableQbdEarnings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdEarnings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


