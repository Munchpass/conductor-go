/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QbdAccountantCopy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdAccountantCopy{}

// QbdAccountantCopy struct for QbdAccountantCopy
type QbdAccountantCopy struct {
	// Indicates whether an accountant copy has been made for this company file. An accountant copy allows an accountant to work on the books while the business continues daily operations.
	AccountantCopyExists bool `json:"accountantCopyExists"`
	// The fiscal period dividing date for accountant work, in ISO 8601 format (YYYY-MM-DD). While an accountant copy exists, transactions within this period cannot be modified or created. New accounts can be added, but existing accounts cannot have new subaccounts, be edited, merged, or made inactive. List items cannot be deleted or merged.
	DividingDate NullableString `json:"dividingDate"`
}

type _QbdAccountantCopy QbdAccountantCopy

// NewQbdAccountantCopy instantiates a new QbdAccountantCopy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdAccountantCopy(accountantCopyExists bool, dividingDate NullableString) *QbdAccountantCopy {
	this := QbdAccountantCopy{}
	this.AccountantCopyExists = accountantCopyExists
	this.DividingDate = dividingDate
	return &this
}

// NewQbdAccountantCopyWithDefaults instantiates a new QbdAccountantCopy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdAccountantCopyWithDefaults() *QbdAccountantCopy {
	this := QbdAccountantCopy{}
	return &this
}

// GetAccountantCopyExists returns the AccountantCopyExists field value
func (o *QbdAccountantCopy) GetAccountantCopyExists() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AccountantCopyExists
}

// GetAccountantCopyExistsOk returns a tuple with the AccountantCopyExists field value
// and a boolean to check if the value has been set.
func (o *QbdAccountantCopy) GetAccountantCopyExistsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountantCopyExists, true
}

// SetAccountantCopyExists sets field value
func (o *QbdAccountantCopy) SetAccountantCopyExists(v bool) {
	o.AccountantCopyExists = v
}

// GetDividingDate returns the DividingDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *QbdAccountantCopy) GetDividingDate() string {
	if o == nil || o.DividingDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.DividingDate.Get()
}

// GetDividingDateOk returns a tuple with the DividingDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdAccountantCopy) GetDividingDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DividingDate.Get(), o.DividingDate.IsSet()
}

// SetDividingDate sets field value
func (o *QbdAccountantCopy) SetDividingDate(v string) {
	o.DividingDate.Set(&v)
}

func (o QbdAccountantCopy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdAccountantCopy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountantCopyExists"] = o.AccountantCopyExists
	toSerialize["dividingDate"] = o.DividingDate.Get()
	return toSerialize, nil
}

func (o *QbdAccountantCopy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountantCopyExists",
		"dividingDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdAccountantCopy := _QbdAccountantCopy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQbdAccountantCopy)

	if err != nil {
		return err
	}

	*o = QbdAccountantCopy(varQbdAccountantCopy)

	return err
}

type NullableQbdAccountantCopy struct {
	value *QbdAccountantCopy
	isSet bool
}

func (v NullableQbdAccountantCopy) Get() *QbdAccountantCopy {
	return v.value
}

func (v *NullableQbdAccountantCopy) Set(val *QbdAccountantCopy) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdAccountantCopy) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdAccountantCopy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdAccountantCopy(val *QbdAccountantCopy) *NullableQbdAccountantCopy {
	return &NullableQbdAccountantCopy{value: val, isSet: true}
}

func (v NullableQbdAccountantCopy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdAccountantCopy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


