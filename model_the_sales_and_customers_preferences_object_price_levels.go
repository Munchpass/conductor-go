/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TheSalesAndCustomersPreferencesObjectPriceLevels - The custom pricing settings for this company file that can be assigned to specific customers. When a price level is set for a customer, QuickBooks automatically applies these custom prices to new invoices, sales receipts, sales orders, and credit memos. These settings can be overridden when creating individual transactions, and price levels can also be specified on individual line items in supported sales transactions.
type TheSalesAndCustomersPreferencesObjectPriceLevels struct {
	QbdPriceLevels *QbdPriceLevels
}

// QbdPriceLevelsAsTheSalesAndCustomersPreferencesObjectPriceLevels is a convenience function that returns QbdPriceLevels wrapped in TheSalesAndCustomersPreferencesObjectPriceLevels
func QbdPriceLevelsAsTheSalesAndCustomersPreferencesObjectPriceLevels(v *QbdPriceLevels) TheSalesAndCustomersPreferencesObjectPriceLevels {
	return TheSalesAndCustomersPreferencesObjectPriceLevels{
		QbdPriceLevels: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TheSalesAndCustomersPreferencesObjectPriceLevels) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into QbdPriceLevels
	err = newStrictDecoder(data).Decode(&dst.QbdPriceLevels)
	if err == nil {
		jsonQbdPriceLevels, _ := json.Marshal(dst.QbdPriceLevels)
		if string(jsonQbdPriceLevels) == "{}" { // empty struct
			dst.QbdPriceLevels = nil
		} else {
			if err = validator.Validate(dst.QbdPriceLevels); err != nil {
				dst.QbdPriceLevels = nil
			} else {
				match++
			}
		}
	} else {
		dst.QbdPriceLevels = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QbdPriceLevels = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TheSalesAndCustomersPreferencesObjectPriceLevels)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TheSalesAndCustomersPreferencesObjectPriceLevels)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TheSalesAndCustomersPreferencesObjectPriceLevels) MarshalJSON() ([]byte, error) {
	if src.QbdPriceLevels != nil {
		return json.Marshal(&src.QbdPriceLevels)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TheSalesAndCustomersPreferencesObjectPriceLevels) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QbdPriceLevels != nil {
		return obj.QbdPriceLevels
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TheSalesAndCustomersPreferencesObjectPriceLevels) GetActualInstanceValue() (interface{}) {
	if obj.QbdPriceLevels != nil {
		return *obj.QbdPriceLevels
	}

	// all schemas are nil
	return nil
}

type NullableTheSalesAndCustomersPreferencesObjectPriceLevels struct {
	value *TheSalesAndCustomersPreferencesObjectPriceLevels
	isSet bool
}

func (v NullableTheSalesAndCustomersPreferencesObjectPriceLevels) Get() *TheSalesAndCustomersPreferencesObjectPriceLevels {
	return v.value
}

func (v *NullableTheSalesAndCustomersPreferencesObjectPriceLevels) Set(val *TheSalesAndCustomersPreferencesObjectPriceLevels) {
	v.value = val
	v.isSet = true
}

func (v NullableTheSalesAndCustomersPreferencesObjectPriceLevels) IsSet() bool {
	return v.isSet
}

func (v *NullableTheSalesAndCustomersPreferencesObjectPriceLevels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTheSalesAndCustomersPreferencesObjectPriceLevels(val *TheSalesAndCustomersPreferencesObjectPriceLevels) *NullableTheSalesAndCustomersPreferencesObjectPriceLevels {
	return &NullableTheSalesAndCustomersPreferencesObjectPriceLevels{value: val, isSet: true}
}

func (v NullableTheSalesAndCustomersPreferencesObjectPriceLevels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTheSalesAndCustomersPreferencesObjectPriceLevels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


