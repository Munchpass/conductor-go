/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopSalesReceiptsIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopSalesReceiptsIdPostRequest{}

// QuickbooksDesktopSalesReceiptsIdPostRequest struct for QuickbooksDesktopSalesReceiptsIdPostRequest
type QuickbooksDesktopSalesReceiptsIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the sales receipt object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The customer or customer-job to which the payment for this sales receipt is credited.
	CustomerId *string `json:"customerId,omitempty"`
	// The sales receipt's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default. A class defined here is automatically used in this sales receipt's line items unless overridden at the line item level.
	ClassId *string `json:"classId,omitempty"`
	// The predefined template in QuickBooks that determines the layout and formatting for this sales receipt when printed or displayed.
	DocumentTemplateId *string `json:"documentTemplateId,omitempty"`
	// The date of this sales receipt, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate *string `json:"transactionDate,omitempty"`
	// The case-sensitive user-defined reference number for this sales receipt, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user.
	RefNumber *string `json:"refNumber,omitempty"`
	BillingAddress *QuickbooksDesktopSalesReceiptsPostRequestBillingAddress `json:"billingAddress,omitempty"`
	ShippingAddress *QuickbooksDesktopSalesReceiptsPostRequestShippingAddress `json:"shippingAddress,omitempty"`
	// Indicates whether this sales receipt has not been completed.
	IsPending *bool `json:"isPending,omitempty"`
	// The check number of a check received for this sales receipt.
	CheckNumber *string `json:"checkNumber,omitempty"`
	// The sales receipt's payment method (e.g., cash, check, credit card).
	PaymentMethodId *string `json:"paymentMethodId,omitempty"`
	// The date by which this sales receipt must be paid, in ISO 8601 format (YYYY-MM-DD).  **NOTE**: For sales receipts, this field is often `null` because sales receipts are generally used for point-of-sale payments, where full payment is received at the time of purchase.
	DueDate *string `json:"dueDate,omitempty"`
	// The sales receipt's sales representative. Sales representatives can be employees, vendors, or other names in QuickBooks.
	SalesRepresentativeId *string `json:"salesRepresentativeId,omitempty"`
	// The date when the products or services for this sales receipt were shipped or are expected to be shipped, in ISO 8601 format (YYYY-MM-DD).
	ShippingDate *string `json:"shippingDate,omitempty"`
	// The shipping method used for this sales receipt, such as standard mail or overnight delivery.
	ShippingMethodId *string `json:"shippingMethodId,omitempty"`
	// The origin location from where the product associated with this sales receipt is shipped. This is the point at which ownership and liability for goods transfer from seller to buyer. Internally, QuickBooks uses the term \"FOB\" for this field, which stands for \"freight on board\". This field is informational and has no accounting implications.
	ShipmentOrigin *string `json:"shipmentOrigin,omitempty"`
	// The sales-tax item used to calculate the actual tax amount for this sales receipt's transactions by applying a specific tax rate collected for a single tax agency. Unlike `salesTaxCode`, which only indicates general taxability, this field drives the actual tax calculation and reporting.  For sales receipts, while using this field to specify a single tax item/group that applies uniformly is recommended, complex tax scenarios may require alternative approaches. In such cases, you can set this field to a 0% tax item (conventionally named \"Tax Calculated On Invoice\") and handle tax calculations through line items instead. When using line items for taxes, note that only individual tax items (not tax groups) can be used, subtotals can help apply a tax to multiple items but only the first tax line after a subtotal is calculated automatically (subsequent tax lines require manual amounts), and the rate column will always display the actual tax amount rather than the rate percentage.
	SalesTaxItemId *string `json:"salesTaxItemId,omitempty"`
	// A memo or note for this sales receipt that appears in reports, but not on the sales receipt.
	Memo *string `json:"memo,omitempty"`
	// The message to display to the customer on the sales receipt.
	CustomerMessageId *string `json:"customerMessageId,omitempty"`
	// Indicates whether this sales receipt is included in the queue of documents for QuickBooks to print.
	IsQueuedForPrint *bool `json:"isQueuedForPrint,omitempty"`
	// Indicates whether this sales receipt is included in the queue of documents for QuickBooks to email to the customer.
	IsQueuedForEmail *bool `json:"isQueuedForEmail,omitempty"`
	// The sales-tax code for this sales receipt, determining whether it is taxable or non-taxable. This can be overridden at the transaction-line level.  Default codes include \"Non\" (non-taxable) and \"Tax\" (taxable), but custom codes can also be created in QuickBooks. If QuickBooks is not set up to charge sales tax (via the \"Do You Charge Sales Tax?\" preference), it will assign the default non-taxable code to all sales.
	SalesTaxCodeId *string `json:"salesTaxCodeId,omitempty"`
	// The account where the funds for this sales receipt will be or have been deposited.
	DepositToAccountId *string `json:"depositToAccountId,omitempty"`
	// A built-in custom field for additional information specific to this sales receipt. Unlike the user-defined fields in the `customFields` array, this is a standard QuickBooks field that exists for all sales receipts for convenience. Developers often use this field for tracking information that doesn't fit into other standard QuickBooks fields. Unlike `otherCustomField1` and `otherCustomField2`, which are line item fields, this exists at the transaction level. Hidden by default in the QuickBooks UI.
	OtherCustomField *string `json:"otherCustomField,omitempty"`
	// The market exchange rate between this sales receipt's currency and the home currency in QuickBooks at the time of this transaction. Represented as a decimal value (e.g., 1.2345 for 1 EUR = 1.2345 USD if USD is the home currency).
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`
	// The sales receipt's line items, each representing a single product or service sold.  **IMPORTANT**:  1. Including this array in your update request will **REPLACE** all existing line items for the sales receipt with this array. To keep any existing line items, you must include them in this array even if they have not changed. **Any line items not included will be removed.**  2. To add a new line item, include it here with the `id` field set to `-1`.  3. If you do not wish to modify any line items, omit this field entirely to keep them unchanged.
	Lines []QuickbooksDesktopSalesReceiptsIdPostRequestLinesInner `json:"lines,omitempty"`
	// The sales receipt's line item groups, each representing a predefined set of related items.  **IMPORTANT**:  1. Including this array in your update request will **REPLACE** all existing line item groups for the sales receipt with this array. To keep any existing line item groups, you must include them in this array even if they have not changed. **Any line item groups not included will be removed.**  2. To add a new line item group, include it here with the `id` field set to `-1`.  3. If you do not wish to modify any line item groups, omit this field entirely to keep them unchanged.
	LineGroups []QuickbooksDesktopSalesReceiptsIdPostRequestLineGroupsInner `json:"lineGroups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopSalesReceiptsIdPostRequest QuickbooksDesktopSalesReceiptsIdPostRequest

// NewQuickbooksDesktopSalesReceiptsIdPostRequest instantiates a new QuickbooksDesktopSalesReceiptsIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopSalesReceiptsIdPostRequest(revisionNumber string) *QuickbooksDesktopSalesReceiptsIdPostRequest {
	this := QuickbooksDesktopSalesReceiptsIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopSalesReceiptsIdPostRequestWithDefaults instantiates a new QuickbooksDesktopSalesReceiptsIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopSalesReceiptsIdPostRequestWithDefaults() *QuickbooksDesktopSalesReceiptsIdPostRequest {
	this := QuickbooksDesktopSalesReceiptsIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetClassId(v string) {
	o.ClassId = &v
}

// GetDocumentTemplateId returns the DocumentTemplateId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetDocumentTemplateId() string {
	if o == nil || IsNil(o.DocumentTemplateId) {
		var ret string
		return ret
	}
	return *o.DocumentTemplateId
}

// GetDocumentTemplateIdOk returns a tuple with the DocumentTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetDocumentTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentTemplateId) {
		return nil, false
	}
	return o.DocumentTemplateId, true
}

// HasDocumentTemplateId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasDocumentTemplateId() bool {
	if o != nil && !IsNil(o.DocumentTemplateId) {
		return true
	}

	return false
}

// SetDocumentTemplateId gets a reference to the given string and assigns it to the DocumentTemplateId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetDocumentTemplateId(v string) {
	o.DocumentTemplateId = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetRefNumber returns the RefNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetRefNumber() string {
	if o == nil || IsNil(o.RefNumber) {
		var ret string
		return ret
	}
	return *o.RefNumber
}

// GetRefNumberOk returns a tuple with the RefNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetRefNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RefNumber) {
		return nil, false
	}
	return o.RefNumber, true
}

// HasRefNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasRefNumber() bool {
	if o != nil && !IsNil(o.RefNumber) {
		return true
	}

	return false
}

// SetRefNumber gets a reference to the given string and assigns it to the RefNumber field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetRefNumber(v string) {
	o.RefNumber = &v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetBillingAddress() QuickbooksDesktopSalesReceiptsPostRequestBillingAddress {
	if o == nil || IsNil(o.BillingAddress) {
		var ret QuickbooksDesktopSalesReceiptsPostRequestBillingAddress
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetBillingAddressOk() (*QuickbooksDesktopSalesReceiptsPostRequestBillingAddress, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given QuickbooksDesktopSalesReceiptsPostRequestBillingAddress and assigns it to the BillingAddress field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetBillingAddress(v QuickbooksDesktopSalesReceiptsPostRequestBillingAddress) {
	o.BillingAddress = &v
}

// GetShippingAddress returns the ShippingAddress field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetShippingAddress() QuickbooksDesktopSalesReceiptsPostRequestShippingAddress {
	if o == nil || IsNil(o.ShippingAddress) {
		var ret QuickbooksDesktopSalesReceiptsPostRequestShippingAddress
		return ret
	}
	return *o.ShippingAddress
}

// GetShippingAddressOk returns a tuple with the ShippingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetShippingAddressOk() (*QuickbooksDesktopSalesReceiptsPostRequestShippingAddress, bool) {
	if o == nil || IsNil(o.ShippingAddress) {
		return nil, false
	}
	return o.ShippingAddress, true
}

// HasShippingAddress returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasShippingAddress() bool {
	if o != nil && !IsNil(o.ShippingAddress) {
		return true
	}

	return false
}

// SetShippingAddress gets a reference to the given QuickbooksDesktopSalesReceiptsPostRequestShippingAddress and assigns it to the ShippingAddress field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetShippingAddress(v QuickbooksDesktopSalesReceiptsPostRequestShippingAddress) {
	o.ShippingAddress = &v
}

// GetIsPending returns the IsPending field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetIsPending() bool {
	if o == nil || IsNil(o.IsPending) {
		var ret bool
		return ret
	}
	return *o.IsPending
}

// GetIsPendingOk returns a tuple with the IsPending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetIsPendingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPending) {
		return nil, false
	}
	return o.IsPending, true
}

// HasIsPending returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasIsPending() bool {
	if o != nil && !IsNil(o.IsPending) {
		return true
	}

	return false
}

// SetIsPending gets a reference to the given bool and assigns it to the IsPending field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetIsPending(v bool) {
	o.IsPending = &v
}

// GetCheckNumber returns the CheckNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetCheckNumber() string {
	if o == nil || IsNil(o.CheckNumber) {
		var ret string
		return ret
	}
	return *o.CheckNumber
}

// GetCheckNumberOk returns a tuple with the CheckNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetCheckNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CheckNumber) {
		return nil, false
	}
	return o.CheckNumber, true
}

// HasCheckNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasCheckNumber() bool {
	if o != nil && !IsNil(o.CheckNumber) {
		return true
	}

	return false
}

// SetCheckNumber gets a reference to the given string and assigns it to the CheckNumber field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetCheckNumber(v string) {
	o.CheckNumber = &v
}

// GetPaymentMethodId returns the PaymentMethodId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetPaymentMethodId() string {
	if o == nil || IsNil(o.PaymentMethodId) {
		var ret string
		return ret
	}
	return *o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethodId) {
		return nil, false
	}
	return o.PaymentMethodId, true
}

// HasPaymentMethodId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasPaymentMethodId() bool {
	if o != nil && !IsNil(o.PaymentMethodId) {
		return true
	}

	return false
}

// SetPaymentMethodId gets a reference to the given string and assigns it to the PaymentMethodId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetPaymentMethodId(v string) {
	o.PaymentMethodId = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetDueDate(v string) {
	o.DueDate = &v
}

// GetSalesRepresentativeId returns the SalesRepresentativeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetSalesRepresentativeId() string {
	if o == nil || IsNil(o.SalesRepresentativeId) {
		var ret string
		return ret
	}
	return *o.SalesRepresentativeId
}

// GetSalesRepresentativeIdOk returns a tuple with the SalesRepresentativeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetSalesRepresentativeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesRepresentativeId) {
		return nil, false
	}
	return o.SalesRepresentativeId, true
}

// HasSalesRepresentativeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasSalesRepresentativeId() bool {
	if o != nil && !IsNil(o.SalesRepresentativeId) {
		return true
	}

	return false
}

// SetSalesRepresentativeId gets a reference to the given string and assigns it to the SalesRepresentativeId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetSalesRepresentativeId(v string) {
	o.SalesRepresentativeId = &v
}

// GetShippingDate returns the ShippingDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetShippingDate() string {
	if o == nil || IsNil(o.ShippingDate) {
		var ret string
		return ret
	}
	return *o.ShippingDate
}

// GetShippingDateOk returns a tuple with the ShippingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetShippingDateOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingDate) {
		return nil, false
	}
	return o.ShippingDate, true
}

// HasShippingDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasShippingDate() bool {
	if o != nil && !IsNil(o.ShippingDate) {
		return true
	}

	return false
}

// SetShippingDate gets a reference to the given string and assigns it to the ShippingDate field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetShippingDate(v string) {
	o.ShippingDate = &v
}

// GetShippingMethodId returns the ShippingMethodId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetShippingMethodId() string {
	if o == nil || IsNil(o.ShippingMethodId) {
		var ret string
		return ret
	}
	return *o.ShippingMethodId
}

// GetShippingMethodIdOk returns a tuple with the ShippingMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetShippingMethodIdOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingMethodId) {
		return nil, false
	}
	return o.ShippingMethodId, true
}

// HasShippingMethodId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasShippingMethodId() bool {
	if o != nil && !IsNil(o.ShippingMethodId) {
		return true
	}

	return false
}

// SetShippingMethodId gets a reference to the given string and assigns it to the ShippingMethodId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetShippingMethodId(v string) {
	o.ShippingMethodId = &v
}

// GetShipmentOrigin returns the ShipmentOrigin field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetShipmentOrigin() string {
	if o == nil || IsNil(o.ShipmentOrigin) {
		var ret string
		return ret
	}
	return *o.ShipmentOrigin
}

// GetShipmentOriginOk returns a tuple with the ShipmentOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetShipmentOriginOk() (*string, bool) {
	if o == nil || IsNil(o.ShipmentOrigin) {
		return nil, false
	}
	return o.ShipmentOrigin, true
}

// HasShipmentOrigin returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasShipmentOrigin() bool {
	if o != nil && !IsNil(o.ShipmentOrigin) {
		return true
	}

	return false
}

// SetShipmentOrigin gets a reference to the given string and assigns it to the ShipmentOrigin field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetShipmentOrigin(v string) {
	o.ShipmentOrigin = &v
}

// GetSalesTaxItemId returns the SalesTaxItemId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetSalesTaxItemId() string {
	if o == nil || IsNil(o.SalesTaxItemId) {
		var ret string
		return ret
	}
	return *o.SalesTaxItemId
}

// GetSalesTaxItemIdOk returns a tuple with the SalesTaxItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetSalesTaxItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxItemId) {
		return nil, false
	}
	return o.SalesTaxItemId, true
}

// HasSalesTaxItemId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasSalesTaxItemId() bool {
	if o != nil && !IsNil(o.SalesTaxItemId) {
		return true
	}

	return false
}

// SetSalesTaxItemId gets a reference to the given string and assigns it to the SalesTaxItemId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetSalesTaxItemId(v string) {
	o.SalesTaxItemId = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetMemo(v string) {
	o.Memo = &v
}

// GetCustomerMessageId returns the CustomerMessageId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetCustomerMessageId() string {
	if o == nil || IsNil(o.CustomerMessageId) {
		var ret string
		return ret
	}
	return *o.CustomerMessageId
}

// GetCustomerMessageIdOk returns a tuple with the CustomerMessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetCustomerMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerMessageId) {
		return nil, false
	}
	return o.CustomerMessageId, true
}

// HasCustomerMessageId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasCustomerMessageId() bool {
	if o != nil && !IsNil(o.CustomerMessageId) {
		return true
	}

	return false
}

// SetCustomerMessageId gets a reference to the given string and assigns it to the CustomerMessageId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetCustomerMessageId(v string) {
	o.CustomerMessageId = &v
}

// GetIsQueuedForPrint returns the IsQueuedForPrint field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetIsQueuedForPrint() bool {
	if o == nil || IsNil(o.IsQueuedForPrint) {
		var ret bool
		return ret
	}
	return *o.IsQueuedForPrint
}

// GetIsQueuedForPrintOk returns a tuple with the IsQueuedForPrint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetIsQueuedForPrintOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQueuedForPrint) {
		return nil, false
	}
	return o.IsQueuedForPrint, true
}

// HasIsQueuedForPrint returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasIsQueuedForPrint() bool {
	if o != nil && !IsNil(o.IsQueuedForPrint) {
		return true
	}

	return false
}

// SetIsQueuedForPrint gets a reference to the given bool and assigns it to the IsQueuedForPrint field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetIsQueuedForPrint(v bool) {
	o.IsQueuedForPrint = &v
}

// GetIsQueuedForEmail returns the IsQueuedForEmail field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetIsQueuedForEmail() bool {
	if o == nil || IsNil(o.IsQueuedForEmail) {
		var ret bool
		return ret
	}
	return *o.IsQueuedForEmail
}

// GetIsQueuedForEmailOk returns a tuple with the IsQueuedForEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetIsQueuedForEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQueuedForEmail) {
		return nil, false
	}
	return o.IsQueuedForEmail, true
}

// HasIsQueuedForEmail returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasIsQueuedForEmail() bool {
	if o != nil && !IsNil(o.IsQueuedForEmail) {
		return true
	}

	return false
}

// SetIsQueuedForEmail gets a reference to the given bool and assigns it to the IsQueuedForEmail field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetIsQueuedForEmail(v bool) {
	o.IsQueuedForEmail = &v
}

// GetSalesTaxCodeId returns the SalesTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetSalesTaxCodeId() string {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		var ret string
		return ret
	}
	return *o.SalesTaxCodeId
}

// GetSalesTaxCodeIdOk returns a tuple with the SalesTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetSalesTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		return nil, false
	}
	return o.SalesTaxCodeId, true
}

// HasSalesTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasSalesTaxCodeId() bool {
	if o != nil && !IsNil(o.SalesTaxCodeId) {
		return true
	}

	return false
}

// SetSalesTaxCodeId gets a reference to the given string and assigns it to the SalesTaxCodeId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetSalesTaxCodeId(v string) {
	o.SalesTaxCodeId = &v
}

// GetDepositToAccountId returns the DepositToAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetDepositToAccountId() string {
	if o == nil || IsNil(o.DepositToAccountId) {
		var ret string
		return ret
	}
	return *o.DepositToAccountId
}

// GetDepositToAccountIdOk returns a tuple with the DepositToAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetDepositToAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.DepositToAccountId) {
		return nil, false
	}
	return o.DepositToAccountId, true
}

// HasDepositToAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasDepositToAccountId() bool {
	if o != nil && !IsNil(o.DepositToAccountId) {
		return true
	}

	return false
}

// SetDepositToAccountId gets a reference to the given string and assigns it to the DepositToAccountId field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetDepositToAccountId(v string) {
	o.DepositToAccountId = &v
}

// GetOtherCustomField returns the OtherCustomField field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetOtherCustomField() string {
	if o == nil || IsNil(o.OtherCustomField) {
		var ret string
		return ret
	}
	return *o.OtherCustomField
}

// GetOtherCustomFieldOk returns a tuple with the OtherCustomField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetOtherCustomFieldOk() (*string, bool) {
	if o == nil || IsNil(o.OtherCustomField) {
		return nil, false
	}
	return o.OtherCustomField, true
}

// HasOtherCustomField returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasOtherCustomField() bool {
	if o != nil && !IsNil(o.OtherCustomField) {
		return true
	}

	return false
}

// SetOtherCustomField gets a reference to the given string and assigns it to the OtherCustomField field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetOtherCustomField(v string) {
	o.OtherCustomField = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetExchangeRate() float32 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret float32
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetExchangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float32 and assigns it to the ExchangeRate field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetExchangeRate(v float32) {
	o.ExchangeRate = &v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetLines() []QuickbooksDesktopSalesReceiptsIdPostRequestLinesInner {
	if o == nil || IsNil(o.Lines) {
		var ret []QuickbooksDesktopSalesReceiptsIdPostRequestLinesInner
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetLinesOk() ([]QuickbooksDesktopSalesReceiptsIdPostRequestLinesInner, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []QuickbooksDesktopSalesReceiptsIdPostRequestLinesInner and assigns it to the Lines field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetLines(v []QuickbooksDesktopSalesReceiptsIdPostRequestLinesInner) {
	o.Lines = v
}

// GetLineGroups returns the LineGroups field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetLineGroups() []QuickbooksDesktopSalesReceiptsIdPostRequestLineGroupsInner {
	if o == nil || IsNil(o.LineGroups) {
		var ret []QuickbooksDesktopSalesReceiptsIdPostRequestLineGroupsInner
		return ret
	}
	return o.LineGroups
}

// GetLineGroupsOk returns a tuple with the LineGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) GetLineGroupsOk() ([]QuickbooksDesktopSalesReceiptsIdPostRequestLineGroupsInner, bool) {
	if o == nil || IsNil(o.LineGroups) {
		return nil, false
	}
	return o.LineGroups, true
}

// HasLineGroups returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) HasLineGroups() bool {
	if o != nil && !IsNil(o.LineGroups) {
		return true
	}

	return false
}

// SetLineGroups gets a reference to the given []QuickbooksDesktopSalesReceiptsIdPostRequestLineGroupsInner and assigns it to the LineGroups field.
func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) SetLineGroups(v []QuickbooksDesktopSalesReceiptsIdPostRequestLineGroupsInner) {
	o.LineGroups = v
}

func (o QuickbooksDesktopSalesReceiptsIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopSalesReceiptsIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.DocumentTemplateId) {
		toSerialize["documentTemplateId"] = o.DocumentTemplateId
	}
	if !IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if !IsNil(o.RefNumber) {
		toSerialize["refNumber"] = o.RefNumber
	}
	if !IsNil(o.BillingAddress) {
		toSerialize["billingAddress"] = o.BillingAddress
	}
	if !IsNil(o.ShippingAddress) {
		toSerialize["shippingAddress"] = o.ShippingAddress
	}
	if !IsNil(o.IsPending) {
		toSerialize["isPending"] = o.IsPending
	}
	if !IsNil(o.CheckNumber) {
		toSerialize["checkNumber"] = o.CheckNumber
	}
	if !IsNil(o.PaymentMethodId) {
		toSerialize["paymentMethodId"] = o.PaymentMethodId
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.SalesRepresentativeId) {
		toSerialize["salesRepresentativeId"] = o.SalesRepresentativeId
	}
	if !IsNil(o.ShippingDate) {
		toSerialize["shippingDate"] = o.ShippingDate
	}
	if !IsNil(o.ShippingMethodId) {
		toSerialize["shippingMethodId"] = o.ShippingMethodId
	}
	if !IsNil(o.ShipmentOrigin) {
		toSerialize["shipmentOrigin"] = o.ShipmentOrigin
	}
	if !IsNil(o.SalesTaxItemId) {
		toSerialize["salesTaxItemId"] = o.SalesTaxItemId
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.CustomerMessageId) {
		toSerialize["customerMessageId"] = o.CustomerMessageId
	}
	if !IsNil(o.IsQueuedForPrint) {
		toSerialize["isQueuedForPrint"] = o.IsQueuedForPrint
	}
	if !IsNil(o.IsQueuedForEmail) {
		toSerialize["isQueuedForEmail"] = o.IsQueuedForEmail
	}
	if !IsNil(o.SalesTaxCodeId) {
		toSerialize["salesTaxCodeId"] = o.SalesTaxCodeId
	}
	if !IsNil(o.DepositToAccountId) {
		toSerialize["depositToAccountId"] = o.DepositToAccountId
	}
	if !IsNil(o.OtherCustomField) {
		toSerialize["otherCustomField"] = o.OtherCustomField
	}
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}
	if !IsNil(o.LineGroups) {
		toSerialize["lineGroups"] = o.LineGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopSalesReceiptsIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopSalesReceiptsIdPostRequest := _QuickbooksDesktopSalesReceiptsIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopSalesReceiptsIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopSalesReceiptsIdPostRequest(varQuickbooksDesktopSalesReceiptsIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "customerId")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "documentTemplateId")
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "refNumber")
		delete(additionalProperties, "billingAddress")
		delete(additionalProperties, "shippingAddress")
		delete(additionalProperties, "isPending")
		delete(additionalProperties, "checkNumber")
		delete(additionalProperties, "paymentMethodId")
		delete(additionalProperties, "dueDate")
		delete(additionalProperties, "salesRepresentativeId")
		delete(additionalProperties, "shippingDate")
		delete(additionalProperties, "shippingMethodId")
		delete(additionalProperties, "shipmentOrigin")
		delete(additionalProperties, "salesTaxItemId")
		delete(additionalProperties, "memo")
		delete(additionalProperties, "customerMessageId")
		delete(additionalProperties, "isQueuedForPrint")
		delete(additionalProperties, "isQueuedForEmail")
		delete(additionalProperties, "salesTaxCodeId")
		delete(additionalProperties, "depositToAccountId")
		delete(additionalProperties, "otherCustomField")
		delete(additionalProperties, "exchangeRate")
		delete(additionalProperties, "lines")
		delete(additionalProperties, "lineGroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopSalesReceiptsIdPostRequest struct {
	value *QuickbooksDesktopSalesReceiptsIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopSalesReceiptsIdPostRequest) Get() *QuickbooksDesktopSalesReceiptsIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopSalesReceiptsIdPostRequest) Set(val *QuickbooksDesktopSalesReceiptsIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopSalesReceiptsIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopSalesReceiptsIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopSalesReceiptsIdPostRequest(val *QuickbooksDesktopSalesReceiptsIdPostRequest) *NullableQuickbooksDesktopSalesReceiptsIdPostRequest {
	return &NullableQuickbooksDesktopSalesReceiptsIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopSalesReceiptsIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopSalesReceiptsIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


