/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QbdPriceLevels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdPriceLevels{}

// QbdPriceLevels struct for QbdPriceLevels
type QbdPriceLevels struct {
	// Indicates whether this company file has price levels enabled. When `true`, price levels can be created and used to automatically calculate custom pricing for different customers.
	IsUsingPriceLevels bool `json:"isUsingPriceLevels"`
	// Indicates whether this company file is configured to round amounts up to the nearest whole dollar for fixed percentage price levels. This setting does not affect per-item price levels.
	IsRoundingSalesPriceUp NullableBool `json:"isRoundingSalesPriceUp"`
}

type _QbdPriceLevels QbdPriceLevels

// NewQbdPriceLevels instantiates a new QbdPriceLevels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdPriceLevels(isUsingPriceLevels bool, isRoundingSalesPriceUp NullableBool) *QbdPriceLevels {
	this := QbdPriceLevels{}
	this.IsUsingPriceLevels = isUsingPriceLevels
	this.IsRoundingSalesPriceUp = isRoundingSalesPriceUp
	return &this
}

// NewQbdPriceLevelsWithDefaults instantiates a new QbdPriceLevels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdPriceLevelsWithDefaults() *QbdPriceLevels {
	this := QbdPriceLevels{}
	return &this
}

// GetIsUsingPriceLevels returns the IsUsingPriceLevels field value
func (o *QbdPriceLevels) GetIsUsingPriceLevels() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUsingPriceLevels
}

// GetIsUsingPriceLevelsOk returns a tuple with the IsUsingPriceLevels field value
// and a boolean to check if the value has been set.
func (o *QbdPriceLevels) GetIsUsingPriceLevelsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUsingPriceLevels, true
}

// SetIsUsingPriceLevels sets field value
func (o *QbdPriceLevels) SetIsUsingPriceLevels(v bool) {
	o.IsUsingPriceLevels = v
}

// GetIsRoundingSalesPriceUp returns the IsRoundingSalesPriceUp field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *QbdPriceLevels) GetIsRoundingSalesPriceUp() bool {
	if o == nil || o.IsRoundingSalesPriceUp.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsRoundingSalesPriceUp.Get()
}

// GetIsRoundingSalesPriceUpOk returns a tuple with the IsRoundingSalesPriceUp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdPriceLevels) GetIsRoundingSalesPriceUpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsRoundingSalesPriceUp.Get(), o.IsRoundingSalesPriceUp.IsSet()
}

// SetIsRoundingSalesPriceUp sets field value
func (o *QbdPriceLevels) SetIsRoundingSalesPriceUp(v bool) {
	o.IsRoundingSalesPriceUp.Set(&v)
}

func (o QbdPriceLevels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdPriceLevels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isUsingPriceLevels"] = o.IsUsingPriceLevels
	toSerialize["isRoundingSalesPriceUp"] = o.IsRoundingSalesPriceUp.Get()
	return toSerialize, nil
}

func (o *QbdPriceLevels) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isUsingPriceLevels",
		"isRoundingSalesPriceUp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdPriceLevels := _QbdPriceLevels{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQbdPriceLevels)

	if err != nil {
		return err
	}

	*o = QbdPriceLevels(varQbdPriceLevels)

	return err
}

type NullableQbdPriceLevels struct {
	value *QbdPriceLevels
	isSet bool
}

func (v NullableQbdPriceLevels) Get() *QbdPriceLevels {
	return v.value
}

func (v *NullableQbdPriceLevels) Set(val *QbdPriceLevels) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdPriceLevels) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdPriceLevels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdPriceLevels(val *QbdPriceLevels) *NullableQbdPriceLevels {
	return &NullableQbdPriceLevels{value: val, isSet: true}
}

func (v NullableQbdPriceLevels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdPriceLevels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


