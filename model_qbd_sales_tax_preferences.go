/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdSalesTaxPreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdSalesTaxPreferences{}

// QbdSalesTaxPreferences struct for QbdSalesTaxPreferences
type QbdSalesTaxPreferences struct {
	DefaultItemSalesTax QbdSalesTaxPreferencesDefaultItemSalesTax `json:"defaultItemSalesTax"`
	// The frequency at which sales tax reports are generated for this company file.
	SalesTaxReportingFrequency string `json:"salesTaxReportingFrequency"`
	DefaultTaxableSalesTaxCode QbdSalesTaxPreferencesDefaultTaxableSalesTaxCode `json:"defaultTaxableSalesTaxCode"`
	DefaultNonTaxableSalesTaxCode QbdSalesTaxPreferencesDefaultNonTaxableSalesTaxCode `json:"defaultNonTaxableSalesTaxCode"`
	// Indicates whether this company file is configured to use tax codes for vendors.
	IsUsingVendorTaxCode bool `json:"isUsingVendorTaxCode"`
	// Indicates whether this company file is configured to use tax codes for customers.
	IsUsingCustomerTaxCode bool `json:"isUsingCustomerTaxCode"`
	// Indicates whether this company file is configured to allow tax-inclusive prices.
	IsUsingTaxInclusivePrices bool `json:"isUsingTaxInclusivePrices"`
	AdditionalProperties map[string]interface{}
}

type _QbdSalesTaxPreferences QbdSalesTaxPreferences

// NewQbdSalesTaxPreferences instantiates a new QbdSalesTaxPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdSalesTaxPreferences(defaultItemSalesTax QbdSalesTaxPreferencesDefaultItemSalesTax, salesTaxReportingFrequency string, defaultTaxableSalesTaxCode QbdSalesTaxPreferencesDefaultTaxableSalesTaxCode, defaultNonTaxableSalesTaxCode QbdSalesTaxPreferencesDefaultNonTaxableSalesTaxCode, isUsingVendorTaxCode bool, isUsingCustomerTaxCode bool, isUsingTaxInclusivePrices bool) *QbdSalesTaxPreferences {
	this := QbdSalesTaxPreferences{}
	this.DefaultItemSalesTax = defaultItemSalesTax
	this.SalesTaxReportingFrequency = salesTaxReportingFrequency
	this.DefaultTaxableSalesTaxCode = defaultTaxableSalesTaxCode
	this.DefaultNonTaxableSalesTaxCode = defaultNonTaxableSalesTaxCode
	this.IsUsingVendorTaxCode = isUsingVendorTaxCode
	this.IsUsingCustomerTaxCode = isUsingCustomerTaxCode
	this.IsUsingTaxInclusivePrices = isUsingTaxInclusivePrices
	return &this
}

// NewQbdSalesTaxPreferencesWithDefaults instantiates a new QbdSalesTaxPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdSalesTaxPreferencesWithDefaults() *QbdSalesTaxPreferences {
	this := QbdSalesTaxPreferences{}
	return &this
}

// GetDefaultItemSalesTax returns the DefaultItemSalesTax field value
func (o *QbdSalesTaxPreferences) GetDefaultItemSalesTax() QbdSalesTaxPreferencesDefaultItemSalesTax {
	if o == nil {
		var ret QbdSalesTaxPreferencesDefaultItemSalesTax
		return ret
	}

	return o.DefaultItemSalesTax
}

// GetDefaultItemSalesTaxOk returns a tuple with the DefaultItemSalesTax field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxPreferences) GetDefaultItemSalesTaxOk() (*QbdSalesTaxPreferencesDefaultItemSalesTax, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultItemSalesTax, true
}

// SetDefaultItemSalesTax sets field value
func (o *QbdSalesTaxPreferences) SetDefaultItemSalesTax(v QbdSalesTaxPreferencesDefaultItemSalesTax) {
	o.DefaultItemSalesTax = v
}

// GetSalesTaxReportingFrequency returns the SalesTaxReportingFrequency field value
func (o *QbdSalesTaxPreferences) GetSalesTaxReportingFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SalesTaxReportingFrequency
}

// GetSalesTaxReportingFrequencyOk returns a tuple with the SalesTaxReportingFrequency field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxPreferences) GetSalesTaxReportingFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesTaxReportingFrequency, true
}

// SetSalesTaxReportingFrequency sets field value
func (o *QbdSalesTaxPreferences) SetSalesTaxReportingFrequency(v string) {
	o.SalesTaxReportingFrequency = v
}

// GetDefaultTaxableSalesTaxCode returns the DefaultTaxableSalesTaxCode field value
func (o *QbdSalesTaxPreferences) GetDefaultTaxableSalesTaxCode() QbdSalesTaxPreferencesDefaultTaxableSalesTaxCode {
	if o == nil {
		var ret QbdSalesTaxPreferencesDefaultTaxableSalesTaxCode
		return ret
	}

	return o.DefaultTaxableSalesTaxCode
}

// GetDefaultTaxableSalesTaxCodeOk returns a tuple with the DefaultTaxableSalesTaxCode field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxPreferences) GetDefaultTaxableSalesTaxCodeOk() (*QbdSalesTaxPreferencesDefaultTaxableSalesTaxCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultTaxableSalesTaxCode, true
}

// SetDefaultTaxableSalesTaxCode sets field value
func (o *QbdSalesTaxPreferences) SetDefaultTaxableSalesTaxCode(v QbdSalesTaxPreferencesDefaultTaxableSalesTaxCode) {
	o.DefaultTaxableSalesTaxCode = v
}

// GetDefaultNonTaxableSalesTaxCode returns the DefaultNonTaxableSalesTaxCode field value
func (o *QbdSalesTaxPreferences) GetDefaultNonTaxableSalesTaxCode() QbdSalesTaxPreferencesDefaultNonTaxableSalesTaxCode {
	if o == nil {
		var ret QbdSalesTaxPreferencesDefaultNonTaxableSalesTaxCode
		return ret
	}

	return o.DefaultNonTaxableSalesTaxCode
}

// GetDefaultNonTaxableSalesTaxCodeOk returns a tuple with the DefaultNonTaxableSalesTaxCode field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxPreferences) GetDefaultNonTaxableSalesTaxCodeOk() (*QbdSalesTaxPreferencesDefaultNonTaxableSalesTaxCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultNonTaxableSalesTaxCode, true
}

// SetDefaultNonTaxableSalesTaxCode sets field value
func (o *QbdSalesTaxPreferences) SetDefaultNonTaxableSalesTaxCode(v QbdSalesTaxPreferencesDefaultNonTaxableSalesTaxCode) {
	o.DefaultNonTaxableSalesTaxCode = v
}

// GetIsUsingVendorTaxCode returns the IsUsingVendorTaxCode field value
func (o *QbdSalesTaxPreferences) GetIsUsingVendorTaxCode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUsingVendorTaxCode
}

// GetIsUsingVendorTaxCodeOk returns a tuple with the IsUsingVendorTaxCode field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxPreferences) GetIsUsingVendorTaxCodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUsingVendorTaxCode, true
}

// SetIsUsingVendorTaxCode sets field value
func (o *QbdSalesTaxPreferences) SetIsUsingVendorTaxCode(v bool) {
	o.IsUsingVendorTaxCode = v
}

// GetIsUsingCustomerTaxCode returns the IsUsingCustomerTaxCode field value
func (o *QbdSalesTaxPreferences) GetIsUsingCustomerTaxCode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUsingCustomerTaxCode
}

// GetIsUsingCustomerTaxCodeOk returns a tuple with the IsUsingCustomerTaxCode field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxPreferences) GetIsUsingCustomerTaxCodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUsingCustomerTaxCode, true
}

// SetIsUsingCustomerTaxCode sets field value
func (o *QbdSalesTaxPreferences) SetIsUsingCustomerTaxCode(v bool) {
	o.IsUsingCustomerTaxCode = v
}

// GetIsUsingTaxInclusivePrices returns the IsUsingTaxInclusivePrices field value
func (o *QbdSalesTaxPreferences) GetIsUsingTaxInclusivePrices() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUsingTaxInclusivePrices
}

// GetIsUsingTaxInclusivePricesOk returns a tuple with the IsUsingTaxInclusivePrices field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxPreferences) GetIsUsingTaxInclusivePricesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsUsingTaxInclusivePrices, true
}

// SetIsUsingTaxInclusivePrices sets field value
func (o *QbdSalesTaxPreferences) SetIsUsingTaxInclusivePrices(v bool) {
	o.IsUsingTaxInclusivePrices = v
}

func (o QbdSalesTaxPreferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdSalesTaxPreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["defaultItemSalesTax"] = o.DefaultItemSalesTax
	toSerialize["salesTaxReportingFrequency"] = o.SalesTaxReportingFrequency
	toSerialize["defaultTaxableSalesTaxCode"] = o.DefaultTaxableSalesTaxCode
	toSerialize["defaultNonTaxableSalesTaxCode"] = o.DefaultNonTaxableSalesTaxCode
	toSerialize["isUsingVendorTaxCode"] = o.IsUsingVendorTaxCode
	toSerialize["isUsingCustomerTaxCode"] = o.IsUsingCustomerTaxCode
	toSerialize["isUsingTaxInclusivePrices"] = o.IsUsingTaxInclusivePrices

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdSalesTaxPreferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaultItemSalesTax",
		"salesTaxReportingFrequency",
		"defaultTaxableSalesTaxCode",
		"defaultNonTaxableSalesTaxCode",
		"isUsingVendorTaxCode",
		"isUsingCustomerTaxCode",
		"isUsingTaxInclusivePrices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdSalesTaxPreferences := _QbdSalesTaxPreferences{}

	err = json.Unmarshal(data, &varQbdSalesTaxPreferences)

	if err != nil {
		return err
	}

	*o = QbdSalesTaxPreferences(varQbdSalesTaxPreferences)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "defaultItemSalesTax")
		delete(additionalProperties, "salesTaxReportingFrequency")
		delete(additionalProperties, "defaultTaxableSalesTaxCode")
		delete(additionalProperties, "defaultNonTaxableSalesTaxCode")
		delete(additionalProperties, "isUsingVendorTaxCode")
		delete(additionalProperties, "isUsingCustomerTaxCode")
		delete(additionalProperties, "isUsingTaxInclusivePrices")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdSalesTaxPreferences struct {
	value *QbdSalesTaxPreferences
	isSet bool
}

func (v NullableQbdSalesTaxPreferences) Get() *QbdSalesTaxPreferences {
	return v.value
}

func (v *NullableQbdSalesTaxPreferences) Set(val *QbdSalesTaxPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdSalesTaxPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdSalesTaxPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdSalesTaxPreferences(val *QbdSalesTaxPreferences) *NullableQbdSalesTaxPreferences {
	return &NullableQbdSalesTaxPreferences{value: val, isSet: true}
}

func (v NullableQbdSalesTaxPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdSalesTaxPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


