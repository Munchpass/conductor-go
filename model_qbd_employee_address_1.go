/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QbdEmployeeAddress1 - The employee's address.  If the company uses QuickBooks Payroll for this employee, this address must specify a complete address, including city, state, ZIP (or postal) code, and at least one line of the street address.
type QbdEmployeeAddress1 struct {
	QbdEmployeeAddress *QbdEmployeeAddress
}

// QbdEmployeeAddressAsQbdEmployeeAddress1 is a convenience function that returns QbdEmployeeAddress wrapped in QbdEmployeeAddress1
func QbdEmployeeAddressAsQbdEmployeeAddress1(v *QbdEmployeeAddress) QbdEmployeeAddress1 {
	return QbdEmployeeAddress1{
		QbdEmployeeAddress: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QbdEmployeeAddress1) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into QbdEmployeeAddress
	err = newStrictDecoder(data).Decode(&dst.QbdEmployeeAddress)
	if err == nil {
		jsonQbdEmployeeAddress, _ := json.Marshal(dst.QbdEmployeeAddress)
		if string(jsonQbdEmployeeAddress) == "{}" { // empty struct
			dst.QbdEmployeeAddress = nil
		} else {
			if err = validator.Validate(dst.QbdEmployeeAddress); err != nil {
				dst.QbdEmployeeAddress = nil
			} else {
				match++
			}
		}
	} else {
		dst.QbdEmployeeAddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QbdEmployeeAddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QbdEmployeeAddress1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QbdEmployeeAddress1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QbdEmployeeAddress1) MarshalJSON() ([]byte, error) {
	if src.QbdEmployeeAddress != nil {
		return json.Marshal(&src.QbdEmployeeAddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QbdEmployeeAddress1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QbdEmployeeAddress != nil {
		return obj.QbdEmployeeAddress
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QbdEmployeeAddress1) GetActualInstanceValue() (interface{}) {
	if obj.QbdEmployeeAddress != nil {
		return *obj.QbdEmployeeAddress
	}

	// all schemas are nil
	return nil
}

type NullableQbdEmployeeAddress1 struct {
	value *QbdEmployeeAddress1
	isSet bool
}

func (v NullableQbdEmployeeAddress1) Get() *QbdEmployeeAddress1 {
	return v.value
}

func (v *NullableQbdEmployeeAddress1) Set(val *QbdEmployeeAddress1) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdEmployeeAddress1) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdEmployeeAddress1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdEmployeeAddress1(val *QbdEmployeeAddress1) *NullableQbdEmployeeAddress1 {
	return &NullableQbdEmployeeAddress1{value: val, isSet: true}
}

func (v NullableQbdEmployeeAddress1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdEmployeeAddress1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


