/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopJournalEntriesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopJournalEntriesPostRequest{}

// QuickbooksDesktopJournalEntriesPostRequest struct for QuickbooksDesktopJournalEntriesPostRequest
type QuickbooksDesktopJournalEntriesPostRequest struct {
	// The date of this journal entry, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate string `json:"transactionDate"`
	// The case-sensitive user-defined reference number for this journal entry, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user. When left blank in this create request, this field will be left blank in QuickBooks (i.e., it does *not* auto-increment).
	RefNumber *string `json:"refNumber,omitempty"`
	// Indicates whether this journal entry is an adjustment entry. When `true`, QuickBooks retains the original entry information to maintain an audit trail of the adjustments.
	IsAdjustment *bool `json:"isAdjustment,omitempty"`
	// Indicates whether this journal entry is an adjustment made in the company's home currency for a transaction that was originally recorded in a foreign currency.
	IsHomeCurrencyAdjustment *bool `json:"isHomeCurrencyAdjustment,omitempty"`
	// Indicates whether the amounts in this journal entry were entered in the company's home currency rather than a foreign currency. When `true`, amounts are in the home currency regardless of the `currency` field.
	AreAmountsEnteredInHomeCurrency *bool `json:"areAmountsEnteredInHomeCurrency,omitempty"`
	// The journal entry's currency. For built-in currencies, the name and code are standard international values. For user-defined currencies, all values are editable.
	CurrencyId *string `json:"currencyId,omitempty"`
	// The market exchange rate between this journal entry's currency and the home currency in QuickBooks at the time of this transaction. Represented as a decimal value (e.g., 1.2345 for 1 EUR = 1.2345 USD if USD is the home currency).
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`
	// A globally unique identifier (GUID) you, the developer, can provide for tracking this object in your external system. This field is immutable and can only be set during object creation.  **IMPORTANT**: This field must be formatted as a valid GUID; otherwise, QuickBooks will return an error.
	ExternalId *string `json:"externalId,omitempty"`
	// The journal entry's debit lines.
	DebitLines []QuickbooksDesktopJournalEntriesPostRequestDebitLinesInner `json:"debitLines,omitempty"`
	// The journal entry's credit lines.
	CreditLines []QuickbooksDesktopJournalEntriesPostRequestCreditLinesInner `json:"creditLines,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopJournalEntriesPostRequest QuickbooksDesktopJournalEntriesPostRequest

// NewQuickbooksDesktopJournalEntriesPostRequest instantiates a new QuickbooksDesktopJournalEntriesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopJournalEntriesPostRequest(transactionDate string) *QuickbooksDesktopJournalEntriesPostRequest {
	this := QuickbooksDesktopJournalEntriesPostRequest{}
	this.TransactionDate = transactionDate
	return &this
}

// NewQuickbooksDesktopJournalEntriesPostRequestWithDefaults instantiates a new QuickbooksDesktopJournalEntriesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopJournalEntriesPostRequestWithDefaults() *QuickbooksDesktopJournalEntriesPostRequest {
	this := QuickbooksDesktopJournalEntriesPostRequest{}
	return &this
}

// GetTransactionDate returns the TransactionDate field value
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetTransactionDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionDate, true
}

// SetTransactionDate sets field value
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetTransactionDate(v string) {
	o.TransactionDate = v
}

// GetRefNumber returns the RefNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetRefNumber() string {
	if o == nil || IsNil(o.RefNumber) {
		var ret string
		return ret
	}
	return *o.RefNumber
}

// GetRefNumberOk returns a tuple with the RefNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetRefNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RefNumber) {
		return nil, false
	}
	return o.RefNumber, true
}

// HasRefNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasRefNumber() bool {
	if o != nil && !IsNil(o.RefNumber) {
		return true
	}

	return false
}

// SetRefNumber gets a reference to the given string and assigns it to the RefNumber field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetRefNumber(v string) {
	o.RefNumber = &v
}

// GetIsAdjustment returns the IsAdjustment field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetIsAdjustment() bool {
	if o == nil || IsNil(o.IsAdjustment) {
		var ret bool
		return ret
	}
	return *o.IsAdjustment
}

// GetIsAdjustmentOk returns a tuple with the IsAdjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetIsAdjustmentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdjustment) {
		return nil, false
	}
	return o.IsAdjustment, true
}

// HasIsAdjustment returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasIsAdjustment() bool {
	if o != nil && !IsNil(o.IsAdjustment) {
		return true
	}

	return false
}

// SetIsAdjustment gets a reference to the given bool and assigns it to the IsAdjustment field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetIsAdjustment(v bool) {
	o.IsAdjustment = &v
}

// GetIsHomeCurrencyAdjustment returns the IsHomeCurrencyAdjustment field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetIsHomeCurrencyAdjustment() bool {
	if o == nil || IsNil(o.IsHomeCurrencyAdjustment) {
		var ret bool
		return ret
	}
	return *o.IsHomeCurrencyAdjustment
}

// GetIsHomeCurrencyAdjustmentOk returns a tuple with the IsHomeCurrencyAdjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetIsHomeCurrencyAdjustmentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHomeCurrencyAdjustment) {
		return nil, false
	}
	return o.IsHomeCurrencyAdjustment, true
}

// HasIsHomeCurrencyAdjustment returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasIsHomeCurrencyAdjustment() bool {
	if o != nil && !IsNil(o.IsHomeCurrencyAdjustment) {
		return true
	}

	return false
}

// SetIsHomeCurrencyAdjustment gets a reference to the given bool and assigns it to the IsHomeCurrencyAdjustment field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetIsHomeCurrencyAdjustment(v bool) {
	o.IsHomeCurrencyAdjustment = &v
}

// GetAreAmountsEnteredInHomeCurrency returns the AreAmountsEnteredInHomeCurrency field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetAreAmountsEnteredInHomeCurrency() bool {
	if o == nil || IsNil(o.AreAmountsEnteredInHomeCurrency) {
		var ret bool
		return ret
	}
	return *o.AreAmountsEnteredInHomeCurrency
}

// GetAreAmountsEnteredInHomeCurrencyOk returns a tuple with the AreAmountsEnteredInHomeCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetAreAmountsEnteredInHomeCurrencyOk() (*bool, bool) {
	if o == nil || IsNil(o.AreAmountsEnteredInHomeCurrency) {
		return nil, false
	}
	return o.AreAmountsEnteredInHomeCurrency, true
}

// HasAreAmountsEnteredInHomeCurrency returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasAreAmountsEnteredInHomeCurrency() bool {
	if o != nil && !IsNil(o.AreAmountsEnteredInHomeCurrency) {
		return true
	}

	return false
}

// SetAreAmountsEnteredInHomeCurrency gets a reference to the given bool and assigns it to the AreAmountsEnteredInHomeCurrency field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetAreAmountsEnteredInHomeCurrency(v bool) {
	o.AreAmountsEnteredInHomeCurrency = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId) {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetCurrencyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetExchangeRate() float32 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret float32
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetExchangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float32 and assigns it to the ExchangeRate field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetExchangeRate(v float32) {
	o.ExchangeRate = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetDebitLines returns the DebitLines field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetDebitLines() []QuickbooksDesktopJournalEntriesPostRequestDebitLinesInner {
	if o == nil || IsNil(o.DebitLines) {
		var ret []QuickbooksDesktopJournalEntriesPostRequestDebitLinesInner
		return ret
	}
	return o.DebitLines
}

// GetDebitLinesOk returns a tuple with the DebitLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetDebitLinesOk() ([]QuickbooksDesktopJournalEntriesPostRequestDebitLinesInner, bool) {
	if o == nil || IsNil(o.DebitLines) {
		return nil, false
	}
	return o.DebitLines, true
}

// HasDebitLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasDebitLines() bool {
	if o != nil && !IsNil(o.DebitLines) {
		return true
	}

	return false
}

// SetDebitLines gets a reference to the given []QuickbooksDesktopJournalEntriesPostRequestDebitLinesInner and assigns it to the DebitLines field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetDebitLines(v []QuickbooksDesktopJournalEntriesPostRequestDebitLinesInner) {
	o.DebitLines = v
}

// GetCreditLines returns the CreditLines field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetCreditLines() []QuickbooksDesktopJournalEntriesPostRequestCreditLinesInner {
	if o == nil || IsNil(o.CreditLines) {
		var ret []QuickbooksDesktopJournalEntriesPostRequestCreditLinesInner
		return ret
	}
	return o.CreditLines
}

// GetCreditLinesOk returns a tuple with the CreditLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) GetCreditLinesOk() ([]QuickbooksDesktopJournalEntriesPostRequestCreditLinesInner, bool) {
	if o == nil || IsNil(o.CreditLines) {
		return nil, false
	}
	return o.CreditLines, true
}

// HasCreditLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesPostRequest) HasCreditLines() bool {
	if o != nil && !IsNil(o.CreditLines) {
		return true
	}

	return false
}

// SetCreditLines gets a reference to the given []QuickbooksDesktopJournalEntriesPostRequestCreditLinesInner and assigns it to the CreditLines field.
func (o *QuickbooksDesktopJournalEntriesPostRequest) SetCreditLines(v []QuickbooksDesktopJournalEntriesPostRequestCreditLinesInner) {
	o.CreditLines = v
}

func (o QuickbooksDesktopJournalEntriesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopJournalEntriesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactionDate"] = o.TransactionDate
	if !IsNil(o.RefNumber) {
		toSerialize["refNumber"] = o.RefNumber
	}
	if !IsNil(o.IsAdjustment) {
		toSerialize["isAdjustment"] = o.IsAdjustment
	}
	if !IsNil(o.IsHomeCurrencyAdjustment) {
		toSerialize["isHomeCurrencyAdjustment"] = o.IsHomeCurrencyAdjustment
	}
	if !IsNil(o.AreAmountsEnteredInHomeCurrency) {
		toSerialize["areAmountsEnteredInHomeCurrency"] = o.AreAmountsEnteredInHomeCurrency
	}
	if !IsNil(o.CurrencyId) {
		toSerialize["currencyId"] = o.CurrencyId
	}
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.DebitLines) {
		toSerialize["debitLines"] = o.DebitLines
	}
	if !IsNil(o.CreditLines) {
		toSerialize["creditLines"] = o.CreditLines
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopJournalEntriesPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transactionDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopJournalEntriesPostRequest := _QuickbooksDesktopJournalEntriesPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopJournalEntriesPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopJournalEntriesPostRequest(varQuickbooksDesktopJournalEntriesPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "refNumber")
		delete(additionalProperties, "isAdjustment")
		delete(additionalProperties, "isHomeCurrencyAdjustment")
		delete(additionalProperties, "areAmountsEnteredInHomeCurrency")
		delete(additionalProperties, "currencyId")
		delete(additionalProperties, "exchangeRate")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "debitLines")
		delete(additionalProperties, "creditLines")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopJournalEntriesPostRequest struct {
	value *QuickbooksDesktopJournalEntriesPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopJournalEntriesPostRequest) Get() *QuickbooksDesktopJournalEntriesPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopJournalEntriesPostRequest) Set(val *QuickbooksDesktopJournalEntriesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopJournalEntriesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopJournalEntriesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopJournalEntriesPostRequest(val *QuickbooksDesktopJournalEntriesPostRequest) *NullableQuickbooksDesktopJournalEntriesPostRequest {
	return &NullableQuickbooksDesktopJournalEntriesPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopJournalEntriesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopJournalEntriesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


