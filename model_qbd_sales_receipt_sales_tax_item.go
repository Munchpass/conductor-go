/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QbdSalesReceiptSalesTaxItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdSalesReceiptSalesTaxItem{}

// QbdSalesReceiptSalesTaxItem The sales-tax item used to calculate the actual tax amount for this sales receipt's transactions by applying a specific tax rate collected for a single tax agency. Unlike `salesTaxCode`, which only indicates general taxability, this field drives the actual tax calculation and reporting.  For sales receipts, while using this field to specify a single tax item/group that applies uniformly is recommended, complex tax scenarios may require alternative approaches. In such cases, you can set this field to a 0% tax item (conventionally named \"Tax Calculated On Invoice\") and handle tax calculations through line items instead. When using line items for taxes, note that only individual tax items (not tax groups) can be used, subtotals can help apply a tax to multiple items but only the first tax line after a subtotal is calculated automatically (subsequent tax lines require manual amounts), and the rate column will always display the actual tax amount rather than the rate percentage.
type QbdSalesReceiptSalesTaxItem struct {
	// The unique identifier assigned by QuickBooks to this object. This ID is unique across all objects of the same type, but not across different QuickBooks object types.
	Id string `json:"id"`
	// The fully-qualified unique name for this object, formed by combining the names of its parent objects with its own `name`, separated by colons. Not case-sensitive.
	FullName string `json:"fullName"`
}

type _QbdSalesReceiptSalesTaxItem QbdSalesReceiptSalesTaxItem

// NewQbdSalesReceiptSalesTaxItem instantiates a new QbdSalesReceiptSalesTaxItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdSalesReceiptSalesTaxItem(id string, fullName string) *QbdSalesReceiptSalesTaxItem {
	this := QbdSalesReceiptSalesTaxItem{}
	this.Id = id
	this.FullName = fullName
	return &this
}

// NewQbdSalesReceiptSalesTaxItemWithDefaults instantiates a new QbdSalesReceiptSalesTaxItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdSalesReceiptSalesTaxItemWithDefaults() *QbdSalesReceiptSalesTaxItem {
	this := QbdSalesReceiptSalesTaxItem{}
	return &this
}

// GetId returns the Id field value
func (o *QbdSalesReceiptSalesTaxItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptSalesTaxItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QbdSalesReceiptSalesTaxItem) SetId(v string) {
	o.Id = v
}

// GetFullName returns the FullName field value
func (o *QbdSalesReceiptSalesTaxItem) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptSalesTaxItem) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *QbdSalesReceiptSalesTaxItem) SetFullName(v string) {
	o.FullName = v
}

func (o QbdSalesReceiptSalesTaxItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdSalesReceiptSalesTaxItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["fullName"] = o.FullName
	return toSerialize, nil
}

func (o *QbdSalesReceiptSalesTaxItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"fullName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdSalesReceiptSalesTaxItem := _QbdSalesReceiptSalesTaxItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQbdSalesReceiptSalesTaxItem)

	if err != nil {
		return err
	}

	*o = QbdSalesReceiptSalesTaxItem(varQbdSalesReceiptSalesTaxItem)

	return err
}

type NullableQbdSalesReceiptSalesTaxItem struct {
	value *QbdSalesReceiptSalesTaxItem
	isSet bool
}

func (v NullableQbdSalesReceiptSalesTaxItem) Get() *QbdSalesReceiptSalesTaxItem {
	return v.value
}

func (v *NullableQbdSalesReceiptSalesTaxItem) Set(val *QbdSalesReceiptSalesTaxItem) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdSalesReceiptSalesTaxItem) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdSalesReceiptSalesTaxItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdSalesReceiptSalesTaxItem(val *QbdSalesReceiptSalesTaxItem) *NullableQbdSalesReceiptSalesTaxItem {
	return &NullableQbdSalesReceiptSalesTaxItem{value: val, isSet: true}
}

func (v NullableQbdSalesReceiptSalesTaxItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdSalesReceiptSalesTaxItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


