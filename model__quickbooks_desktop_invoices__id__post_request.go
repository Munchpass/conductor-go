/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopInvoicesIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopInvoicesIdPostRequest{}

// QuickbooksDesktopInvoicesIdPostRequest struct for QuickbooksDesktopInvoicesIdPostRequest
type QuickbooksDesktopInvoicesIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the invoice object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The customer or customer-job associated with this invoice.
	CustomerId *string `json:"customerId,omitempty"`
	// The invoice's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default. A class defined here is automatically used in this invoice's line items unless overridden at the line item level.
	ClassId *string `json:"classId,omitempty"`
	// The Accounts-Receivable (A/R) account to which this invoice is assigned, used to track the amount owed. If not specified, QuickBooks Desktop will use its default A/R account.  **IMPORTANT**: If this invoice is linked to other transactions, this A/R account must match the `receivablesAccount` used in all linked transactions. For example, when refunding a credit card payment, the A/R account must match the one used in the original credit transactions being refunded.
	ReceivablesAccountId *string `json:"receivablesAccountId,omitempty"`
	// The predefined template in QuickBooks that determines the layout and formatting for this invoice when printed or displayed.
	DocumentTemplateId *string `json:"documentTemplateId,omitempty"`
	// The date of this invoice, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate *string `json:"transactionDate,omitempty"`
	// The case-sensitive user-defined reference number for this invoice, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user.
	RefNumber *string `json:"refNumber,omitempty"`
	BillingAddress *QuickbooksDesktopInvoicesPostRequestBillingAddress `json:"billingAddress,omitempty"`
	ShippingAddress *QuickbooksDesktopInvoicesPostRequestShippingAddress `json:"shippingAddress,omitempty"`
	// Indicates whether this invoice has not been completed or is in a draft version.
	IsPending *bool `json:"isPending,omitempty"`
	// The customer's Purchase Order (PO) number associated with this invoice. This field is often used to cross-reference the invoice with the customer's purchasing system.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
	// The invoice's payment terms, defining when payment is due and any applicable discounts.
	TermsId *string `json:"termsId,omitempty"`
	// The date by which this invoice must be paid, in ISO 8601 format (YYYY-MM-DD).
	DueDate *string `json:"dueDate,omitempty"`
	// The invoice's sales representative. Sales representatives can be employees, vendors, or other names in QuickBooks.
	SalesRepresentativeId *string `json:"salesRepresentativeId,omitempty"`
	// The origin location from where the product associated with this invoice is shipped. This is the point at which ownership and liability for goods transfer from seller to buyer. Internally, QuickBooks uses the term \"FOB\" for this field, which stands for \"freight on board\". This field is informational and has no accounting implications.
	ShipmentOrigin *string `json:"shipmentOrigin,omitempty"`
	// The date when the products or services for this invoice were shipped or are expected to be shipped, in ISO 8601 format (YYYY-MM-DD).
	ShippingDate *string `json:"shippingDate,omitempty"`
	// The shipping method used for this invoice, such as standard mail or overnight delivery.
	ShippingMethodId *string `json:"shippingMethodId,omitempty"`
	// The sales-tax item used to calculate the actual tax amount for this invoice's transactions by applying a specific tax rate collected for a single tax agency. Unlike `salesTaxCode`, which only indicates general taxability, this field drives the actual tax calculation and reporting.  For invoices, while using this field to specify a single tax item/group that applies uniformly is recommended, complex tax scenarios may require alternative approaches. In such cases, you can set this field to a 0% tax item (conventionally named \"Tax Calculated On Invoice\") and handle tax calculations through line items instead. When using line items for taxes, note that only individual tax items (not tax groups) can be used, subtotals can help apply a tax to multiple items but only the first tax line after a subtotal is calculated automatically (subsequent tax lines require manual amounts), and the rate column will always display the actual tax amount rather than the rate percentage.
	SalesTaxItemId *string `json:"salesTaxItemId,omitempty"`
	// A memo or note for this invoice that appears in reports, but not on the invoice. Use `customerMessage` to add a note to this invoice.
	Memo *string `json:"memo,omitempty"`
	// The message to display to the customer on the invoice.
	CustomerMessageId *string `json:"customerMessageId,omitempty"`
	// Indicates whether this invoice is included in the queue of documents for QuickBooks to print.
	IsQueuedForPrint *bool `json:"isQueuedForPrint,omitempty"`
	// Indicates whether this invoice is included in the queue of documents for QuickBooks to email to the customer.
	IsQueuedForEmail *bool `json:"isQueuedForEmail,omitempty"`
	// The sales-tax code for this invoice, determining whether it is taxable or non-taxable. This can be overridden at the transaction-line level.  Default codes include \"Non\" (non-taxable) and \"Tax\" (taxable), but custom codes can also be created in QuickBooks. If QuickBooks is not set up to charge sales tax (via the \"Do You Charge Sales Tax?\" preference), it will assign the default non-taxable code to all sales.
	SalesTaxCodeId *string `json:"salesTaxCodeId,omitempty"`
	// A built-in custom field for additional information specific to this invoice. Unlike the user-defined fields in the `customFields` array, this is a standard QuickBooks field that exists for all invoices for convenience. Developers often use this field for tracking information that doesn't fit into other standard QuickBooks fields. Unlike `otherCustomField1` and `otherCustomField2`, which are line item fields, this exists at the transaction level. Hidden by default in the QuickBooks UI.
	OtherCustomField *string `json:"otherCustomField,omitempty"`
	// The market exchange rate between this invoice's currency and the home currency in QuickBooks at the time of this transaction. Represented as a decimal value (e.g., 1.2345 for 1 EUR = 1.2345 USD if USD is the home currency).
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`
	// Credit memos to apply to this invoice, reducing its balance. This creates a link between this invoice and the specified credit memos.  **IMPORTANT**: By default, QuickBooks will not return any information about the linked transactions in this endpoint's response even when this request is successful. To see the transactions linked via this field, refetch the invoice and check the `linkedTransactions` response field. If fetching a list of invoices, you must also specify the parameter `includeLinkedTransactions=true` to see the `linkedTransactions` response field.
	ApplyCredits []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInnerApplyCreditsInner `json:"applyCredits,omitempty"`
	// The invoice's line items, each representing a single product or service sold.  **IMPORTANT**:  1. Including this array in your update request will **REPLACE** all existing line items for the invoice with this array. To keep any existing line items, you must include them in this array even if they have not changed. **Any line items not included will be removed.**  2. To add a new line item, include it here with the `id` field set to `-1`.  3. If you do not wish to modify any line items, omit this field entirely to keep them unchanged.
	Lines []QuickbooksDesktopInvoicesIdPostRequestLinesInner `json:"lines,omitempty"`
	// The invoice's line item groups, each representing a predefined set of related items.  **IMPORTANT**:  1. Including this array in your update request will **REPLACE** all existing line item groups for the invoice with this array. To keep any existing line item groups, you must include them in this array even if they have not changed. **Any line item groups not included will be removed.**  2. To add a new line item group, include it here with the `id` field set to `-1`.  3. If you do not wish to modify any line item groups, omit this field entirely to keep them unchanged.
	LineGroups []QuickbooksDesktopInvoicesIdPostRequestLineGroupsInner `json:"lineGroups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopInvoicesIdPostRequest QuickbooksDesktopInvoicesIdPostRequest

// NewQuickbooksDesktopInvoicesIdPostRequest instantiates a new QuickbooksDesktopInvoicesIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopInvoicesIdPostRequest(revisionNumber string) *QuickbooksDesktopInvoicesIdPostRequest {
	this := QuickbooksDesktopInvoicesIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopInvoicesIdPostRequestWithDefaults instantiates a new QuickbooksDesktopInvoicesIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopInvoicesIdPostRequestWithDefaults() *QuickbooksDesktopInvoicesIdPostRequest {
	this := QuickbooksDesktopInvoicesIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetClassId(v string) {
	o.ClassId = &v
}

// GetReceivablesAccountId returns the ReceivablesAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetReceivablesAccountId() string {
	if o == nil || IsNil(o.ReceivablesAccountId) {
		var ret string
		return ret
	}
	return *o.ReceivablesAccountId
}

// GetReceivablesAccountIdOk returns a tuple with the ReceivablesAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetReceivablesAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivablesAccountId) {
		return nil, false
	}
	return o.ReceivablesAccountId, true
}

// HasReceivablesAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasReceivablesAccountId() bool {
	if o != nil && !IsNil(o.ReceivablesAccountId) {
		return true
	}

	return false
}

// SetReceivablesAccountId gets a reference to the given string and assigns it to the ReceivablesAccountId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetReceivablesAccountId(v string) {
	o.ReceivablesAccountId = &v
}

// GetDocumentTemplateId returns the DocumentTemplateId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetDocumentTemplateId() string {
	if o == nil || IsNil(o.DocumentTemplateId) {
		var ret string
		return ret
	}
	return *o.DocumentTemplateId
}

// GetDocumentTemplateIdOk returns a tuple with the DocumentTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetDocumentTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentTemplateId) {
		return nil, false
	}
	return o.DocumentTemplateId, true
}

// HasDocumentTemplateId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasDocumentTemplateId() bool {
	if o != nil && !IsNil(o.DocumentTemplateId) {
		return true
	}

	return false
}

// SetDocumentTemplateId gets a reference to the given string and assigns it to the DocumentTemplateId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetDocumentTemplateId(v string) {
	o.DocumentTemplateId = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetRefNumber returns the RefNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetRefNumber() string {
	if o == nil || IsNil(o.RefNumber) {
		var ret string
		return ret
	}
	return *o.RefNumber
}

// GetRefNumberOk returns a tuple with the RefNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetRefNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RefNumber) {
		return nil, false
	}
	return o.RefNumber, true
}

// HasRefNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasRefNumber() bool {
	if o != nil && !IsNil(o.RefNumber) {
		return true
	}

	return false
}

// SetRefNumber gets a reference to the given string and assigns it to the RefNumber field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetRefNumber(v string) {
	o.RefNumber = &v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetBillingAddress() QuickbooksDesktopInvoicesPostRequestBillingAddress {
	if o == nil || IsNil(o.BillingAddress) {
		var ret QuickbooksDesktopInvoicesPostRequestBillingAddress
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetBillingAddressOk() (*QuickbooksDesktopInvoicesPostRequestBillingAddress, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given QuickbooksDesktopInvoicesPostRequestBillingAddress and assigns it to the BillingAddress field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetBillingAddress(v QuickbooksDesktopInvoicesPostRequestBillingAddress) {
	o.BillingAddress = &v
}

// GetShippingAddress returns the ShippingAddress field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetShippingAddress() QuickbooksDesktopInvoicesPostRequestShippingAddress {
	if o == nil || IsNil(o.ShippingAddress) {
		var ret QuickbooksDesktopInvoicesPostRequestShippingAddress
		return ret
	}
	return *o.ShippingAddress
}

// GetShippingAddressOk returns a tuple with the ShippingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetShippingAddressOk() (*QuickbooksDesktopInvoicesPostRequestShippingAddress, bool) {
	if o == nil || IsNil(o.ShippingAddress) {
		return nil, false
	}
	return o.ShippingAddress, true
}

// HasShippingAddress returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasShippingAddress() bool {
	if o != nil && !IsNil(o.ShippingAddress) {
		return true
	}

	return false
}

// SetShippingAddress gets a reference to the given QuickbooksDesktopInvoicesPostRequestShippingAddress and assigns it to the ShippingAddress field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetShippingAddress(v QuickbooksDesktopInvoicesPostRequestShippingAddress) {
	o.ShippingAddress = &v
}

// GetIsPending returns the IsPending field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetIsPending() bool {
	if o == nil || IsNil(o.IsPending) {
		var ret bool
		return ret
	}
	return *o.IsPending
}

// GetIsPendingOk returns a tuple with the IsPending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetIsPendingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPending) {
		return nil, false
	}
	return o.IsPending, true
}

// HasIsPending returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasIsPending() bool {
	if o != nil && !IsNil(o.IsPending) {
		return true
	}

	return false
}

// SetIsPending gets a reference to the given bool and assigns it to the IsPending field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetIsPending(v bool) {
	o.IsPending = &v
}

// GetPurchaseOrderNumber returns the PurchaseOrderNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetPurchaseOrderNumber() string {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNumber
}

// GetPurchaseOrderNumberOk returns a tuple with the PurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetPurchaseOrderNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseOrderNumber) {
		return nil, false
	}
	return o.PurchaseOrderNumber, true
}

// HasPurchaseOrderNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasPurchaseOrderNumber() bool {
	if o != nil && !IsNil(o.PurchaseOrderNumber) {
		return true
	}

	return false
}

// SetPurchaseOrderNumber gets a reference to the given string and assigns it to the PurchaseOrderNumber field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetPurchaseOrderNumber(v string) {
	o.PurchaseOrderNumber = &v
}

// GetTermsId returns the TermsId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetTermsId() string {
	if o == nil || IsNil(o.TermsId) {
		var ret string
		return ret
	}
	return *o.TermsId
}

// GetTermsIdOk returns a tuple with the TermsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetTermsIdOk() (*string, bool) {
	if o == nil || IsNil(o.TermsId) {
		return nil, false
	}
	return o.TermsId, true
}

// HasTermsId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasTermsId() bool {
	if o != nil && !IsNil(o.TermsId) {
		return true
	}

	return false
}

// SetTermsId gets a reference to the given string and assigns it to the TermsId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetTermsId(v string) {
	o.TermsId = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetDueDate(v string) {
	o.DueDate = &v
}

// GetSalesRepresentativeId returns the SalesRepresentativeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetSalesRepresentativeId() string {
	if o == nil || IsNil(o.SalesRepresentativeId) {
		var ret string
		return ret
	}
	return *o.SalesRepresentativeId
}

// GetSalesRepresentativeIdOk returns a tuple with the SalesRepresentativeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetSalesRepresentativeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesRepresentativeId) {
		return nil, false
	}
	return o.SalesRepresentativeId, true
}

// HasSalesRepresentativeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasSalesRepresentativeId() bool {
	if o != nil && !IsNil(o.SalesRepresentativeId) {
		return true
	}

	return false
}

// SetSalesRepresentativeId gets a reference to the given string and assigns it to the SalesRepresentativeId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetSalesRepresentativeId(v string) {
	o.SalesRepresentativeId = &v
}

// GetShipmentOrigin returns the ShipmentOrigin field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetShipmentOrigin() string {
	if o == nil || IsNil(o.ShipmentOrigin) {
		var ret string
		return ret
	}
	return *o.ShipmentOrigin
}

// GetShipmentOriginOk returns a tuple with the ShipmentOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetShipmentOriginOk() (*string, bool) {
	if o == nil || IsNil(o.ShipmentOrigin) {
		return nil, false
	}
	return o.ShipmentOrigin, true
}

// HasShipmentOrigin returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasShipmentOrigin() bool {
	if o != nil && !IsNil(o.ShipmentOrigin) {
		return true
	}

	return false
}

// SetShipmentOrigin gets a reference to the given string and assigns it to the ShipmentOrigin field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetShipmentOrigin(v string) {
	o.ShipmentOrigin = &v
}

// GetShippingDate returns the ShippingDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetShippingDate() string {
	if o == nil || IsNil(o.ShippingDate) {
		var ret string
		return ret
	}
	return *o.ShippingDate
}

// GetShippingDateOk returns a tuple with the ShippingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetShippingDateOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingDate) {
		return nil, false
	}
	return o.ShippingDate, true
}

// HasShippingDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasShippingDate() bool {
	if o != nil && !IsNil(o.ShippingDate) {
		return true
	}

	return false
}

// SetShippingDate gets a reference to the given string and assigns it to the ShippingDate field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetShippingDate(v string) {
	o.ShippingDate = &v
}

// GetShippingMethodId returns the ShippingMethodId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetShippingMethodId() string {
	if o == nil || IsNil(o.ShippingMethodId) {
		var ret string
		return ret
	}
	return *o.ShippingMethodId
}

// GetShippingMethodIdOk returns a tuple with the ShippingMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetShippingMethodIdOk() (*string, bool) {
	if o == nil || IsNil(o.ShippingMethodId) {
		return nil, false
	}
	return o.ShippingMethodId, true
}

// HasShippingMethodId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasShippingMethodId() bool {
	if o != nil && !IsNil(o.ShippingMethodId) {
		return true
	}

	return false
}

// SetShippingMethodId gets a reference to the given string and assigns it to the ShippingMethodId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetShippingMethodId(v string) {
	o.ShippingMethodId = &v
}

// GetSalesTaxItemId returns the SalesTaxItemId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetSalesTaxItemId() string {
	if o == nil || IsNil(o.SalesTaxItemId) {
		var ret string
		return ret
	}
	return *o.SalesTaxItemId
}

// GetSalesTaxItemIdOk returns a tuple with the SalesTaxItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetSalesTaxItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxItemId) {
		return nil, false
	}
	return o.SalesTaxItemId, true
}

// HasSalesTaxItemId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasSalesTaxItemId() bool {
	if o != nil && !IsNil(o.SalesTaxItemId) {
		return true
	}

	return false
}

// SetSalesTaxItemId gets a reference to the given string and assigns it to the SalesTaxItemId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetSalesTaxItemId(v string) {
	o.SalesTaxItemId = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetMemo(v string) {
	o.Memo = &v
}

// GetCustomerMessageId returns the CustomerMessageId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetCustomerMessageId() string {
	if o == nil || IsNil(o.CustomerMessageId) {
		var ret string
		return ret
	}
	return *o.CustomerMessageId
}

// GetCustomerMessageIdOk returns a tuple with the CustomerMessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetCustomerMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerMessageId) {
		return nil, false
	}
	return o.CustomerMessageId, true
}

// HasCustomerMessageId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasCustomerMessageId() bool {
	if o != nil && !IsNil(o.CustomerMessageId) {
		return true
	}

	return false
}

// SetCustomerMessageId gets a reference to the given string and assigns it to the CustomerMessageId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetCustomerMessageId(v string) {
	o.CustomerMessageId = &v
}

// GetIsQueuedForPrint returns the IsQueuedForPrint field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetIsQueuedForPrint() bool {
	if o == nil || IsNil(o.IsQueuedForPrint) {
		var ret bool
		return ret
	}
	return *o.IsQueuedForPrint
}

// GetIsQueuedForPrintOk returns a tuple with the IsQueuedForPrint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetIsQueuedForPrintOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQueuedForPrint) {
		return nil, false
	}
	return o.IsQueuedForPrint, true
}

// HasIsQueuedForPrint returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasIsQueuedForPrint() bool {
	if o != nil && !IsNil(o.IsQueuedForPrint) {
		return true
	}

	return false
}

// SetIsQueuedForPrint gets a reference to the given bool and assigns it to the IsQueuedForPrint field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetIsQueuedForPrint(v bool) {
	o.IsQueuedForPrint = &v
}

// GetIsQueuedForEmail returns the IsQueuedForEmail field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetIsQueuedForEmail() bool {
	if o == nil || IsNil(o.IsQueuedForEmail) {
		var ret bool
		return ret
	}
	return *o.IsQueuedForEmail
}

// GetIsQueuedForEmailOk returns a tuple with the IsQueuedForEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetIsQueuedForEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQueuedForEmail) {
		return nil, false
	}
	return o.IsQueuedForEmail, true
}

// HasIsQueuedForEmail returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasIsQueuedForEmail() bool {
	if o != nil && !IsNil(o.IsQueuedForEmail) {
		return true
	}

	return false
}

// SetIsQueuedForEmail gets a reference to the given bool and assigns it to the IsQueuedForEmail field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetIsQueuedForEmail(v bool) {
	o.IsQueuedForEmail = &v
}

// GetSalesTaxCodeId returns the SalesTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetSalesTaxCodeId() string {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		var ret string
		return ret
	}
	return *o.SalesTaxCodeId
}

// GetSalesTaxCodeIdOk returns a tuple with the SalesTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetSalesTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		return nil, false
	}
	return o.SalesTaxCodeId, true
}

// HasSalesTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasSalesTaxCodeId() bool {
	if o != nil && !IsNil(o.SalesTaxCodeId) {
		return true
	}

	return false
}

// SetSalesTaxCodeId gets a reference to the given string and assigns it to the SalesTaxCodeId field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetSalesTaxCodeId(v string) {
	o.SalesTaxCodeId = &v
}

// GetOtherCustomField returns the OtherCustomField field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetOtherCustomField() string {
	if o == nil || IsNil(o.OtherCustomField) {
		var ret string
		return ret
	}
	return *o.OtherCustomField
}

// GetOtherCustomFieldOk returns a tuple with the OtherCustomField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetOtherCustomFieldOk() (*string, bool) {
	if o == nil || IsNil(o.OtherCustomField) {
		return nil, false
	}
	return o.OtherCustomField, true
}

// HasOtherCustomField returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasOtherCustomField() bool {
	if o != nil && !IsNil(o.OtherCustomField) {
		return true
	}

	return false
}

// SetOtherCustomField gets a reference to the given string and assigns it to the OtherCustomField field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetOtherCustomField(v string) {
	o.OtherCustomField = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetExchangeRate() float32 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret float32
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetExchangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float32 and assigns it to the ExchangeRate field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetExchangeRate(v float32) {
	o.ExchangeRate = &v
}

// GetApplyCredits returns the ApplyCredits field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetApplyCredits() []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInnerApplyCreditsInner {
	if o == nil || IsNil(o.ApplyCredits) {
		var ret []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInnerApplyCreditsInner
		return ret
	}
	return o.ApplyCredits
}

// GetApplyCreditsOk returns a tuple with the ApplyCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetApplyCreditsOk() ([]QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInnerApplyCreditsInner, bool) {
	if o == nil || IsNil(o.ApplyCredits) {
		return nil, false
	}
	return o.ApplyCredits, true
}

// HasApplyCredits returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasApplyCredits() bool {
	if o != nil && !IsNil(o.ApplyCredits) {
		return true
	}

	return false
}

// SetApplyCredits gets a reference to the given []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInnerApplyCreditsInner and assigns it to the ApplyCredits field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetApplyCredits(v []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInnerApplyCreditsInner) {
	o.ApplyCredits = v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetLines() []QuickbooksDesktopInvoicesIdPostRequestLinesInner {
	if o == nil || IsNil(o.Lines) {
		var ret []QuickbooksDesktopInvoicesIdPostRequestLinesInner
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetLinesOk() ([]QuickbooksDesktopInvoicesIdPostRequestLinesInner, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []QuickbooksDesktopInvoicesIdPostRequestLinesInner and assigns it to the Lines field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetLines(v []QuickbooksDesktopInvoicesIdPostRequestLinesInner) {
	o.Lines = v
}

// GetLineGroups returns the LineGroups field value if set, zero value otherwise.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetLineGroups() []QuickbooksDesktopInvoicesIdPostRequestLineGroupsInner {
	if o == nil || IsNil(o.LineGroups) {
		var ret []QuickbooksDesktopInvoicesIdPostRequestLineGroupsInner
		return ret
	}
	return o.LineGroups
}

// GetLineGroupsOk returns a tuple with the LineGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) GetLineGroupsOk() ([]QuickbooksDesktopInvoicesIdPostRequestLineGroupsInner, bool) {
	if o == nil || IsNil(o.LineGroups) {
		return nil, false
	}
	return o.LineGroups, true
}

// HasLineGroups returns a boolean if a field has been set.
func (o *QuickbooksDesktopInvoicesIdPostRequest) HasLineGroups() bool {
	if o != nil && !IsNil(o.LineGroups) {
		return true
	}

	return false
}

// SetLineGroups gets a reference to the given []QuickbooksDesktopInvoicesIdPostRequestLineGroupsInner and assigns it to the LineGroups field.
func (o *QuickbooksDesktopInvoicesIdPostRequest) SetLineGroups(v []QuickbooksDesktopInvoicesIdPostRequestLineGroupsInner) {
	o.LineGroups = v
}

func (o QuickbooksDesktopInvoicesIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopInvoicesIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.ReceivablesAccountId) {
		toSerialize["receivablesAccountId"] = o.ReceivablesAccountId
	}
	if !IsNil(o.DocumentTemplateId) {
		toSerialize["documentTemplateId"] = o.DocumentTemplateId
	}
	if !IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if !IsNil(o.RefNumber) {
		toSerialize["refNumber"] = o.RefNumber
	}
	if !IsNil(o.BillingAddress) {
		toSerialize["billingAddress"] = o.BillingAddress
	}
	if !IsNil(o.ShippingAddress) {
		toSerialize["shippingAddress"] = o.ShippingAddress
	}
	if !IsNil(o.IsPending) {
		toSerialize["isPending"] = o.IsPending
	}
	if !IsNil(o.PurchaseOrderNumber) {
		toSerialize["purchaseOrderNumber"] = o.PurchaseOrderNumber
	}
	if !IsNil(o.TermsId) {
		toSerialize["termsId"] = o.TermsId
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.SalesRepresentativeId) {
		toSerialize["salesRepresentativeId"] = o.SalesRepresentativeId
	}
	if !IsNil(o.ShipmentOrigin) {
		toSerialize["shipmentOrigin"] = o.ShipmentOrigin
	}
	if !IsNil(o.ShippingDate) {
		toSerialize["shippingDate"] = o.ShippingDate
	}
	if !IsNil(o.ShippingMethodId) {
		toSerialize["shippingMethodId"] = o.ShippingMethodId
	}
	if !IsNil(o.SalesTaxItemId) {
		toSerialize["salesTaxItemId"] = o.SalesTaxItemId
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.CustomerMessageId) {
		toSerialize["customerMessageId"] = o.CustomerMessageId
	}
	if !IsNil(o.IsQueuedForPrint) {
		toSerialize["isQueuedForPrint"] = o.IsQueuedForPrint
	}
	if !IsNil(o.IsQueuedForEmail) {
		toSerialize["isQueuedForEmail"] = o.IsQueuedForEmail
	}
	if !IsNil(o.SalesTaxCodeId) {
		toSerialize["salesTaxCodeId"] = o.SalesTaxCodeId
	}
	if !IsNil(o.OtherCustomField) {
		toSerialize["otherCustomField"] = o.OtherCustomField
	}
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if !IsNil(o.ApplyCredits) {
		toSerialize["applyCredits"] = o.ApplyCredits
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}
	if !IsNil(o.LineGroups) {
		toSerialize["lineGroups"] = o.LineGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopInvoicesIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopInvoicesIdPostRequest := _QuickbooksDesktopInvoicesIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopInvoicesIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopInvoicesIdPostRequest(varQuickbooksDesktopInvoicesIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "customerId")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "receivablesAccountId")
		delete(additionalProperties, "documentTemplateId")
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "refNumber")
		delete(additionalProperties, "billingAddress")
		delete(additionalProperties, "shippingAddress")
		delete(additionalProperties, "isPending")
		delete(additionalProperties, "purchaseOrderNumber")
		delete(additionalProperties, "termsId")
		delete(additionalProperties, "dueDate")
		delete(additionalProperties, "salesRepresentativeId")
		delete(additionalProperties, "shipmentOrigin")
		delete(additionalProperties, "shippingDate")
		delete(additionalProperties, "shippingMethodId")
		delete(additionalProperties, "salesTaxItemId")
		delete(additionalProperties, "memo")
		delete(additionalProperties, "customerMessageId")
		delete(additionalProperties, "isQueuedForPrint")
		delete(additionalProperties, "isQueuedForEmail")
		delete(additionalProperties, "salesTaxCodeId")
		delete(additionalProperties, "otherCustomField")
		delete(additionalProperties, "exchangeRate")
		delete(additionalProperties, "applyCredits")
		delete(additionalProperties, "lines")
		delete(additionalProperties, "lineGroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopInvoicesIdPostRequest struct {
	value *QuickbooksDesktopInvoicesIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopInvoicesIdPostRequest) Get() *QuickbooksDesktopInvoicesIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopInvoicesIdPostRequest) Set(val *QuickbooksDesktopInvoicesIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopInvoicesIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopInvoicesIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopInvoicesIdPostRequest(val *QuickbooksDesktopInvoicesIdPostRequest) *NullableQuickbooksDesktopInvoicesIdPostRequest {
	return &NullableQuickbooksDesktopInvoicesIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopInvoicesIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopInvoicesIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


