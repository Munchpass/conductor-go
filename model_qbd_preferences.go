/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdPreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdPreferences{}

// QbdPreferences struct for QbdPreferences
type QbdPreferences struct {
	Accounting TheAccountingPreferencesObject `json:"accounting"`
	FinanceCharges TheFinanceChargePreferencesObject `json:"financeCharges"`
	JobsAndEstimates TheJobsAndEstimatesPreferencesObject `json:"jobsAndEstimates"`
	MultiCurrency QbdPreferencesMultiCurrency `json:"multiCurrency"`
	MultiLocationInventory QbdPreferencesMultiLocationInventory `json:"multiLocationInventory"`
	PurchasesAndVendors ThePurchasesAndVendorsPreferencesObject `json:"purchasesAndVendors"`
	Reports TheReportsPreferencesObject `json:"reports"`
	SalesAndCustomers TheSalesAndCustomersPreferencesObject `json:"salesAndCustomers"`
	SalesTax QbdPreferencesSalesTax `json:"salesTax"`
	TimeTracking QbdPreferencesTimeTracking `json:"timeTracking"`
	AppAccessRights TheCurrentAppAccessRightsObject `json:"appAccessRights"`
	ItemsAndInventory QbdPreferencesItemsAndInventory `json:"itemsAndInventory"`
	AdditionalProperties map[string]interface{}
}

type _QbdPreferences QbdPreferences

// NewQbdPreferences instantiates a new QbdPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdPreferences(accounting TheAccountingPreferencesObject, financeCharges TheFinanceChargePreferencesObject, jobsAndEstimates TheJobsAndEstimatesPreferencesObject, multiCurrency QbdPreferencesMultiCurrency, multiLocationInventory QbdPreferencesMultiLocationInventory, purchasesAndVendors ThePurchasesAndVendorsPreferencesObject, reports TheReportsPreferencesObject, salesAndCustomers TheSalesAndCustomersPreferencesObject, salesTax QbdPreferencesSalesTax, timeTracking QbdPreferencesTimeTracking, appAccessRights TheCurrentAppAccessRightsObject, itemsAndInventory QbdPreferencesItemsAndInventory) *QbdPreferences {
	this := QbdPreferences{}
	this.Accounting = accounting
	this.FinanceCharges = financeCharges
	this.JobsAndEstimates = jobsAndEstimates
	this.MultiCurrency = multiCurrency
	this.MultiLocationInventory = multiLocationInventory
	this.PurchasesAndVendors = purchasesAndVendors
	this.Reports = reports
	this.SalesAndCustomers = salesAndCustomers
	this.SalesTax = salesTax
	this.TimeTracking = timeTracking
	this.AppAccessRights = appAccessRights
	this.ItemsAndInventory = itemsAndInventory
	return &this
}

// NewQbdPreferencesWithDefaults instantiates a new QbdPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdPreferencesWithDefaults() *QbdPreferences {
	this := QbdPreferences{}
	return &this
}

// GetAccounting returns the Accounting field value
func (o *QbdPreferences) GetAccounting() TheAccountingPreferencesObject {
	if o == nil {
		var ret TheAccountingPreferencesObject
		return ret
	}

	return o.Accounting
}

// GetAccountingOk returns a tuple with the Accounting field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetAccountingOk() (*TheAccountingPreferencesObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Accounting, true
}

// SetAccounting sets field value
func (o *QbdPreferences) SetAccounting(v TheAccountingPreferencesObject) {
	o.Accounting = v
}

// GetFinanceCharges returns the FinanceCharges field value
func (o *QbdPreferences) GetFinanceCharges() TheFinanceChargePreferencesObject {
	if o == nil {
		var ret TheFinanceChargePreferencesObject
		return ret
	}

	return o.FinanceCharges
}

// GetFinanceChargesOk returns a tuple with the FinanceCharges field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetFinanceChargesOk() (*TheFinanceChargePreferencesObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinanceCharges, true
}

// SetFinanceCharges sets field value
func (o *QbdPreferences) SetFinanceCharges(v TheFinanceChargePreferencesObject) {
	o.FinanceCharges = v
}

// GetJobsAndEstimates returns the JobsAndEstimates field value
func (o *QbdPreferences) GetJobsAndEstimates() TheJobsAndEstimatesPreferencesObject {
	if o == nil {
		var ret TheJobsAndEstimatesPreferencesObject
		return ret
	}

	return o.JobsAndEstimates
}

// GetJobsAndEstimatesOk returns a tuple with the JobsAndEstimates field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetJobsAndEstimatesOk() (*TheJobsAndEstimatesPreferencesObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobsAndEstimates, true
}

// SetJobsAndEstimates sets field value
func (o *QbdPreferences) SetJobsAndEstimates(v TheJobsAndEstimatesPreferencesObject) {
	o.JobsAndEstimates = v
}

// GetMultiCurrency returns the MultiCurrency field value
func (o *QbdPreferences) GetMultiCurrency() QbdPreferencesMultiCurrency {
	if o == nil {
		var ret QbdPreferencesMultiCurrency
		return ret
	}

	return o.MultiCurrency
}

// GetMultiCurrencyOk returns a tuple with the MultiCurrency field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetMultiCurrencyOk() (*QbdPreferencesMultiCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultiCurrency, true
}

// SetMultiCurrency sets field value
func (o *QbdPreferences) SetMultiCurrency(v QbdPreferencesMultiCurrency) {
	o.MultiCurrency = v
}

// GetMultiLocationInventory returns the MultiLocationInventory field value
func (o *QbdPreferences) GetMultiLocationInventory() QbdPreferencesMultiLocationInventory {
	if o == nil {
		var ret QbdPreferencesMultiLocationInventory
		return ret
	}

	return o.MultiLocationInventory
}

// GetMultiLocationInventoryOk returns a tuple with the MultiLocationInventory field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetMultiLocationInventoryOk() (*QbdPreferencesMultiLocationInventory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MultiLocationInventory, true
}

// SetMultiLocationInventory sets field value
func (o *QbdPreferences) SetMultiLocationInventory(v QbdPreferencesMultiLocationInventory) {
	o.MultiLocationInventory = v
}

// GetPurchasesAndVendors returns the PurchasesAndVendors field value
func (o *QbdPreferences) GetPurchasesAndVendors() ThePurchasesAndVendorsPreferencesObject {
	if o == nil {
		var ret ThePurchasesAndVendorsPreferencesObject
		return ret
	}

	return o.PurchasesAndVendors
}

// GetPurchasesAndVendorsOk returns a tuple with the PurchasesAndVendors field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetPurchasesAndVendorsOk() (*ThePurchasesAndVendorsPreferencesObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PurchasesAndVendors, true
}

// SetPurchasesAndVendors sets field value
func (o *QbdPreferences) SetPurchasesAndVendors(v ThePurchasesAndVendorsPreferencesObject) {
	o.PurchasesAndVendors = v
}

// GetReports returns the Reports field value
func (o *QbdPreferences) GetReports() TheReportsPreferencesObject {
	if o == nil {
		var ret TheReportsPreferencesObject
		return ret
	}

	return o.Reports
}

// GetReportsOk returns a tuple with the Reports field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetReportsOk() (*TheReportsPreferencesObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reports, true
}

// SetReports sets field value
func (o *QbdPreferences) SetReports(v TheReportsPreferencesObject) {
	o.Reports = v
}

// GetSalesAndCustomers returns the SalesAndCustomers field value
func (o *QbdPreferences) GetSalesAndCustomers() TheSalesAndCustomersPreferencesObject {
	if o == nil {
		var ret TheSalesAndCustomersPreferencesObject
		return ret
	}

	return o.SalesAndCustomers
}

// GetSalesAndCustomersOk returns a tuple with the SalesAndCustomers field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetSalesAndCustomersOk() (*TheSalesAndCustomersPreferencesObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesAndCustomers, true
}

// SetSalesAndCustomers sets field value
func (o *QbdPreferences) SetSalesAndCustomers(v TheSalesAndCustomersPreferencesObject) {
	o.SalesAndCustomers = v
}

// GetSalesTax returns the SalesTax field value
func (o *QbdPreferences) GetSalesTax() QbdPreferencesSalesTax {
	if o == nil {
		var ret QbdPreferencesSalesTax
		return ret
	}

	return o.SalesTax
}

// GetSalesTaxOk returns a tuple with the SalesTax field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetSalesTaxOk() (*QbdPreferencesSalesTax, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesTax, true
}

// SetSalesTax sets field value
func (o *QbdPreferences) SetSalesTax(v QbdPreferencesSalesTax) {
	o.SalesTax = v
}

// GetTimeTracking returns the TimeTracking field value
func (o *QbdPreferences) GetTimeTracking() QbdPreferencesTimeTracking {
	if o == nil {
		var ret QbdPreferencesTimeTracking
		return ret
	}

	return o.TimeTracking
}

// GetTimeTrackingOk returns a tuple with the TimeTracking field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetTimeTrackingOk() (*QbdPreferencesTimeTracking, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeTracking, true
}

// SetTimeTracking sets field value
func (o *QbdPreferences) SetTimeTracking(v QbdPreferencesTimeTracking) {
	o.TimeTracking = v
}

// GetAppAccessRights returns the AppAccessRights field value
func (o *QbdPreferences) GetAppAccessRights() TheCurrentAppAccessRightsObject {
	if o == nil {
		var ret TheCurrentAppAccessRightsObject
		return ret
	}

	return o.AppAccessRights
}

// GetAppAccessRightsOk returns a tuple with the AppAccessRights field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetAppAccessRightsOk() (*TheCurrentAppAccessRightsObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppAccessRights, true
}

// SetAppAccessRights sets field value
func (o *QbdPreferences) SetAppAccessRights(v TheCurrentAppAccessRightsObject) {
	o.AppAccessRights = v
}

// GetItemsAndInventory returns the ItemsAndInventory field value
func (o *QbdPreferences) GetItemsAndInventory() QbdPreferencesItemsAndInventory {
	if o == nil {
		var ret QbdPreferencesItemsAndInventory
		return ret
	}

	return o.ItemsAndInventory
}

// GetItemsAndInventoryOk returns a tuple with the ItemsAndInventory field value
// and a boolean to check if the value has been set.
func (o *QbdPreferences) GetItemsAndInventoryOk() (*QbdPreferencesItemsAndInventory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemsAndInventory, true
}

// SetItemsAndInventory sets field value
func (o *QbdPreferences) SetItemsAndInventory(v QbdPreferencesItemsAndInventory) {
	o.ItemsAndInventory = v
}

func (o QbdPreferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdPreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accounting"] = o.Accounting
	toSerialize["financeCharges"] = o.FinanceCharges
	toSerialize["jobsAndEstimates"] = o.JobsAndEstimates
	toSerialize["multiCurrency"] = o.MultiCurrency
	toSerialize["multiLocationInventory"] = o.MultiLocationInventory
	toSerialize["purchasesAndVendors"] = o.PurchasesAndVendors
	toSerialize["reports"] = o.Reports
	toSerialize["salesAndCustomers"] = o.SalesAndCustomers
	toSerialize["salesTax"] = o.SalesTax
	toSerialize["timeTracking"] = o.TimeTracking
	toSerialize["appAccessRights"] = o.AppAccessRights
	toSerialize["itemsAndInventory"] = o.ItemsAndInventory

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdPreferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accounting",
		"financeCharges",
		"jobsAndEstimates",
		"multiCurrency",
		"multiLocationInventory",
		"purchasesAndVendors",
		"reports",
		"salesAndCustomers",
		"salesTax",
		"timeTracking",
		"appAccessRights",
		"itemsAndInventory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdPreferences := _QbdPreferences{}

	err = json.Unmarshal(data, &varQbdPreferences)

	if err != nil {
		return err
	}

	*o = QbdPreferences(varQbdPreferences)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accounting")
		delete(additionalProperties, "financeCharges")
		delete(additionalProperties, "jobsAndEstimates")
		delete(additionalProperties, "multiCurrency")
		delete(additionalProperties, "multiLocationInventory")
		delete(additionalProperties, "purchasesAndVendors")
		delete(additionalProperties, "reports")
		delete(additionalProperties, "salesAndCustomers")
		delete(additionalProperties, "salesTax")
		delete(additionalProperties, "timeTracking")
		delete(additionalProperties, "appAccessRights")
		delete(additionalProperties, "itemsAndInventory")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdPreferences struct {
	value *QbdPreferences
	isSet bool
}

func (v NullableQbdPreferences) Get() *QbdPreferences {
	return v.value
}

func (v *NullableQbdPreferences) Set(val *QbdPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdPreferences(val *QbdPreferences) *NullableQbdPreferences {
	return &NullableQbdPreferences{value: val, isSet: true}
}

func (v NullableQbdPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


