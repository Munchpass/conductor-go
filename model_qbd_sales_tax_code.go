/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdSalesTaxCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdSalesTaxCode{}

// QbdSalesTaxCode struct for QbdSalesTaxCode
type QbdSalesTaxCode struct {
	// The unique identifier assigned by QuickBooks to this sales-tax code. This ID is unique across all sales-tax codes but not across different QuickBooks object types.
	Id string `json:"id"`
	// The type of object. This value is always `\"qbd_sales_tax_code\"`.
	ObjectType string `json:"objectType"`
	// The date and time when this sales-tax code was created, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). The time zone is the same as the user's time zone in QuickBooks.
	CreatedAt string `json:"createdAt"`
	// The date and time when this sales-tax code was last updated, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). The time zone is the same as the user's time zone in QuickBooks.
	UpdatedAt string `json:"updatedAt"`
	// The current QuickBooks-assigned revision number of this sales-tax code object, which changes each time the object is modified. When updating this object, you must provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The case-insensitive unique name of this sales-tax code, unique across all sales-tax codes. This short name will appear on sales forms to identify the tax status of an item.  **NOTE**: Sales-tax codes do not have a `fullName` field because they are not hierarchical objects, which is why `name` is unique for them but not for objects that have parents.
	Name string `json:"name"`
	// Indicates whether this sales-tax code is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive bool `json:"isActive"`
	// Indicates whether this sales-tax code is tracking taxable sales. This field cannot be modified once the sales-tax code has been used in a transaction.
	IsTaxable bool `json:"isTaxable"`
	// A description of this sales-tax code.
	Description string `json:"description"`
	SalesTaxItem QbdSalesTaxCodeSalesTaxItem `json:"salesTaxItem"`
	AdditionalProperties map[string]interface{}
}

type _QbdSalesTaxCode QbdSalesTaxCode

// NewQbdSalesTaxCode instantiates a new QbdSalesTaxCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdSalesTaxCode(id string, objectType string, createdAt string, updatedAt string, revisionNumber string, name string, isActive bool, isTaxable bool, description string, salesTaxItem QbdSalesTaxCodeSalesTaxItem) *QbdSalesTaxCode {
	this := QbdSalesTaxCode{}
	this.Id = id
	this.ObjectType = objectType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.RevisionNumber = revisionNumber
	this.Name = name
	this.IsActive = isActive
	this.IsTaxable = isTaxable
	this.Description = description
	this.SalesTaxItem = salesTaxItem
	return &this
}

// NewQbdSalesTaxCodeWithDefaults instantiates a new QbdSalesTaxCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdSalesTaxCodeWithDefaults() *QbdSalesTaxCode {
	this := QbdSalesTaxCode{}
	return &this
}

// GetId returns the Id field value
func (o *QbdSalesTaxCode) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QbdSalesTaxCode) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *QbdSalesTaxCode) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *QbdSalesTaxCode) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *QbdSalesTaxCode) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *QbdSalesTaxCode) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *QbdSalesTaxCode) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *QbdSalesTaxCode) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QbdSalesTaxCode) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QbdSalesTaxCode) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetName returns the Name field value
func (o *QbdSalesTaxCode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QbdSalesTaxCode) SetName(v string) {
	o.Name = v
}

// GetIsActive returns the IsActive field value
func (o *QbdSalesTaxCode) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *QbdSalesTaxCode) SetIsActive(v bool) {
	o.IsActive = v
}

// GetIsTaxable returns the IsTaxable field value
func (o *QbdSalesTaxCode) GetIsTaxable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTaxable
}

// GetIsTaxableOk returns a tuple with the IsTaxable field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetIsTaxableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTaxable, true
}

// SetIsTaxable sets field value
func (o *QbdSalesTaxCode) SetIsTaxable(v bool) {
	o.IsTaxable = v
}

// GetDescription returns the Description field value
func (o *QbdSalesTaxCode) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *QbdSalesTaxCode) SetDescription(v string) {
	o.Description = v
}

// GetSalesTaxItem returns the SalesTaxItem field value
func (o *QbdSalesTaxCode) GetSalesTaxItem() QbdSalesTaxCodeSalesTaxItem {
	if o == nil {
		var ret QbdSalesTaxCodeSalesTaxItem
		return ret
	}

	return o.SalesTaxItem
}

// GetSalesTaxItemOk returns a tuple with the SalesTaxItem field value
// and a boolean to check if the value has been set.
func (o *QbdSalesTaxCode) GetSalesTaxItemOk() (*QbdSalesTaxCodeSalesTaxItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesTaxItem, true
}

// SetSalesTaxItem sets field value
func (o *QbdSalesTaxCode) SetSalesTaxItem(v QbdSalesTaxCodeSalesTaxItem) {
	o.SalesTaxItem = v
}

func (o QbdSalesTaxCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdSalesTaxCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["objectType"] = o.ObjectType
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["revisionNumber"] = o.RevisionNumber
	toSerialize["name"] = o.Name
	toSerialize["isActive"] = o.IsActive
	toSerialize["isTaxable"] = o.IsTaxable
	toSerialize["description"] = o.Description
	toSerialize["salesTaxItem"] = o.SalesTaxItem

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdSalesTaxCode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"objectType",
		"createdAt",
		"updatedAt",
		"revisionNumber",
		"name",
		"isActive",
		"isTaxable",
		"description",
		"salesTaxItem",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdSalesTaxCode := _QbdSalesTaxCode{}

	err = json.Unmarshal(data, &varQbdSalesTaxCode)

	if err != nil {
		return err
	}

	*o = QbdSalesTaxCode(varQbdSalesTaxCode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "objectType")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "name")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "isTaxable")
		delete(additionalProperties, "description")
		delete(additionalProperties, "salesTaxItem")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdSalesTaxCode struct {
	value *QbdSalesTaxCode
	isSet bool
}

func (v NullableQbdSalesTaxCode) Get() *QbdSalesTaxCode {
	return v.value
}

func (v *NullableQbdSalesTaxCode) Set(val *QbdSalesTaxCode) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdSalesTaxCode) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdSalesTaxCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdSalesTaxCode(val *QbdSalesTaxCode) *NullableQbdSalesTaxCode {
	return &NullableQbdSalesTaxCode{value: val, isSet: true}
}

func (v NullableQbdSalesTaxCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdSalesTaxCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


