/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopSalesTaxCodesIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopSalesTaxCodesIdPostRequest{}

// QuickbooksDesktopSalesTaxCodesIdPostRequest struct for QuickbooksDesktopSalesTaxCodesIdPostRequest
type QuickbooksDesktopSalesTaxCodesIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the sales-tax code object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The case-insensitive unique name of this sales-tax code, unique across all sales-tax codes. This short name will appear on sales forms to identify the tax status of an item.  **NOTE**: Sales-tax codes do not have a `fullName` field because they are not hierarchical objects, which is why `name` is unique for them but not for objects that have parents.  Maximum length: 3 characters.
	Name *string `json:"name,omitempty"`
	// Indicates whether this sales-tax code is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// Indicates whether this sales-tax code is tracking taxable sales. This field cannot be modified once the sales-tax code has been used in a transaction.
	IsTaxable *bool `json:"isTaxable,omitempty"`
	// A description of this sales-tax code.
	Description *string `json:"description,omitempty"`
	// The sales-tax item used to calculate the actual tax amount for this sales-tax code's transactions by applying a specific tax rate collected for a single tax agency. Unlike `salesTaxCode`, which only indicates general taxability, this field drives the actual tax calculation and reporting.
	SalesTaxItemId *string `json:"salesTaxItemId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopSalesTaxCodesIdPostRequest QuickbooksDesktopSalesTaxCodesIdPostRequest

// NewQuickbooksDesktopSalesTaxCodesIdPostRequest instantiates a new QuickbooksDesktopSalesTaxCodesIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopSalesTaxCodesIdPostRequest(revisionNumber string) *QuickbooksDesktopSalesTaxCodesIdPostRequest {
	this := QuickbooksDesktopSalesTaxCodesIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopSalesTaxCodesIdPostRequestWithDefaults instantiates a new QuickbooksDesktopSalesTaxCodesIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopSalesTaxCodesIdPostRequestWithDefaults() *QuickbooksDesktopSalesTaxCodesIdPostRequest {
	this := QuickbooksDesktopSalesTaxCodesIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) SetName(v string) {
	o.Name = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsTaxable returns the IsTaxable field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetIsTaxable() bool {
	if o == nil || IsNil(o.IsTaxable) {
		var ret bool
		return ret
	}
	return *o.IsTaxable
}

// GetIsTaxableOk returns a tuple with the IsTaxable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetIsTaxableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTaxable) {
		return nil, false
	}
	return o.IsTaxable, true
}

// HasIsTaxable returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) HasIsTaxable() bool {
	if o != nil && !IsNil(o.IsTaxable) {
		return true
	}

	return false
}

// SetIsTaxable gets a reference to the given bool and assigns it to the IsTaxable field.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) SetIsTaxable(v bool) {
	o.IsTaxable = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetSalesTaxItemId returns the SalesTaxItemId field value if set, zero value otherwise.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetSalesTaxItemId() string {
	if o == nil || IsNil(o.SalesTaxItemId) {
		var ret string
		return ret
	}
	return *o.SalesTaxItemId
}

// GetSalesTaxItemIdOk returns a tuple with the SalesTaxItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) GetSalesTaxItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxItemId) {
		return nil, false
	}
	return o.SalesTaxItemId, true
}

// HasSalesTaxItemId returns a boolean if a field has been set.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) HasSalesTaxItemId() bool {
	if o != nil && !IsNil(o.SalesTaxItemId) {
		return true
	}

	return false
}

// SetSalesTaxItemId gets a reference to the given string and assigns it to the SalesTaxItemId field.
func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) SetSalesTaxItemId(v string) {
	o.SalesTaxItemId = &v
}

func (o QuickbooksDesktopSalesTaxCodesIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopSalesTaxCodesIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.IsTaxable) {
		toSerialize["isTaxable"] = o.IsTaxable
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SalesTaxItemId) {
		toSerialize["salesTaxItemId"] = o.SalesTaxItemId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopSalesTaxCodesIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopSalesTaxCodesIdPostRequest := _QuickbooksDesktopSalesTaxCodesIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopSalesTaxCodesIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopSalesTaxCodesIdPostRequest(varQuickbooksDesktopSalesTaxCodesIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "name")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "isTaxable")
		delete(additionalProperties, "description")
		delete(additionalProperties, "salesTaxItemId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopSalesTaxCodesIdPostRequest struct {
	value *QuickbooksDesktopSalesTaxCodesIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopSalesTaxCodesIdPostRequest) Get() *QuickbooksDesktopSalesTaxCodesIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopSalesTaxCodesIdPostRequest) Set(val *QuickbooksDesktopSalesTaxCodesIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopSalesTaxCodesIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopSalesTaxCodesIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopSalesTaxCodesIdPostRequest(val *QuickbooksDesktopSalesTaxCodesIdPostRequest) *NullableQuickbooksDesktopSalesTaxCodesIdPostRequest {
	return &NullableQuickbooksDesktopSalesTaxCodesIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopSalesTaxCodesIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopSalesTaxCodesIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


