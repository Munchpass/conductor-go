/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QbdTaxLineInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdTaxLineInfo{}

// QbdTaxLineInfo struct for QbdTaxLineInfo
type QbdTaxLineInfo struct {
	// The identifier of the tax line associated with this account.
	TaxLineId float32 `json:"taxLineId"`
	// The name of the tax line associated with this account, as it appears on the tax form.
	TaxLineName NullableString `json:"taxLineName"`
}

type _QbdTaxLineInfo QbdTaxLineInfo

// NewQbdTaxLineInfo instantiates a new QbdTaxLineInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdTaxLineInfo(taxLineId float32, taxLineName NullableString) *QbdTaxLineInfo {
	this := QbdTaxLineInfo{}
	this.TaxLineId = taxLineId
	this.TaxLineName = taxLineName
	return &this
}

// NewQbdTaxLineInfoWithDefaults instantiates a new QbdTaxLineInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdTaxLineInfoWithDefaults() *QbdTaxLineInfo {
	this := QbdTaxLineInfo{}
	return &this
}

// GetTaxLineId returns the TaxLineId field value
func (o *QbdTaxLineInfo) GetTaxLineId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TaxLineId
}

// GetTaxLineIdOk returns a tuple with the TaxLineId field value
// and a boolean to check if the value has been set.
func (o *QbdTaxLineInfo) GetTaxLineIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxLineId, true
}

// SetTaxLineId sets field value
func (o *QbdTaxLineInfo) SetTaxLineId(v float32) {
	o.TaxLineId = v
}

// GetTaxLineName returns the TaxLineName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *QbdTaxLineInfo) GetTaxLineName() string {
	if o == nil || o.TaxLineName.Get() == nil {
		var ret string
		return ret
	}

	return *o.TaxLineName.Get()
}

// GetTaxLineNameOk returns a tuple with the TaxLineName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdTaxLineInfo) GetTaxLineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxLineName.Get(), o.TaxLineName.IsSet()
}

// SetTaxLineName sets field value
func (o *QbdTaxLineInfo) SetTaxLineName(v string) {
	o.TaxLineName.Set(&v)
}

func (o QbdTaxLineInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdTaxLineInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taxLineId"] = o.TaxLineId
	toSerialize["taxLineName"] = o.TaxLineName.Get()
	return toSerialize, nil
}

func (o *QbdTaxLineInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taxLineId",
		"taxLineName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdTaxLineInfo := _QbdTaxLineInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQbdTaxLineInfo)

	if err != nil {
		return err
	}

	*o = QbdTaxLineInfo(varQbdTaxLineInfo)

	return err
}

type NullableQbdTaxLineInfo struct {
	value *QbdTaxLineInfo
	isSet bool
}

func (v NullableQbdTaxLineInfo) Get() *QbdTaxLineInfo {
	return v.value
}

func (v *NullableQbdTaxLineInfo) Set(val *QbdTaxLineInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdTaxLineInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdTaxLineInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdTaxLineInfo(val *QbdTaxLineInfo) *NullableQbdTaxLineInfo {
	return &NullableQbdTaxLineInfo{value: val, isSet: true}
}

func (v NullableQbdTaxLineInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdTaxLineInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


