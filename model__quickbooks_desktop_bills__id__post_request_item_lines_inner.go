/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopBillsIdPostRequestItemLinesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopBillsIdPostRequestItemLinesInner{}

// QuickbooksDesktopBillsIdPostRequestItemLinesInner struct for QuickbooksDesktopBillsIdPostRequestItemLinesInner
type QuickbooksDesktopBillsIdPostRequestItemLinesInner struct {
	// The QuickBooks-assigned unique identifier of an existing item line you wish to retain or update.  **IMPORTANT**: Set this field to `-1` for new item lines you wish to add.
	Id string `json:"id"`
	// The item associated with this item line. This can refer to any good or service that the business buys or sells, including item types such as a service item, inventory item, or special calculation item like a discount item or sales-tax item.
	ItemId *string `json:"itemId,omitempty"`
	// The site location where inventory for the item associated with this item line is stored.
	InventorySiteId *string `json:"inventorySiteId,omitempty"`
	// The specific location (e.g., bin or shelf) within the inventory site where the item associated with this item line is stored.
	InventorySiteLocationId *string `json:"inventorySiteLocationId,omitempty"`
	// The serial number of the item associated with this item line. This is used for tracking individual units of serialized inventory items.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// The lot number of the item associated with this item line. Used for tracking groups of inventory items that are purchased or manufactured together.
	LotNumber *string `json:"lotNumber,omitempty"`
	// The expiration date for the serial number or lot number of the item associated with this item line, in ISO 8601 format (YYYY-MM-DD). This is particularly relevant for perishable or time-sensitive inventory items. Note that this field is only supported on QuickBooks Desktop 2023 or later.
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// A description of this item line.
	Description *string `json:"description,omitempty"`
	// The quantity of the item associated with this item line. This field cannot be cleared.  **NOTE**: Do not use this field if the associated item is a discount item.
	Quantity *float32 `json:"quantity,omitempty"`
	// The unit-of-measure used for the `quantity` in this item line. Must be a valid unit within the item's available units of measure.
	UnitOfMeasure *string `json:"unitOfMeasure,omitempty"`
	// Specifies an alternative unit-of-measure set when updating this item line's `unitOfMeasure` field (e.g., \"pound\" or \"kilogram\"). This allows you to select units from a different set than the item's default unit-of-measure set, which remains unchanged on the item itself. The override applies only to this specific line. For example, you can sell an item typically measured in volume units using weight units in a specific transaction by specifying a different unit-of-measure set with this field.
	OverrideUnitOfMeasureSetId *string `json:"overrideUnitOfMeasureSetId,omitempty"`
	// The cost of this item line, represented as a decimal string. If both `quantity` and `amount` are specified but not `cost`, QuickBooks will use them to calculate `cost`.
	Cost *string `json:"cost,omitempty"`
	// The monetary amount of this item line, represented as a decimal string. If both `quantity` and `cost` are specified but not `amount`, QuickBooks will use them to calculate `amount`. If `amount`, `cost`, and `quantity` are all unspecified, then QuickBooks will calculate `amount` based on a `quantity` of `1` and the suggested `cost`. This field cannot be cleared.
	Amount *string `json:"amount,omitempty"`
	// The customer or customer-job associated with this item line.
	CustomerId *string `json:"customerId,omitempty"`
	// The item line's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default. If a class is specified for the entire parent transaction, it is automatically applied to all item lines unless overridden here, at the transaction line level.
	ClassId *string `json:"classId,omitempty"`
	// The sales-tax code for this item line, determining whether it is taxable or non-taxable. If set, this overrides any sales-tax codes defined on the parent transaction or the associated item.  Default codes include \"Non\" (non-taxable) and \"Tax\" (taxable), but custom codes can also be created in QuickBooks. If QuickBooks is not set up to charge sales tax (via the \"Do You Charge Sales Tax?\" preference), it will assign the default non-taxable code to all sales.
	SalesTaxCodeId *string `json:"salesTaxCodeId,omitempty"`
	// The billing status of this item line.
	BillingStatus *string `json:"billingStatus,omitempty"`
	// The account to use for this item line, overriding the default account associated with the item.
	OverrideItemAccountId *string `json:"overrideItemAccountId,omitempty"`
	// The item line's sales representative. Sales representatives can be employees, vendors, or other names in QuickBooks.
	SalesRepresentativeId *string `json:"salesRepresentativeId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopBillsIdPostRequestItemLinesInner QuickbooksDesktopBillsIdPostRequestItemLinesInner

// NewQuickbooksDesktopBillsIdPostRequestItemLinesInner instantiates a new QuickbooksDesktopBillsIdPostRequestItemLinesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopBillsIdPostRequestItemLinesInner(id string) *QuickbooksDesktopBillsIdPostRequestItemLinesInner {
	this := QuickbooksDesktopBillsIdPostRequestItemLinesInner{}
	this.Id = id
	return &this
}

// NewQuickbooksDesktopBillsIdPostRequestItemLinesInnerWithDefaults instantiates a new QuickbooksDesktopBillsIdPostRequestItemLinesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopBillsIdPostRequestItemLinesInnerWithDefaults() *QuickbooksDesktopBillsIdPostRequestItemLinesInner {
	this := QuickbooksDesktopBillsIdPostRequestItemLinesInner{}
	return &this
}

// GetId returns the Id field value
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetId(v string) {
	o.Id = v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetItemId(v string) {
	o.ItemId = &v
}

// GetInventorySiteId returns the InventorySiteId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetInventorySiteId() string {
	if o == nil || IsNil(o.InventorySiteId) {
		var ret string
		return ret
	}
	return *o.InventorySiteId
}

// GetInventorySiteIdOk returns a tuple with the InventorySiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetInventorySiteIdOk() (*string, bool) {
	if o == nil || IsNil(o.InventorySiteId) {
		return nil, false
	}
	return o.InventorySiteId, true
}

// HasInventorySiteId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasInventorySiteId() bool {
	if o != nil && !IsNil(o.InventorySiteId) {
		return true
	}

	return false
}

// SetInventorySiteId gets a reference to the given string and assigns it to the InventorySiteId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetInventorySiteId(v string) {
	o.InventorySiteId = &v
}

// GetInventorySiteLocationId returns the InventorySiteLocationId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetInventorySiteLocationId() string {
	if o == nil || IsNil(o.InventorySiteLocationId) {
		var ret string
		return ret
	}
	return *o.InventorySiteLocationId
}

// GetInventorySiteLocationIdOk returns a tuple with the InventorySiteLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetInventorySiteLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.InventorySiteLocationId) {
		return nil, false
	}
	return o.InventorySiteLocationId, true
}

// HasInventorySiteLocationId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasInventorySiteLocationId() bool {
	if o != nil && !IsNil(o.InventorySiteLocationId) {
		return true
	}

	return false
}

// SetInventorySiteLocationId gets a reference to the given string and assigns it to the InventorySiteLocationId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetInventorySiteLocationId(v string) {
	o.InventorySiteLocationId = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetLotNumber returns the LotNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetLotNumber() string {
	if o == nil || IsNil(o.LotNumber) {
		var ret string
		return ret
	}
	return *o.LotNumber
}

// GetLotNumberOk returns a tuple with the LotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetLotNumberOk() (*string, bool) {
	if o == nil || IsNil(o.LotNumber) {
		return nil, false
	}
	return o.LotNumber, true
}

// HasLotNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasLotNumber() bool {
	if o != nil && !IsNil(o.LotNumber) {
		return true
	}

	return false
}

// SetLotNumber gets a reference to the given string and assigns it to the LotNumber field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetLotNumber(v string) {
	o.LotNumber = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetDescription(v string) {
	o.Description = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetUnitOfMeasure() string {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetUnitOfMeasureOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given string and assigns it to the UnitOfMeasure field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetUnitOfMeasure(v string) {
	o.UnitOfMeasure = &v
}

// GetOverrideUnitOfMeasureSetId returns the OverrideUnitOfMeasureSetId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetOverrideUnitOfMeasureSetId() string {
	if o == nil || IsNil(o.OverrideUnitOfMeasureSetId) {
		var ret string
		return ret
	}
	return *o.OverrideUnitOfMeasureSetId
}

// GetOverrideUnitOfMeasureSetIdOk returns a tuple with the OverrideUnitOfMeasureSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetOverrideUnitOfMeasureSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideUnitOfMeasureSetId) {
		return nil, false
	}
	return o.OverrideUnitOfMeasureSetId, true
}

// HasOverrideUnitOfMeasureSetId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasOverrideUnitOfMeasureSetId() bool {
	if o != nil && !IsNil(o.OverrideUnitOfMeasureSetId) {
		return true
	}

	return false
}

// SetOverrideUnitOfMeasureSetId gets a reference to the given string and assigns it to the OverrideUnitOfMeasureSetId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetOverrideUnitOfMeasureSetId(v string) {
	o.OverrideUnitOfMeasureSetId = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetCost() string {
	if o == nil || IsNil(o.Cost) {
		var ret string
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetCostOk() (*string, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given string and assigns it to the Cost field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetCost(v string) {
	o.Cost = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetAmount(v string) {
	o.Amount = &v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetCustomerId() string {
	if o == nil || IsNil(o.CustomerId) {
		var ret string
		return ret
	}
	return *o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasCustomerId() bool {
	if o != nil && !IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given string and assigns it to the CustomerId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetCustomerId(v string) {
	o.CustomerId = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetClassId(v string) {
	o.ClassId = &v
}

// GetSalesTaxCodeId returns the SalesTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetSalesTaxCodeId() string {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		var ret string
		return ret
	}
	return *o.SalesTaxCodeId
}

// GetSalesTaxCodeIdOk returns a tuple with the SalesTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetSalesTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		return nil, false
	}
	return o.SalesTaxCodeId, true
}

// HasSalesTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasSalesTaxCodeId() bool {
	if o != nil && !IsNil(o.SalesTaxCodeId) {
		return true
	}

	return false
}

// SetSalesTaxCodeId gets a reference to the given string and assigns it to the SalesTaxCodeId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetSalesTaxCodeId(v string) {
	o.SalesTaxCodeId = &v
}

// GetBillingStatus returns the BillingStatus field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetBillingStatus() string {
	if o == nil || IsNil(o.BillingStatus) {
		var ret string
		return ret
	}
	return *o.BillingStatus
}

// GetBillingStatusOk returns a tuple with the BillingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetBillingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BillingStatus) {
		return nil, false
	}
	return o.BillingStatus, true
}

// HasBillingStatus returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasBillingStatus() bool {
	if o != nil && !IsNil(o.BillingStatus) {
		return true
	}

	return false
}

// SetBillingStatus gets a reference to the given string and assigns it to the BillingStatus field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetBillingStatus(v string) {
	o.BillingStatus = &v
}

// GetOverrideItemAccountId returns the OverrideItemAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetOverrideItemAccountId() string {
	if o == nil || IsNil(o.OverrideItemAccountId) {
		var ret string
		return ret
	}
	return *o.OverrideItemAccountId
}

// GetOverrideItemAccountIdOk returns a tuple with the OverrideItemAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetOverrideItemAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideItemAccountId) {
		return nil, false
	}
	return o.OverrideItemAccountId, true
}

// HasOverrideItemAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasOverrideItemAccountId() bool {
	if o != nil && !IsNil(o.OverrideItemAccountId) {
		return true
	}

	return false
}

// SetOverrideItemAccountId gets a reference to the given string and assigns it to the OverrideItemAccountId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetOverrideItemAccountId(v string) {
	o.OverrideItemAccountId = &v
}

// GetSalesRepresentativeId returns the SalesRepresentativeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetSalesRepresentativeId() string {
	if o == nil || IsNil(o.SalesRepresentativeId) {
		var ret string
		return ret
	}
	return *o.SalesRepresentativeId
}

// GetSalesRepresentativeIdOk returns a tuple with the SalesRepresentativeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) GetSalesRepresentativeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesRepresentativeId) {
		return nil, false
	}
	return o.SalesRepresentativeId, true
}

// HasSalesRepresentativeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) HasSalesRepresentativeId() bool {
	if o != nil && !IsNil(o.SalesRepresentativeId) {
		return true
	}

	return false
}

// SetSalesRepresentativeId gets a reference to the given string and assigns it to the SalesRepresentativeId field.
func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) SetSalesRepresentativeId(v string) {
	o.SalesRepresentativeId = &v
}

func (o QuickbooksDesktopBillsIdPostRequestItemLinesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopBillsIdPostRequestItemLinesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.InventorySiteId) {
		toSerialize["inventorySiteId"] = o.InventorySiteId
	}
	if !IsNil(o.InventorySiteLocationId) {
		toSerialize["inventorySiteLocationId"] = o.InventorySiteLocationId
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.LotNumber) {
		toSerialize["lotNumber"] = o.LotNumber
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	}
	if !IsNil(o.OverrideUnitOfMeasureSetId) {
		toSerialize["overrideUnitOfMeasureSetId"] = o.OverrideUnitOfMeasureSetId
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.CustomerId) {
		toSerialize["customerId"] = o.CustomerId
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.SalesTaxCodeId) {
		toSerialize["salesTaxCodeId"] = o.SalesTaxCodeId
	}
	if !IsNil(o.BillingStatus) {
		toSerialize["billingStatus"] = o.BillingStatus
	}
	if !IsNil(o.OverrideItemAccountId) {
		toSerialize["overrideItemAccountId"] = o.OverrideItemAccountId
	}
	if !IsNil(o.SalesRepresentativeId) {
		toSerialize["salesRepresentativeId"] = o.SalesRepresentativeId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopBillsIdPostRequestItemLinesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopBillsIdPostRequestItemLinesInner := _QuickbooksDesktopBillsIdPostRequestItemLinesInner{}

	err = json.Unmarshal(data, &varQuickbooksDesktopBillsIdPostRequestItemLinesInner)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopBillsIdPostRequestItemLinesInner(varQuickbooksDesktopBillsIdPostRequestItemLinesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "itemId")
		delete(additionalProperties, "inventorySiteId")
		delete(additionalProperties, "inventorySiteLocationId")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "lotNumber")
		delete(additionalProperties, "expirationDate")
		delete(additionalProperties, "description")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "unitOfMeasure")
		delete(additionalProperties, "overrideUnitOfMeasureSetId")
		delete(additionalProperties, "cost")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "customerId")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "salesTaxCodeId")
		delete(additionalProperties, "billingStatus")
		delete(additionalProperties, "overrideItemAccountId")
		delete(additionalProperties, "salesRepresentativeId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner struct {
	value *QuickbooksDesktopBillsIdPostRequestItemLinesInner
	isSet bool
}

func (v NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner) Get() *QuickbooksDesktopBillsIdPostRequestItemLinesInner {
	return v.value
}

func (v *NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner) Set(val *QuickbooksDesktopBillsIdPostRequestItemLinesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopBillsIdPostRequestItemLinesInner(val *QuickbooksDesktopBillsIdPostRequestItemLinesInner) *NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner {
	return &NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopBillsIdPostRequestItemLinesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


