/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
)

// checks if the QuickbooksDesktopEmployeesPostRequestEmployeePayroll type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopEmployeesPostRequestEmployeePayroll{}

// QuickbooksDesktopEmployeesPostRequestEmployeePayroll The employee's payroll information.
type QuickbooksDesktopEmployeesPostRequestEmployeePayroll struct {
	// How frequently this employee is paid (e.g., weekly, biweekly, monthly). This determines the schedule for generating paychecks.
	PayPeriod *string `json:"payPeriod,omitempty"`
	// The employee's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default.
	ClassId *string `json:"classId,omitempty"`
	// The employee's earnings.
	Earnings []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner `json:"earnings,omitempty"`
	// Indicates whether this employee is using time-tracking data to create paychecks.
	UseTimeDataToCreatePaychecks *string `json:"useTimeDataToCreatePaychecks,omitempty"`
	SickHours *QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours `json:"sickHours,omitempty"`
	VacationHours *QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours `json:"vacationHours,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopEmployeesPostRequestEmployeePayroll QuickbooksDesktopEmployeesPostRequestEmployeePayroll

// NewQuickbooksDesktopEmployeesPostRequestEmployeePayroll instantiates a new QuickbooksDesktopEmployeesPostRequestEmployeePayroll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopEmployeesPostRequestEmployeePayroll() *QuickbooksDesktopEmployeesPostRequestEmployeePayroll {
	this := QuickbooksDesktopEmployeesPostRequestEmployeePayroll{}
	return &this
}

// NewQuickbooksDesktopEmployeesPostRequestEmployeePayrollWithDefaults instantiates a new QuickbooksDesktopEmployeesPostRequestEmployeePayroll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopEmployeesPostRequestEmployeePayrollWithDefaults() *QuickbooksDesktopEmployeesPostRequestEmployeePayroll {
	this := QuickbooksDesktopEmployeesPostRequestEmployeePayroll{}
	return &this
}

// GetPayPeriod returns the PayPeriod field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetPayPeriod() string {
	if o == nil || IsNil(o.PayPeriod) {
		var ret string
		return ret
	}
	return *o.PayPeriod
}

// GetPayPeriodOk returns a tuple with the PayPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetPayPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.PayPeriod) {
		return nil, false
	}
	return o.PayPeriod, true
}

// HasPayPeriod returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) HasPayPeriod() bool {
	if o != nil && !IsNil(o.PayPeriod) {
		return true
	}

	return false
}

// SetPayPeriod gets a reference to the given string and assigns it to the PayPeriod field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) SetPayPeriod(v string) {
	o.PayPeriod = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) SetClassId(v string) {
	o.ClassId = &v
}

// GetEarnings returns the Earnings field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetEarnings() []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner {
	if o == nil || IsNil(o.Earnings) {
		var ret []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner
		return ret
	}
	return o.Earnings
}

// GetEarningsOk returns a tuple with the Earnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetEarningsOk() ([]QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner, bool) {
	if o == nil || IsNil(o.Earnings) {
		return nil, false
	}
	return o.Earnings, true
}

// HasEarnings returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) HasEarnings() bool {
	if o != nil && !IsNil(o.Earnings) {
		return true
	}

	return false
}

// SetEarnings gets a reference to the given []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner and assigns it to the Earnings field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) SetEarnings(v []QuickbooksDesktopEmployeesPostRequestEmployeePayrollEarningsInner) {
	o.Earnings = v
}

// GetUseTimeDataToCreatePaychecks returns the UseTimeDataToCreatePaychecks field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetUseTimeDataToCreatePaychecks() string {
	if o == nil || IsNil(o.UseTimeDataToCreatePaychecks) {
		var ret string
		return ret
	}
	return *o.UseTimeDataToCreatePaychecks
}

// GetUseTimeDataToCreatePaychecksOk returns a tuple with the UseTimeDataToCreatePaychecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetUseTimeDataToCreatePaychecksOk() (*string, bool) {
	if o == nil || IsNil(o.UseTimeDataToCreatePaychecks) {
		return nil, false
	}
	return o.UseTimeDataToCreatePaychecks, true
}

// HasUseTimeDataToCreatePaychecks returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) HasUseTimeDataToCreatePaychecks() bool {
	if o != nil && !IsNil(o.UseTimeDataToCreatePaychecks) {
		return true
	}

	return false
}

// SetUseTimeDataToCreatePaychecks gets a reference to the given string and assigns it to the UseTimeDataToCreatePaychecks field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) SetUseTimeDataToCreatePaychecks(v string) {
	o.UseTimeDataToCreatePaychecks = &v
}

// GetSickHours returns the SickHours field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetSickHours() QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours {
	if o == nil || IsNil(o.SickHours) {
		var ret QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours
		return ret
	}
	return *o.SickHours
}

// GetSickHoursOk returns a tuple with the SickHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetSickHoursOk() (*QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours, bool) {
	if o == nil || IsNil(o.SickHours) {
		return nil, false
	}
	return o.SickHours, true
}

// HasSickHours returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) HasSickHours() bool {
	if o != nil && !IsNil(o.SickHours) {
		return true
	}

	return false
}

// SetSickHours gets a reference to the given QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours and assigns it to the SickHours field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) SetSickHours(v QuickbooksDesktopEmployeesPostRequestEmployeePayrollSickHours) {
	o.SickHours = &v
}

// GetVacationHours returns the VacationHours field value if set, zero value otherwise.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetVacationHours() QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours {
	if o == nil || IsNil(o.VacationHours) {
		var ret QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours
		return ret
	}
	return *o.VacationHours
}

// GetVacationHoursOk returns a tuple with the VacationHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) GetVacationHoursOk() (*QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours, bool) {
	if o == nil || IsNil(o.VacationHours) {
		return nil, false
	}
	return o.VacationHours, true
}

// HasVacationHours returns a boolean if a field has been set.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) HasVacationHours() bool {
	if o != nil && !IsNil(o.VacationHours) {
		return true
	}

	return false
}

// SetVacationHours gets a reference to the given QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours and assigns it to the VacationHours field.
func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) SetVacationHours(v QuickbooksDesktopEmployeesPostRequestEmployeePayrollVacationHours) {
	o.VacationHours = &v
}

func (o QuickbooksDesktopEmployeesPostRequestEmployeePayroll) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopEmployeesPostRequestEmployeePayroll) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayPeriod) {
		toSerialize["payPeriod"] = o.PayPeriod
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.Earnings) {
		toSerialize["earnings"] = o.Earnings
	}
	if !IsNil(o.UseTimeDataToCreatePaychecks) {
		toSerialize["useTimeDataToCreatePaychecks"] = o.UseTimeDataToCreatePaychecks
	}
	if !IsNil(o.SickHours) {
		toSerialize["sickHours"] = o.SickHours
	}
	if !IsNil(o.VacationHours) {
		toSerialize["vacationHours"] = o.VacationHours
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) UnmarshalJSON(data []byte) (err error) {
	varQuickbooksDesktopEmployeesPostRequestEmployeePayroll := _QuickbooksDesktopEmployeesPostRequestEmployeePayroll{}

	err = json.Unmarshal(data, &varQuickbooksDesktopEmployeesPostRequestEmployeePayroll)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopEmployeesPostRequestEmployeePayroll(varQuickbooksDesktopEmployeesPostRequestEmployeePayroll)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "payPeriod")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "earnings")
		delete(additionalProperties, "useTimeDataToCreatePaychecks")
		delete(additionalProperties, "sickHours")
		delete(additionalProperties, "vacationHours")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll struct {
	value *QuickbooksDesktopEmployeesPostRequestEmployeePayroll
	isSet bool
}

func (v NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll) Get() *QuickbooksDesktopEmployeesPostRequestEmployeePayroll {
	return v.value
}

func (v *NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll) Set(val *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll(val *QuickbooksDesktopEmployeesPostRequestEmployeePayroll) *NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll {
	return &NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopEmployeesPostRequestEmployeePayroll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


