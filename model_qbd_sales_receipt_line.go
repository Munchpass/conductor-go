/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdSalesReceiptLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdSalesReceiptLine{}

// QbdSalesReceiptLine struct for QbdSalesReceiptLine
type QbdSalesReceiptLine struct {
	// The unique identifier assigned by QuickBooks to this sales receipt line. This ID is unique across all transaction line types.
	Id string `json:"id"`
	// The type of object. This value is always `\"qbd_sales_receipt_line\"`.
	ObjectType string `json:"objectType"`
	Item QbdSalesReceiptLineItem `json:"item"`
	// A description of this sales receipt line.
	Description string `json:"description"`
	// The quantity of the item associated with this sales receipt line. This field cannot be cleared.  **NOTE**: Do not use this field if the associated item is a discount item.
	Quantity float32 `json:"quantity"`
	// The unit-of-measure used for the `quantity` in this sales receipt line. Must be a valid unit within the item's available units of measure.
	UnitOfMeasure string `json:"unitOfMeasure"`
	OverrideUnitOfMeasureSet QbdSalesReceiptLineOverrideUnitOfMeasureSet `json:"overrideUnitOfMeasureSet"`
	// The price per unit for this sales receipt line. If both `rate` and `amount` are specified, `rate` will be ignored. If both `quantity` and `amount` are specified but not `rate`, QuickBooks will use them to calculate `rate`. Represented as a decimal string. This field cannot be cleared.
	Rate string `json:"rate"`
	// The price of this sales receipt line expressed as a percentage. Typically used for discount or markup items.
	RatePercent string `json:"ratePercent"`
	Class QbdSalesReceiptLineClass `json:"class"`
	// The monetary amount of this sales receipt line, represented as a decimal string. If both `quantity` and `rate` are specified but not `amount`, QuickBooks will use them to calculate `amount`. If `amount`, `rate`, and `quantity` are all unspecified, then QuickBooks will calculate `amount` based on a `quantity` of `1` and the suggested `rate`. This field cannot be cleared.
	Amount string `json:"amount"`
	InventorySite QbdSalesReceiptLineInventorySite `json:"inventorySite"`
	InventorySiteLocation QbdSalesReceiptLineInventorySiteLocation `json:"inventorySiteLocation"`
	// The serial number of the item associated with this sales receipt line. This is used for tracking individual units of serialized inventory items.
	SerialNumber string `json:"serialNumber"`
	// The lot number of the item associated with this sales receipt line. Used for tracking groups of inventory items that are purchased or manufactured together.
	LotNumber string `json:"lotNumber"`
	// The expiration date for the serial number or lot number of the item associated with this sales receipt line, in ISO 8601 format (YYYY-MM-DD). This is particularly relevant for perishable or time-sensitive inventory items. Note that this field is only supported on QuickBooks Desktop 2023 or later.
	ExpirationDate string `json:"expirationDate"`
	// The date on which the service for this sales receipt line was or will be performed, in ISO 8601 format (YYYY-MM-DD). This is particularly relevant for service items.
	ServiceDate string `json:"serviceDate"`
	SalesTaxCode QbdSalesReceiptLineSalesTaxCode `json:"salesTaxCode"`
	// A built-in custom field for additional information specific to this sales receipt line. Unlike the user-defined fields in the `customFields` array, this is a standard QuickBooks field that exists for all sales receipt lines for convenience. Developers often use this field for tracking information that doesn't fit into other standard QuickBooks fields. Hidden by default in the QuickBooks UI.
	OtherCustomField1 string `json:"otherCustomField1"`
	// A second built-in custom field for additional information specific to this sales receipt line. Unlike the user-defined fields in the `customFields` array, this is a standard QuickBooks field that exists for all sales receipt lines for convenience. Like `otherCustomField1`, developers often use this field for tracking information that doesn't fit into other standard QuickBooks fields. Hidden by default in the QuickBooks UI.
	OtherCustomField2 string `json:"otherCustomField2"`
	CreditCardTransaction QbdSalesReceiptLineCreditCardTransaction `json:"creditCardTransaction"`
	// The custom fields for the sales receipt line object, added as user-defined data extensions, not included in the standard QuickBooks object.
	CustomFields []QbdCustomField `json:"customFields"`
	AdditionalProperties map[string]interface{}
}

type _QbdSalesReceiptLine QbdSalesReceiptLine

// NewQbdSalesReceiptLine instantiates a new QbdSalesReceiptLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdSalesReceiptLine(id string, objectType string, item QbdSalesReceiptLineItem, description string, quantity float32, unitOfMeasure string, overrideUnitOfMeasureSet QbdSalesReceiptLineOverrideUnitOfMeasureSet, rate string, ratePercent string, class QbdSalesReceiptLineClass, amount string, inventorySite QbdSalesReceiptLineInventorySite, inventorySiteLocation QbdSalesReceiptLineInventorySiteLocation, serialNumber string, lotNumber string, expirationDate string, serviceDate string, salesTaxCode QbdSalesReceiptLineSalesTaxCode, otherCustomField1 string, otherCustomField2 string, creditCardTransaction QbdSalesReceiptLineCreditCardTransaction, customFields []QbdCustomField) *QbdSalesReceiptLine {
	this := QbdSalesReceiptLine{}
	this.Id = id
	this.ObjectType = objectType
	this.Item = item
	this.Description = description
	this.Quantity = quantity
	this.UnitOfMeasure = unitOfMeasure
	this.OverrideUnitOfMeasureSet = overrideUnitOfMeasureSet
	this.Rate = rate
	this.RatePercent = ratePercent
	this.Class = class
	this.Amount = amount
	this.InventorySite = inventorySite
	this.InventorySiteLocation = inventorySiteLocation
	this.SerialNumber = serialNumber
	this.LotNumber = lotNumber
	this.ExpirationDate = expirationDate
	this.ServiceDate = serviceDate
	this.SalesTaxCode = salesTaxCode
	this.OtherCustomField1 = otherCustomField1
	this.OtherCustomField2 = otherCustomField2
	this.CreditCardTransaction = creditCardTransaction
	this.CustomFields = customFields
	return &this
}

// NewQbdSalesReceiptLineWithDefaults instantiates a new QbdSalesReceiptLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdSalesReceiptLineWithDefaults() *QbdSalesReceiptLine {
	this := QbdSalesReceiptLine{}
	return &this
}

// GetId returns the Id field value
func (o *QbdSalesReceiptLine) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QbdSalesReceiptLine) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *QbdSalesReceiptLine) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *QbdSalesReceiptLine) SetObjectType(v string) {
	o.ObjectType = v
}

// GetItem returns the Item field value
func (o *QbdSalesReceiptLine) GetItem() QbdSalesReceiptLineItem {
	if o == nil {
		var ret QbdSalesReceiptLineItem
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetItemOk() (*QbdSalesReceiptLineItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *QbdSalesReceiptLine) SetItem(v QbdSalesReceiptLineItem) {
	o.Item = v
}

// GetDescription returns the Description field value
func (o *QbdSalesReceiptLine) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *QbdSalesReceiptLine) SetDescription(v string) {
	o.Description = v
}

// GetQuantity returns the Quantity field value
func (o *QbdSalesReceiptLine) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *QbdSalesReceiptLine) SetQuantity(v float32) {
	o.Quantity = v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value
func (o *QbdSalesReceiptLine) GetUnitOfMeasure() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetUnitOfMeasureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitOfMeasure, true
}

// SetUnitOfMeasure sets field value
func (o *QbdSalesReceiptLine) SetUnitOfMeasure(v string) {
	o.UnitOfMeasure = v
}

// GetOverrideUnitOfMeasureSet returns the OverrideUnitOfMeasureSet field value
func (o *QbdSalesReceiptLine) GetOverrideUnitOfMeasureSet() QbdSalesReceiptLineOverrideUnitOfMeasureSet {
	if o == nil {
		var ret QbdSalesReceiptLineOverrideUnitOfMeasureSet
		return ret
	}

	return o.OverrideUnitOfMeasureSet
}

// GetOverrideUnitOfMeasureSetOk returns a tuple with the OverrideUnitOfMeasureSet field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetOverrideUnitOfMeasureSetOk() (*QbdSalesReceiptLineOverrideUnitOfMeasureSet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OverrideUnitOfMeasureSet, true
}

// SetOverrideUnitOfMeasureSet sets field value
func (o *QbdSalesReceiptLine) SetOverrideUnitOfMeasureSet(v QbdSalesReceiptLineOverrideUnitOfMeasureSet) {
	o.OverrideUnitOfMeasureSet = v
}

// GetRate returns the Rate field value
func (o *QbdSalesReceiptLine) GetRate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *QbdSalesReceiptLine) SetRate(v string) {
	o.Rate = v
}

// GetRatePercent returns the RatePercent field value
func (o *QbdSalesReceiptLine) GetRatePercent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RatePercent
}

// GetRatePercentOk returns a tuple with the RatePercent field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetRatePercentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RatePercent, true
}

// SetRatePercent sets field value
func (o *QbdSalesReceiptLine) SetRatePercent(v string) {
	o.RatePercent = v
}

// GetClass returns the Class field value
func (o *QbdSalesReceiptLine) GetClass() QbdSalesReceiptLineClass {
	if o == nil {
		var ret QbdSalesReceiptLineClass
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetClassOk() (*QbdSalesReceiptLineClass, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *QbdSalesReceiptLine) SetClass(v QbdSalesReceiptLineClass) {
	o.Class = v
}

// GetAmount returns the Amount field value
func (o *QbdSalesReceiptLine) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *QbdSalesReceiptLine) SetAmount(v string) {
	o.Amount = v
}

// GetInventorySite returns the InventorySite field value
func (o *QbdSalesReceiptLine) GetInventorySite() QbdSalesReceiptLineInventorySite {
	if o == nil {
		var ret QbdSalesReceiptLineInventorySite
		return ret
	}

	return o.InventorySite
}

// GetInventorySiteOk returns a tuple with the InventorySite field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetInventorySiteOk() (*QbdSalesReceiptLineInventorySite, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InventorySite, true
}

// SetInventorySite sets field value
func (o *QbdSalesReceiptLine) SetInventorySite(v QbdSalesReceiptLineInventorySite) {
	o.InventorySite = v
}

// GetInventorySiteLocation returns the InventorySiteLocation field value
func (o *QbdSalesReceiptLine) GetInventorySiteLocation() QbdSalesReceiptLineInventorySiteLocation {
	if o == nil {
		var ret QbdSalesReceiptLineInventorySiteLocation
		return ret
	}

	return o.InventorySiteLocation
}

// GetInventorySiteLocationOk returns a tuple with the InventorySiteLocation field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetInventorySiteLocationOk() (*QbdSalesReceiptLineInventorySiteLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InventorySiteLocation, true
}

// SetInventorySiteLocation sets field value
func (o *QbdSalesReceiptLine) SetInventorySiteLocation(v QbdSalesReceiptLineInventorySiteLocation) {
	o.InventorySiteLocation = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *QbdSalesReceiptLine) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *QbdSalesReceiptLine) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetLotNumber returns the LotNumber field value
func (o *QbdSalesReceiptLine) GetLotNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LotNumber
}

// GetLotNumberOk returns a tuple with the LotNumber field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetLotNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LotNumber, true
}

// SetLotNumber sets field value
func (o *QbdSalesReceiptLine) SetLotNumber(v string) {
	o.LotNumber = v
}

// GetExpirationDate returns the ExpirationDate field value
func (o *QbdSalesReceiptLine) GetExpirationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationDate, true
}

// SetExpirationDate sets field value
func (o *QbdSalesReceiptLine) SetExpirationDate(v string) {
	o.ExpirationDate = v
}

// GetServiceDate returns the ServiceDate field value
func (o *QbdSalesReceiptLine) GetServiceDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceDate
}

// GetServiceDateOk returns a tuple with the ServiceDate field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetServiceDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceDate, true
}

// SetServiceDate sets field value
func (o *QbdSalesReceiptLine) SetServiceDate(v string) {
	o.ServiceDate = v
}

// GetSalesTaxCode returns the SalesTaxCode field value
func (o *QbdSalesReceiptLine) GetSalesTaxCode() QbdSalesReceiptLineSalesTaxCode {
	if o == nil {
		var ret QbdSalesReceiptLineSalesTaxCode
		return ret
	}

	return o.SalesTaxCode
}

// GetSalesTaxCodeOk returns a tuple with the SalesTaxCode field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetSalesTaxCodeOk() (*QbdSalesReceiptLineSalesTaxCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesTaxCode, true
}

// SetSalesTaxCode sets field value
func (o *QbdSalesReceiptLine) SetSalesTaxCode(v QbdSalesReceiptLineSalesTaxCode) {
	o.SalesTaxCode = v
}

// GetOtherCustomField1 returns the OtherCustomField1 field value
func (o *QbdSalesReceiptLine) GetOtherCustomField1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OtherCustomField1
}

// GetOtherCustomField1Ok returns a tuple with the OtherCustomField1 field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetOtherCustomField1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OtherCustomField1, true
}

// SetOtherCustomField1 sets field value
func (o *QbdSalesReceiptLine) SetOtherCustomField1(v string) {
	o.OtherCustomField1 = v
}

// GetOtherCustomField2 returns the OtherCustomField2 field value
func (o *QbdSalesReceiptLine) GetOtherCustomField2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OtherCustomField2
}

// GetOtherCustomField2Ok returns a tuple with the OtherCustomField2 field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetOtherCustomField2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OtherCustomField2, true
}

// SetOtherCustomField2 sets field value
func (o *QbdSalesReceiptLine) SetOtherCustomField2(v string) {
	o.OtherCustomField2 = v
}

// GetCreditCardTransaction returns the CreditCardTransaction field value
func (o *QbdSalesReceiptLine) GetCreditCardTransaction() QbdSalesReceiptLineCreditCardTransaction {
	if o == nil {
		var ret QbdSalesReceiptLineCreditCardTransaction
		return ret
	}

	return o.CreditCardTransaction
}

// GetCreditCardTransactionOk returns a tuple with the CreditCardTransaction field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetCreditCardTransactionOk() (*QbdSalesReceiptLineCreditCardTransaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditCardTransaction, true
}

// SetCreditCardTransaction sets field value
func (o *QbdSalesReceiptLine) SetCreditCardTransaction(v QbdSalesReceiptLineCreditCardTransaction) {
	o.CreditCardTransaction = v
}

// GetCustomFields returns the CustomFields field value
func (o *QbdSalesReceiptLine) GetCustomFields() []QbdCustomField {
	if o == nil {
		var ret []QbdCustomField
		return ret
	}

	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value
// and a boolean to check if the value has been set.
func (o *QbdSalesReceiptLine) GetCustomFieldsOk() ([]QbdCustomField, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// SetCustomFields sets field value
func (o *QbdSalesReceiptLine) SetCustomFields(v []QbdCustomField) {
	o.CustomFields = v
}

func (o QbdSalesReceiptLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdSalesReceiptLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["objectType"] = o.ObjectType
	toSerialize["item"] = o.Item
	toSerialize["description"] = o.Description
	toSerialize["quantity"] = o.Quantity
	toSerialize["unitOfMeasure"] = o.UnitOfMeasure
	toSerialize["overrideUnitOfMeasureSet"] = o.OverrideUnitOfMeasureSet
	toSerialize["rate"] = o.Rate
	toSerialize["ratePercent"] = o.RatePercent
	toSerialize["class"] = o.Class
	toSerialize["amount"] = o.Amount
	toSerialize["inventorySite"] = o.InventorySite
	toSerialize["inventorySiteLocation"] = o.InventorySiteLocation
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["lotNumber"] = o.LotNumber
	toSerialize["expirationDate"] = o.ExpirationDate
	toSerialize["serviceDate"] = o.ServiceDate
	toSerialize["salesTaxCode"] = o.SalesTaxCode
	toSerialize["otherCustomField1"] = o.OtherCustomField1
	toSerialize["otherCustomField2"] = o.OtherCustomField2
	toSerialize["creditCardTransaction"] = o.CreditCardTransaction
	toSerialize["customFields"] = o.CustomFields

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdSalesReceiptLine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"objectType",
		"item",
		"description",
		"quantity",
		"unitOfMeasure",
		"overrideUnitOfMeasureSet",
		"rate",
		"ratePercent",
		"class",
		"amount",
		"inventorySite",
		"inventorySiteLocation",
		"serialNumber",
		"lotNumber",
		"expirationDate",
		"serviceDate",
		"salesTaxCode",
		"otherCustomField1",
		"otherCustomField2",
		"creditCardTransaction",
		"customFields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdSalesReceiptLine := _QbdSalesReceiptLine{}

	err = json.Unmarshal(data, &varQbdSalesReceiptLine)

	if err != nil {
		return err
	}

	*o = QbdSalesReceiptLine(varQbdSalesReceiptLine)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "objectType")
		delete(additionalProperties, "item")
		delete(additionalProperties, "description")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "unitOfMeasure")
		delete(additionalProperties, "overrideUnitOfMeasureSet")
		delete(additionalProperties, "rate")
		delete(additionalProperties, "ratePercent")
		delete(additionalProperties, "class")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "inventorySite")
		delete(additionalProperties, "inventorySiteLocation")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "lotNumber")
		delete(additionalProperties, "expirationDate")
		delete(additionalProperties, "serviceDate")
		delete(additionalProperties, "salesTaxCode")
		delete(additionalProperties, "otherCustomField1")
		delete(additionalProperties, "otherCustomField2")
		delete(additionalProperties, "creditCardTransaction")
		delete(additionalProperties, "customFields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdSalesReceiptLine struct {
	value *QbdSalesReceiptLine
	isSet bool
}

func (v NullableQbdSalesReceiptLine) Get() *QbdSalesReceiptLine {
	return v.value
}

func (v *NullableQbdSalesReceiptLine) Set(val *QbdSalesReceiptLine) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdSalesReceiptLine) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdSalesReceiptLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdSalesReceiptLine(val *QbdSalesReceiptLine) *NullableQbdSalesReceiptLine {
	return &NullableQbdSalesReceiptLine{value: val, isSet: true}
}

func (v NullableQbdSalesReceiptLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdSalesReceiptLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


