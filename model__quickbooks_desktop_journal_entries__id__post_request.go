/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopJournalEntriesIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopJournalEntriesIdPostRequest{}

// QuickbooksDesktopJournalEntriesIdPostRequest struct for QuickbooksDesktopJournalEntriesIdPostRequest
type QuickbooksDesktopJournalEntriesIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the journal entry object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The date of this journal entry, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate *string `json:"transactionDate,omitempty"`
	// The case-sensitive user-defined reference number for this journal entry, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user.
	RefNumber *string `json:"refNumber,omitempty"`
	// Indicates whether this journal entry is an adjustment entry. When `true`, QuickBooks retains the original entry information to maintain an audit trail of the adjustments.
	IsAdjustment *bool `json:"isAdjustment,omitempty"`
	// Indicates whether the amounts in this journal entry were entered in the company's home currency rather than a foreign currency. When `true`, amounts are in the home currency regardless of the `currency` field.
	AreAmountsEnteredInHomeCurrency *bool `json:"areAmountsEnteredInHomeCurrency,omitempty"`
	// The journal entry's currency. For built-in currencies, the name and code are standard international values. For user-defined currencies, all values are editable.
	CurrencyId *string `json:"currencyId,omitempty"`
	// The market exchange rate between this journal entry's currency and the home currency in QuickBooks at the time of this transaction. Represented as a decimal value (e.g., 1.2345 for 1 EUR = 1.2345 USD if USD is the home currency).
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`
	// The journal entry's credit and debit lines.  **IMPORTANT**: When updating journal entries, you must include ALL existing journal lines (both credit and debit) in your update request, even if you only want to modify a single line. QuickBooks will automatically delete any existing lines that are not included in the update request, which is why all lines must be provided in a single array when updating.
	Lines []QuickbooksDesktopJournalEntriesIdPostRequestLinesInner `json:"lines,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopJournalEntriesIdPostRequest QuickbooksDesktopJournalEntriesIdPostRequest

// NewQuickbooksDesktopJournalEntriesIdPostRequest instantiates a new QuickbooksDesktopJournalEntriesIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopJournalEntriesIdPostRequest(revisionNumber string) *QuickbooksDesktopJournalEntriesIdPostRequest {
	this := QuickbooksDesktopJournalEntriesIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopJournalEntriesIdPostRequestWithDefaults instantiates a new QuickbooksDesktopJournalEntriesIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopJournalEntriesIdPostRequestWithDefaults() *QuickbooksDesktopJournalEntriesIdPostRequest {
	this := QuickbooksDesktopJournalEntriesIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetRefNumber returns the RefNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetRefNumber() string {
	if o == nil || IsNil(o.RefNumber) {
		var ret string
		return ret
	}
	return *o.RefNumber
}

// GetRefNumberOk returns a tuple with the RefNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetRefNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RefNumber) {
		return nil, false
	}
	return o.RefNumber, true
}

// HasRefNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) HasRefNumber() bool {
	if o != nil && !IsNil(o.RefNumber) {
		return true
	}

	return false
}

// SetRefNumber gets a reference to the given string and assigns it to the RefNumber field.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) SetRefNumber(v string) {
	o.RefNumber = &v
}

// GetIsAdjustment returns the IsAdjustment field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetIsAdjustment() bool {
	if o == nil || IsNil(o.IsAdjustment) {
		var ret bool
		return ret
	}
	return *o.IsAdjustment
}

// GetIsAdjustmentOk returns a tuple with the IsAdjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetIsAdjustmentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdjustment) {
		return nil, false
	}
	return o.IsAdjustment, true
}

// HasIsAdjustment returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) HasIsAdjustment() bool {
	if o != nil && !IsNil(o.IsAdjustment) {
		return true
	}

	return false
}

// SetIsAdjustment gets a reference to the given bool and assigns it to the IsAdjustment field.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) SetIsAdjustment(v bool) {
	o.IsAdjustment = &v
}

// GetAreAmountsEnteredInHomeCurrency returns the AreAmountsEnteredInHomeCurrency field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetAreAmountsEnteredInHomeCurrency() bool {
	if o == nil || IsNil(o.AreAmountsEnteredInHomeCurrency) {
		var ret bool
		return ret
	}
	return *o.AreAmountsEnteredInHomeCurrency
}

// GetAreAmountsEnteredInHomeCurrencyOk returns a tuple with the AreAmountsEnteredInHomeCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetAreAmountsEnteredInHomeCurrencyOk() (*bool, bool) {
	if o == nil || IsNil(o.AreAmountsEnteredInHomeCurrency) {
		return nil, false
	}
	return o.AreAmountsEnteredInHomeCurrency, true
}

// HasAreAmountsEnteredInHomeCurrency returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) HasAreAmountsEnteredInHomeCurrency() bool {
	if o != nil && !IsNil(o.AreAmountsEnteredInHomeCurrency) {
		return true
	}

	return false
}

// SetAreAmountsEnteredInHomeCurrency gets a reference to the given bool and assigns it to the AreAmountsEnteredInHomeCurrency field.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) SetAreAmountsEnteredInHomeCurrency(v bool) {
	o.AreAmountsEnteredInHomeCurrency = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId) {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetCurrencyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetExchangeRate() float32 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret float32
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetExchangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float32 and assigns it to the ExchangeRate field.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) SetExchangeRate(v float32) {
	o.ExchangeRate = &v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetLines() []QuickbooksDesktopJournalEntriesIdPostRequestLinesInner {
	if o == nil || IsNil(o.Lines) {
		var ret []QuickbooksDesktopJournalEntriesIdPostRequestLinesInner
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) GetLinesOk() ([]QuickbooksDesktopJournalEntriesIdPostRequestLinesInner, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []QuickbooksDesktopJournalEntriesIdPostRequestLinesInner and assigns it to the Lines field.
func (o *QuickbooksDesktopJournalEntriesIdPostRequest) SetLines(v []QuickbooksDesktopJournalEntriesIdPostRequestLinesInner) {
	o.Lines = v
}

func (o QuickbooksDesktopJournalEntriesIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopJournalEntriesIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if !IsNil(o.RefNumber) {
		toSerialize["refNumber"] = o.RefNumber
	}
	if !IsNil(o.IsAdjustment) {
		toSerialize["isAdjustment"] = o.IsAdjustment
	}
	if !IsNil(o.AreAmountsEnteredInHomeCurrency) {
		toSerialize["areAmountsEnteredInHomeCurrency"] = o.AreAmountsEnteredInHomeCurrency
	}
	if !IsNil(o.CurrencyId) {
		toSerialize["currencyId"] = o.CurrencyId
	}
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopJournalEntriesIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopJournalEntriesIdPostRequest := _QuickbooksDesktopJournalEntriesIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopJournalEntriesIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopJournalEntriesIdPostRequest(varQuickbooksDesktopJournalEntriesIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "refNumber")
		delete(additionalProperties, "isAdjustment")
		delete(additionalProperties, "areAmountsEnteredInHomeCurrency")
		delete(additionalProperties, "currencyId")
		delete(additionalProperties, "exchangeRate")
		delete(additionalProperties, "lines")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopJournalEntriesIdPostRequest struct {
	value *QuickbooksDesktopJournalEntriesIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopJournalEntriesIdPostRequest) Get() *QuickbooksDesktopJournalEntriesIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopJournalEntriesIdPostRequest) Set(val *QuickbooksDesktopJournalEntriesIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopJournalEntriesIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopJournalEntriesIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopJournalEntriesIdPostRequest(val *QuickbooksDesktopJournalEntriesIdPostRequest) *NullableQuickbooksDesktopJournalEntriesIdPostRequest {
	return &NullableQuickbooksDesktopJournalEntriesIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopJournalEntriesIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopJournalEntriesIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


