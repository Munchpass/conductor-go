/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QbdPreferencesSalesTax - The sales-tax preferences for this company file. If sales tax is turned off in the user interface (that is, if \"No\" is selected for \"Do You Charge Sales Tax?\" in the sales tax preferences), then this field will be `null`.
type QbdPreferencesSalesTax struct {
	QbdSalesTaxPreferences *QbdSalesTaxPreferences
}

// QbdSalesTaxPreferencesAsQbdPreferencesSalesTax is a convenience function that returns QbdSalesTaxPreferences wrapped in QbdPreferencesSalesTax
func QbdSalesTaxPreferencesAsQbdPreferencesSalesTax(v *QbdSalesTaxPreferences) QbdPreferencesSalesTax {
	return QbdPreferencesSalesTax{
		QbdSalesTaxPreferences: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QbdPreferencesSalesTax) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into QbdSalesTaxPreferences
	err = newStrictDecoder(data).Decode(&dst.QbdSalesTaxPreferences)
	if err == nil {
		jsonQbdSalesTaxPreferences, _ := json.Marshal(dst.QbdSalesTaxPreferences)
		if string(jsonQbdSalesTaxPreferences) == "{}" { // empty struct
			dst.QbdSalesTaxPreferences = nil
		} else {
			if err = validator.Validate(dst.QbdSalesTaxPreferences); err != nil {
				dst.QbdSalesTaxPreferences = nil
			} else {
				match++
			}
		}
	} else {
		dst.QbdSalesTaxPreferences = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QbdSalesTaxPreferences = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QbdPreferencesSalesTax)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QbdPreferencesSalesTax)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QbdPreferencesSalesTax) MarshalJSON() ([]byte, error) {
	if src.QbdSalesTaxPreferences != nil {
		return json.Marshal(&src.QbdSalesTaxPreferences)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QbdPreferencesSalesTax) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QbdSalesTaxPreferences != nil {
		return obj.QbdSalesTaxPreferences
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QbdPreferencesSalesTax) GetActualInstanceValue() (interface{}) {
	if obj.QbdSalesTaxPreferences != nil {
		return *obj.QbdSalesTaxPreferences
	}

	// all schemas are nil
	return nil
}

type NullableQbdPreferencesSalesTax struct {
	value *QbdPreferencesSalesTax
	isSet bool
}

func (v NullableQbdPreferencesSalesTax) Get() *QbdPreferencesSalesTax {
	return v.value
}

func (v *NullableQbdPreferencesSalesTax) Set(val *QbdPreferencesSalesTax) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdPreferencesSalesTax) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdPreferencesSalesTax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdPreferencesSalesTax(val *QbdPreferencesSalesTax) *NullableQbdPreferencesSalesTax {
	return &NullableQbdPreferencesSalesTax{value: val, isSet: true}
}

func (v NullableQbdPreferencesSalesTax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdPreferencesSalesTax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


