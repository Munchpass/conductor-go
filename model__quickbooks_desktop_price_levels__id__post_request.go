/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopPriceLevelsIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopPriceLevelsIdPostRequest{}

// QuickbooksDesktopPriceLevelsIdPostRequest struct for QuickbooksDesktopPriceLevelsIdPostRequest
type QuickbooksDesktopPriceLevelsIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the price level object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The case-insensitive unique name of this price level, unique across all price levels.  **NOTE**: Price levels do not have a `fullName` field because they are not hierarchical objects, which is why `name` is unique for them but not for objects that have parents.  Maximum length: 31 characters.
	Name *string `json:"name,omitempty"`
	// Indicates whether this price level is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// The fixed percentage adjustment applied to all items for this price level (instead of a per-item price level). Once you create the price level, you cannot change this.  When this price level is applied to a customer, it automatically adjusts the `rate` and `amount` columns for applicable line items in sales orders and invoices for that customer. This value supports both positive and negative values - a value of \"20\" increases prices by 20%, while \"-10\" decreases prices by 10%.
	FixedPercentage *string `json:"fixedPercentage,omitempty"`
	// The per-item price level configurations for this price level.
	PerItemPriceLevels []QuickbooksDesktopPriceLevelsPostRequestPerItemPriceLevelsInner `json:"perItemPriceLevels,omitempty"`
	// The price level's currency. For built-in currencies, the name and code are standard international values. For user-defined currencies, all values are editable.
	CurrencyId *string `json:"currencyId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopPriceLevelsIdPostRequest QuickbooksDesktopPriceLevelsIdPostRequest

// NewQuickbooksDesktopPriceLevelsIdPostRequest instantiates a new QuickbooksDesktopPriceLevelsIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopPriceLevelsIdPostRequest(revisionNumber string) *QuickbooksDesktopPriceLevelsIdPostRequest {
	this := QuickbooksDesktopPriceLevelsIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopPriceLevelsIdPostRequestWithDefaults instantiates a new QuickbooksDesktopPriceLevelsIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopPriceLevelsIdPostRequestWithDefaults() *QuickbooksDesktopPriceLevelsIdPostRequest {
	this := QuickbooksDesktopPriceLevelsIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) SetName(v string) {
	o.Name = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetFixedPercentage returns the FixedPercentage field value if set, zero value otherwise.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetFixedPercentage() string {
	if o == nil || IsNil(o.FixedPercentage) {
		var ret string
		return ret
	}
	return *o.FixedPercentage
}

// GetFixedPercentageOk returns a tuple with the FixedPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetFixedPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.FixedPercentage) {
		return nil, false
	}
	return o.FixedPercentage, true
}

// HasFixedPercentage returns a boolean if a field has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) HasFixedPercentage() bool {
	if o != nil && !IsNil(o.FixedPercentage) {
		return true
	}

	return false
}

// SetFixedPercentage gets a reference to the given string and assigns it to the FixedPercentage field.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) SetFixedPercentage(v string) {
	o.FixedPercentage = &v
}

// GetPerItemPriceLevels returns the PerItemPriceLevels field value if set, zero value otherwise.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetPerItemPriceLevels() []QuickbooksDesktopPriceLevelsPostRequestPerItemPriceLevelsInner {
	if o == nil || IsNil(o.PerItemPriceLevels) {
		var ret []QuickbooksDesktopPriceLevelsPostRequestPerItemPriceLevelsInner
		return ret
	}
	return o.PerItemPriceLevels
}

// GetPerItemPriceLevelsOk returns a tuple with the PerItemPriceLevels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetPerItemPriceLevelsOk() ([]QuickbooksDesktopPriceLevelsPostRequestPerItemPriceLevelsInner, bool) {
	if o == nil || IsNil(o.PerItemPriceLevels) {
		return nil, false
	}
	return o.PerItemPriceLevels, true
}

// HasPerItemPriceLevels returns a boolean if a field has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) HasPerItemPriceLevels() bool {
	if o != nil && !IsNil(o.PerItemPriceLevels) {
		return true
	}

	return false
}

// SetPerItemPriceLevels gets a reference to the given []QuickbooksDesktopPriceLevelsPostRequestPerItemPriceLevelsInner and assigns it to the PerItemPriceLevels field.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) SetPerItemPriceLevels(v []QuickbooksDesktopPriceLevelsPostRequestPerItemPriceLevelsInner) {
	o.PerItemPriceLevels = v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId) {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) GetCurrencyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyId) {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) HasCurrencyId() bool {
	if o != nil && !IsNil(o.CurrencyId) {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *QuickbooksDesktopPriceLevelsIdPostRequest) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

func (o QuickbooksDesktopPriceLevelsIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopPriceLevelsIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.FixedPercentage) {
		toSerialize["fixedPercentage"] = o.FixedPercentage
	}
	if !IsNil(o.PerItemPriceLevels) {
		toSerialize["perItemPriceLevels"] = o.PerItemPriceLevels
	}
	if !IsNil(o.CurrencyId) {
		toSerialize["currencyId"] = o.CurrencyId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopPriceLevelsIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopPriceLevelsIdPostRequest := _QuickbooksDesktopPriceLevelsIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopPriceLevelsIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopPriceLevelsIdPostRequest(varQuickbooksDesktopPriceLevelsIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "name")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "fixedPercentage")
		delete(additionalProperties, "perItemPriceLevels")
		delete(additionalProperties, "currencyId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopPriceLevelsIdPostRequest struct {
	value *QuickbooksDesktopPriceLevelsIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopPriceLevelsIdPostRequest) Get() *QuickbooksDesktopPriceLevelsIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopPriceLevelsIdPostRequest) Set(val *QuickbooksDesktopPriceLevelsIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopPriceLevelsIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopPriceLevelsIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopPriceLevelsIdPostRequest(val *QuickbooksDesktopPriceLevelsIdPostRequest) *NullableQuickbooksDesktopPriceLevelsIdPostRequest {
	return &NullableQuickbooksDesktopPriceLevelsIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopPriceLevelsIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopPriceLevelsIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


