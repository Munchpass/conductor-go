/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QbdLinkedTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdLinkedTransaction{}

// QbdLinkedTransaction struct for QbdLinkedTransaction
type QbdLinkedTransaction struct {
	// The unique identifier assigned by QuickBooks to this linked transaction. This ID is unique across all transaction types.
	Id string `json:"id"`
	// The type of object. This value is always `\"qbd_linked_transaction\"`.
	ObjectType string `json:"objectType"`
	// The type of transaction for this linked transaction.
	TransactionType string `json:"transactionType"`
	// The date of this linked transaction, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate string `json:"transactionDate"`
	// The case-sensitive user-defined reference number for this linked transaction, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user.
	RefNumber NullableString `json:"refNumber"`
	// Indicates the nature of the link between the transactions: `amount` denotes an amount-based link (e.g., an invoice linked to a payment), and `quantity` denotes a quantity-based link (e.g., an invoice created from a sales order based on the quantity of items received).
	LinkType NullableString `json:"linkType"`
	// The monetary amount of this linked transaction, represented as a decimal string.
	Amount NullableString `json:"amount"`
}

type _QbdLinkedTransaction QbdLinkedTransaction

// NewQbdLinkedTransaction instantiates a new QbdLinkedTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdLinkedTransaction(id string, objectType string, transactionType string, transactionDate string, refNumber NullableString, linkType NullableString, amount NullableString) *QbdLinkedTransaction {
	this := QbdLinkedTransaction{}
	this.Id = id
	this.ObjectType = objectType
	this.TransactionType = transactionType
	this.TransactionDate = transactionDate
	this.RefNumber = refNumber
	this.LinkType = linkType
	this.Amount = amount
	return &this
}

// NewQbdLinkedTransactionWithDefaults instantiates a new QbdLinkedTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdLinkedTransactionWithDefaults() *QbdLinkedTransaction {
	this := QbdLinkedTransaction{}
	return &this
}

// GetId returns the Id field value
func (o *QbdLinkedTransaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QbdLinkedTransaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QbdLinkedTransaction) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *QbdLinkedTransaction) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *QbdLinkedTransaction) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *QbdLinkedTransaction) SetObjectType(v string) {
	o.ObjectType = v
}

// GetTransactionType returns the TransactionType field value
func (o *QbdLinkedTransaction) GetTransactionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value
// and a boolean to check if the value has been set.
func (o *QbdLinkedTransaction) GetTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionType, true
}

// SetTransactionType sets field value
func (o *QbdLinkedTransaction) SetTransactionType(v string) {
	o.TransactionType = v
}

// GetTransactionDate returns the TransactionDate field value
func (o *QbdLinkedTransaction) GetTransactionDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value
// and a boolean to check if the value has been set.
func (o *QbdLinkedTransaction) GetTransactionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionDate, true
}

// SetTransactionDate sets field value
func (o *QbdLinkedTransaction) SetTransactionDate(v string) {
	o.TransactionDate = v
}

// GetRefNumber returns the RefNumber field value
// If the value is explicit nil, the zero value for string will be returned
func (o *QbdLinkedTransaction) GetRefNumber() string {
	if o == nil || o.RefNumber.Get() == nil {
		var ret string
		return ret
	}

	return *o.RefNumber.Get()
}

// GetRefNumberOk returns a tuple with the RefNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdLinkedTransaction) GetRefNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RefNumber.Get(), o.RefNumber.IsSet()
}

// SetRefNumber sets field value
func (o *QbdLinkedTransaction) SetRefNumber(v string) {
	o.RefNumber.Set(&v)
}

// GetLinkType returns the LinkType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *QbdLinkedTransaction) GetLinkType() string {
	if o == nil || o.LinkType.Get() == nil {
		var ret string
		return ret
	}

	return *o.LinkType.Get()
}

// GetLinkTypeOk returns a tuple with the LinkType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdLinkedTransaction) GetLinkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkType.Get(), o.LinkType.IsSet()
}

// SetLinkType sets field value
func (o *QbdLinkedTransaction) SetLinkType(v string) {
	o.LinkType.Set(&v)
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for string will be returned
func (o *QbdLinkedTransaction) GetAmount() string {
	if o == nil || o.Amount.Get() == nil {
		var ret string
		return ret
	}

	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QbdLinkedTransaction) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// SetAmount sets field value
func (o *QbdLinkedTransaction) SetAmount(v string) {
	o.Amount.Set(&v)
}

func (o QbdLinkedTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdLinkedTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["objectType"] = o.ObjectType
	toSerialize["transactionType"] = o.TransactionType
	toSerialize["transactionDate"] = o.TransactionDate
	toSerialize["refNumber"] = o.RefNumber.Get()
	toSerialize["linkType"] = o.LinkType.Get()
	toSerialize["amount"] = o.Amount.Get()
	return toSerialize, nil
}

func (o *QbdLinkedTransaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"objectType",
		"transactionType",
		"transactionDate",
		"refNumber",
		"linkType",
		"amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdLinkedTransaction := _QbdLinkedTransaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQbdLinkedTransaction)

	if err != nil {
		return err
	}

	*o = QbdLinkedTransaction(varQbdLinkedTransaction)

	return err
}

type NullableQbdLinkedTransaction struct {
	value *QbdLinkedTransaction
	isSet bool
}

func (v NullableQbdLinkedTransaction) Get() *QbdLinkedTransaction {
	return v.value
}

func (v *NullableQbdLinkedTransaction) Set(val *QbdLinkedTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdLinkedTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdLinkedTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdLinkedTransaction(val *QbdLinkedTransaction) *NullableQbdLinkedTransaction {
	return &NullableQbdLinkedTransaction{value: val, isSet: true}
}

func (v NullableQbdLinkedTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdLinkedTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


