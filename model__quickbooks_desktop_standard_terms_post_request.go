/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopStandardTermsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopStandardTermsPostRequest{}

// QuickbooksDesktopStandardTermsPostRequest struct for QuickbooksDesktopStandardTermsPostRequest
type QuickbooksDesktopStandardTermsPostRequest struct {
	// The case-insensitive unique name of this standard term, unique across all standard terms.  **NOTE**: Standard terms do not have a `fullName` field because they are not hierarchical objects, which is why `name` is unique for them but not for objects that have parents.  Maximum length: 31 characters.
	Name string `json:"name"`
	// Indicates whether this standard term is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// The number of days until payment is due.
	DueDays *float32 `json:"dueDays,omitempty"`
	// The number of days within which payment must be received to qualify for the discount specified by `discountPercentage`.
	DiscountDays *float32 `json:"discountDays,omitempty"`
	// The discount percentage applied to the payment if received within the number of days specified by `discountDays`. The value is between 0 and 100.
	DiscountPercentage *string `json:"discountPercentage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopStandardTermsPostRequest QuickbooksDesktopStandardTermsPostRequest

// NewQuickbooksDesktopStandardTermsPostRequest instantiates a new QuickbooksDesktopStandardTermsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopStandardTermsPostRequest(name string) *QuickbooksDesktopStandardTermsPostRequest {
	this := QuickbooksDesktopStandardTermsPostRequest{}
	this.Name = name
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// NewQuickbooksDesktopStandardTermsPostRequestWithDefaults instantiates a new QuickbooksDesktopStandardTermsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopStandardTermsPostRequestWithDefaults() *QuickbooksDesktopStandardTermsPostRequest {
	this := QuickbooksDesktopStandardTermsPostRequest{}
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// GetName returns the Name field value
func (o *QuickbooksDesktopStandardTermsPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QuickbooksDesktopStandardTermsPostRequest) SetName(v string) {
	o.Name = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopStandardTermsPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetDueDays returns the DueDays field value if set, zero value otherwise.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetDueDays() float32 {
	if o == nil || IsNil(o.DueDays) {
		var ret float32
		return ret
	}
	return *o.DueDays
}

// GetDueDaysOk returns a tuple with the DueDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetDueDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.DueDays) {
		return nil, false
	}
	return o.DueDays, true
}

// HasDueDays returns a boolean if a field has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) HasDueDays() bool {
	if o != nil && !IsNil(o.DueDays) {
		return true
	}

	return false
}

// SetDueDays gets a reference to the given float32 and assigns it to the DueDays field.
func (o *QuickbooksDesktopStandardTermsPostRequest) SetDueDays(v float32) {
	o.DueDays = &v
}

// GetDiscountDays returns the DiscountDays field value if set, zero value otherwise.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetDiscountDays() float32 {
	if o == nil || IsNil(o.DiscountDays) {
		var ret float32
		return ret
	}
	return *o.DiscountDays
}

// GetDiscountDaysOk returns a tuple with the DiscountDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetDiscountDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountDays) {
		return nil, false
	}
	return o.DiscountDays, true
}

// HasDiscountDays returns a boolean if a field has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) HasDiscountDays() bool {
	if o != nil && !IsNil(o.DiscountDays) {
		return true
	}

	return false
}

// SetDiscountDays gets a reference to the given float32 and assigns it to the DiscountDays field.
func (o *QuickbooksDesktopStandardTermsPostRequest) SetDiscountDays(v float32) {
	o.DiscountDays = &v
}

// GetDiscountPercentage returns the DiscountPercentage field value if set, zero value otherwise.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetDiscountPercentage() string {
	if o == nil || IsNil(o.DiscountPercentage) {
		var ret string
		return ret
	}
	return *o.DiscountPercentage
}

// GetDiscountPercentageOk returns a tuple with the DiscountPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) GetDiscountPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.DiscountPercentage) {
		return nil, false
	}
	return o.DiscountPercentage, true
}

// HasDiscountPercentage returns a boolean if a field has been set.
func (o *QuickbooksDesktopStandardTermsPostRequest) HasDiscountPercentage() bool {
	if o != nil && !IsNil(o.DiscountPercentage) {
		return true
	}

	return false
}

// SetDiscountPercentage gets a reference to the given string and assigns it to the DiscountPercentage field.
func (o *QuickbooksDesktopStandardTermsPostRequest) SetDiscountPercentage(v string) {
	o.DiscountPercentage = &v
}

func (o QuickbooksDesktopStandardTermsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopStandardTermsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.DueDays) {
		toSerialize["dueDays"] = o.DueDays
	}
	if !IsNil(o.DiscountDays) {
		toSerialize["discountDays"] = o.DiscountDays
	}
	if !IsNil(o.DiscountPercentage) {
		toSerialize["discountPercentage"] = o.DiscountPercentage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopStandardTermsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopStandardTermsPostRequest := _QuickbooksDesktopStandardTermsPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopStandardTermsPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopStandardTermsPostRequest(varQuickbooksDesktopStandardTermsPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "dueDays")
		delete(additionalProperties, "discountDays")
		delete(additionalProperties, "discountPercentage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopStandardTermsPostRequest struct {
	value *QuickbooksDesktopStandardTermsPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopStandardTermsPostRequest) Get() *QuickbooksDesktopStandardTermsPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopStandardTermsPostRequest) Set(val *QuickbooksDesktopStandardTermsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopStandardTermsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopStandardTermsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopStandardTermsPostRequest(val *QuickbooksDesktopStandardTermsPostRequest) *NullableQuickbooksDesktopStandardTermsPostRequest {
	return &NullableQuickbooksDesktopStandardTermsPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopStandardTermsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopStandardTermsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


