/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopPayrollWageItemsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopPayrollWageItemsPostRequest{}

// QuickbooksDesktopPayrollWageItemsPostRequest struct for QuickbooksDesktopPayrollWageItemsPostRequest
type QuickbooksDesktopPayrollWageItemsPostRequest struct {
	// The case-insensitive unique name of this payroll wage item, unique across all payroll wage items.  **NOTE**: Payroll wage items do not have a `fullName` field because they are not hierarchical objects, which is why `name` is unique for them but not for objects that have parents.  Maximum length: 31 characters.
	Name string `json:"name"`
	// Indicates whether this payroll wage item is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// Categorizes how this payroll wage item calculates pay - can be hourly (regular, overtime, sick, or vacation), salary (regular, sick, or vacation), bonus, or commission based.
	WageType string `json:"wageType"`
	// The expense account used to track wage expenses paid through this payroll wage item.
	ExpenseAccountId string `json:"expenseAccountId"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopPayrollWageItemsPostRequest QuickbooksDesktopPayrollWageItemsPostRequest

// NewQuickbooksDesktopPayrollWageItemsPostRequest instantiates a new QuickbooksDesktopPayrollWageItemsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopPayrollWageItemsPostRequest(name string, wageType string, expenseAccountId string) *QuickbooksDesktopPayrollWageItemsPostRequest {
	this := QuickbooksDesktopPayrollWageItemsPostRequest{}
	this.Name = name
	var isActive bool = true
	this.IsActive = &isActive
	this.WageType = wageType
	this.ExpenseAccountId = expenseAccountId
	return &this
}

// NewQuickbooksDesktopPayrollWageItemsPostRequestWithDefaults instantiates a new QuickbooksDesktopPayrollWageItemsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopPayrollWageItemsPostRequestWithDefaults() *QuickbooksDesktopPayrollWageItemsPostRequest {
	this := QuickbooksDesktopPayrollWageItemsPostRequest{}
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// GetName returns the Name field value
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) SetName(v string) {
	o.Name = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetWageType returns the WageType field value
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) GetWageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WageType
}

// GetWageTypeOk returns a tuple with the WageType field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) GetWageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WageType, true
}

// SetWageType sets field value
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) SetWageType(v string) {
	o.WageType = v
}

// GetExpenseAccountId returns the ExpenseAccountId field value
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) GetExpenseAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpenseAccountId
}

// GetExpenseAccountIdOk returns a tuple with the ExpenseAccountId field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) GetExpenseAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpenseAccountId, true
}

// SetExpenseAccountId sets field value
func (o *QuickbooksDesktopPayrollWageItemsPostRequest) SetExpenseAccountId(v string) {
	o.ExpenseAccountId = v
}

func (o QuickbooksDesktopPayrollWageItemsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopPayrollWageItemsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	toSerialize["wageType"] = o.WageType
	toSerialize["expenseAccountId"] = o.ExpenseAccountId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopPayrollWageItemsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"wageType",
		"expenseAccountId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopPayrollWageItemsPostRequest := _QuickbooksDesktopPayrollWageItemsPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopPayrollWageItemsPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopPayrollWageItemsPostRequest(varQuickbooksDesktopPayrollWageItemsPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "wageType")
		delete(additionalProperties, "expenseAccountId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopPayrollWageItemsPostRequest struct {
	value *QuickbooksDesktopPayrollWageItemsPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopPayrollWageItemsPostRequest) Get() *QuickbooksDesktopPayrollWageItemsPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopPayrollWageItemsPostRequest) Set(val *QuickbooksDesktopPayrollWageItemsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopPayrollWageItemsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopPayrollWageItemsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopPayrollWageItemsPostRequest(val *QuickbooksDesktopPayrollWageItemsPostRequest) *NullableQuickbooksDesktopPayrollWageItemsPostRequest {
	return &NullableQuickbooksDesktopPayrollWageItemsPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopPayrollWageItemsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopPayrollWageItemsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


