/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdFinanceChargePreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdFinanceChargePreferences{}

// QbdFinanceChargePreferences struct for QbdFinanceChargePreferences
type QbdFinanceChargePreferences struct {
	// The interest rate that QuickBooks will use to calculate finance charges for this company file. Default is `0`.
	AnnualInterestRate float32 `json:"annualInterestRate"`
	// The minimum finance charge that will be applied regardless of the amount overdue for this company file. Default is `0`.
	MinimumFinanceCharge float32 `json:"minimumFinanceCharge"`
	// The number of days before finance charges apply to customers' overdue invoices for this company file. Default is `0`.
	GracePeriod float32 `json:"gracePeriod"`
	FinanceChargeAccount QbdFinanceChargePreferencesFinanceChargeAccount `json:"financeChargeAccount"`
	// Indicates whether this company file is configured to assess finance charges for overdue invoices. Default is `false`. (Note that laws vary about whether a company can charge interest on overdue interest payments.)
	IsAssessingForOverdueCharges bool `json:"isAssessingForOverdueCharges"`
	// The date from which finance charges are calculated for this company file. Default is `due_date`.
	CalculateChargesFrom string `json:"calculateChargesFrom"`
	// Indicates whether this company file is configured to mark all newly created finance-charge invoices as \"to be printed\". Default is `false`. The user can still change this preference for each individual invoice.
	IsMarkedToBePrinted bool `json:"isMarkedToBePrinted"`
	AdditionalProperties map[string]interface{}
}

type _QbdFinanceChargePreferences QbdFinanceChargePreferences

// NewQbdFinanceChargePreferences instantiates a new QbdFinanceChargePreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdFinanceChargePreferences(annualInterestRate float32, minimumFinanceCharge float32, gracePeriod float32, financeChargeAccount QbdFinanceChargePreferencesFinanceChargeAccount, isAssessingForOverdueCharges bool, calculateChargesFrom string, isMarkedToBePrinted bool) *QbdFinanceChargePreferences {
	this := QbdFinanceChargePreferences{}
	this.AnnualInterestRate = annualInterestRate
	this.MinimumFinanceCharge = minimumFinanceCharge
	this.GracePeriod = gracePeriod
	this.FinanceChargeAccount = financeChargeAccount
	this.IsAssessingForOverdueCharges = isAssessingForOverdueCharges
	this.CalculateChargesFrom = calculateChargesFrom
	this.IsMarkedToBePrinted = isMarkedToBePrinted
	return &this
}

// NewQbdFinanceChargePreferencesWithDefaults instantiates a new QbdFinanceChargePreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdFinanceChargePreferencesWithDefaults() *QbdFinanceChargePreferences {
	this := QbdFinanceChargePreferences{}
	var annualInterestRate float32 = 0
	this.AnnualInterestRate = annualInterestRate
	var minimumFinanceCharge float32 = 0
	this.MinimumFinanceCharge = minimumFinanceCharge
	var gracePeriod float32 = 0
	this.GracePeriod = gracePeriod
	return &this
}

// GetAnnualInterestRate returns the AnnualInterestRate field value
func (o *QbdFinanceChargePreferences) GetAnnualInterestRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AnnualInterestRate
}

// GetAnnualInterestRateOk returns a tuple with the AnnualInterestRate field value
// and a boolean to check if the value has been set.
func (o *QbdFinanceChargePreferences) GetAnnualInterestRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnnualInterestRate, true
}

// SetAnnualInterestRate sets field value
func (o *QbdFinanceChargePreferences) SetAnnualInterestRate(v float32) {
	o.AnnualInterestRate = v
}

// GetMinimumFinanceCharge returns the MinimumFinanceCharge field value
func (o *QbdFinanceChargePreferences) GetMinimumFinanceCharge() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinimumFinanceCharge
}

// GetMinimumFinanceChargeOk returns a tuple with the MinimumFinanceCharge field value
// and a boolean to check if the value has been set.
func (o *QbdFinanceChargePreferences) GetMinimumFinanceChargeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumFinanceCharge, true
}

// SetMinimumFinanceCharge sets field value
func (o *QbdFinanceChargePreferences) SetMinimumFinanceCharge(v float32) {
	o.MinimumFinanceCharge = v
}

// GetGracePeriod returns the GracePeriod field value
func (o *QbdFinanceChargePreferences) GetGracePeriod() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.GracePeriod
}

// GetGracePeriodOk returns a tuple with the GracePeriod field value
// and a boolean to check if the value has been set.
func (o *QbdFinanceChargePreferences) GetGracePeriodOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GracePeriod, true
}

// SetGracePeriod sets field value
func (o *QbdFinanceChargePreferences) SetGracePeriod(v float32) {
	o.GracePeriod = v
}

// GetFinanceChargeAccount returns the FinanceChargeAccount field value
func (o *QbdFinanceChargePreferences) GetFinanceChargeAccount() QbdFinanceChargePreferencesFinanceChargeAccount {
	if o == nil {
		var ret QbdFinanceChargePreferencesFinanceChargeAccount
		return ret
	}

	return o.FinanceChargeAccount
}

// GetFinanceChargeAccountOk returns a tuple with the FinanceChargeAccount field value
// and a boolean to check if the value has been set.
func (o *QbdFinanceChargePreferences) GetFinanceChargeAccountOk() (*QbdFinanceChargePreferencesFinanceChargeAccount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinanceChargeAccount, true
}

// SetFinanceChargeAccount sets field value
func (o *QbdFinanceChargePreferences) SetFinanceChargeAccount(v QbdFinanceChargePreferencesFinanceChargeAccount) {
	o.FinanceChargeAccount = v
}

// GetIsAssessingForOverdueCharges returns the IsAssessingForOverdueCharges field value
func (o *QbdFinanceChargePreferences) GetIsAssessingForOverdueCharges() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAssessingForOverdueCharges
}

// GetIsAssessingForOverdueChargesOk returns a tuple with the IsAssessingForOverdueCharges field value
// and a boolean to check if the value has been set.
func (o *QbdFinanceChargePreferences) GetIsAssessingForOverdueChargesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAssessingForOverdueCharges, true
}

// SetIsAssessingForOverdueCharges sets field value
func (o *QbdFinanceChargePreferences) SetIsAssessingForOverdueCharges(v bool) {
	o.IsAssessingForOverdueCharges = v
}

// GetCalculateChargesFrom returns the CalculateChargesFrom field value
func (o *QbdFinanceChargePreferences) GetCalculateChargesFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CalculateChargesFrom
}

// GetCalculateChargesFromOk returns a tuple with the CalculateChargesFrom field value
// and a boolean to check if the value has been set.
func (o *QbdFinanceChargePreferences) GetCalculateChargesFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CalculateChargesFrom, true
}

// SetCalculateChargesFrom sets field value
func (o *QbdFinanceChargePreferences) SetCalculateChargesFrom(v string) {
	o.CalculateChargesFrom = v
}

// GetIsMarkedToBePrinted returns the IsMarkedToBePrinted field value
func (o *QbdFinanceChargePreferences) GetIsMarkedToBePrinted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMarkedToBePrinted
}

// GetIsMarkedToBePrintedOk returns a tuple with the IsMarkedToBePrinted field value
// and a boolean to check if the value has been set.
func (o *QbdFinanceChargePreferences) GetIsMarkedToBePrintedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMarkedToBePrinted, true
}

// SetIsMarkedToBePrinted sets field value
func (o *QbdFinanceChargePreferences) SetIsMarkedToBePrinted(v bool) {
	o.IsMarkedToBePrinted = v
}

func (o QbdFinanceChargePreferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdFinanceChargePreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["annualInterestRate"] = o.AnnualInterestRate
	toSerialize["minimumFinanceCharge"] = o.MinimumFinanceCharge
	toSerialize["gracePeriod"] = o.GracePeriod
	toSerialize["financeChargeAccount"] = o.FinanceChargeAccount
	toSerialize["isAssessingForOverdueCharges"] = o.IsAssessingForOverdueCharges
	toSerialize["calculateChargesFrom"] = o.CalculateChargesFrom
	toSerialize["isMarkedToBePrinted"] = o.IsMarkedToBePrinted

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdFinanceChargePreferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"annualInterestRate",
		"minimumFinanceCharge",
		"gracePeriod",
		"financeChargeAccount",
		"isAssessingForOverdueCharges",
		"calculateChargesFrom",
		"isMarkedToBePrinted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdFinanceChargePreferences := _QbdFinanceChargePreferences{}

	err = json.Unmarshal(data, &varQbdFinanceChargePreferences)

	if err != nil {
		return err
	}

	*o = QbdFinanceChargePreferences(varQbdFinanceChargePreferences)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "annualInterestRate")
		delete(additionalProperties, "minimumFinanceCharge")
		delete(additionalProperties, "gracePeriod")
		delete(additionalProperties, "financeChargeAccount")
		delete(additionalProperties, "isAssessingForOverdueCharges")
		delete(additionalProperties, "calculateChargesFrom")
		delete(additionalProperties, "isMarkedToBePrinted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdFinanceChargePreferences struct {
	value *QbdFinanceChargePreferences
	isSet bool
}

func (v NullableQbdFinanceChargePreferences) Get() *QbdFinanceChargePreferences {
	return v.value
}

func (v *NullableQbdFinanceChargePreferences) Set(val *QbdFinanceChargePreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdFinanceChargePreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdFinanceChargePreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdFinanceChargePreferences(val *QbdFinanceChargePreferences) *NullableQbdFinanceChargePreferences {
	return &NullableQbdFinanceChargePreferences{value: val, isSet: true}
}

func (v NullableQbdFinanceChargePreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdFinanceChargePreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


