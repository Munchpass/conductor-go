/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// QbdEmployeePayrollInfoVacationHours - The employee's vacation hours, including how vacation time is accrued and the total hours accrued.
type QbdEmployeePayrollInfoVacationHours struct {
	QbdVacationHours *QbdVacationHours
}

// QbdVacationHoursAsQbdEmployeePayrollInfoVacationHours is a convenience function that returns QbdVacationHours wrapped in QbdEmployeePayrollInfoVacationHours
func QbdVacationHoursAsQbdEmployeePayrollInfoVacationHours(v *QbdVacationHours) QbdEmployeePayrollInfoVacationHours {
	return QbdEmployeePayrollInfoVacationHours{
		QbdVacationHours: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *QbdEmployeePayrollInfoVacationHours) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into QbdVacationHours
	err = newStrictDecoder(data).Decode(&dst.QbdVacationHours)
	if err == nil {
		jsonQbdVacationHours, _ := json.Marshal(dst.QbdVacationHours)
		if string(jsonQbdVacationHours) == "{}" { // empty struct
			dst.QbdVacationHours = nil
		} else {
			if err = validator.Validate(dst.QbdVacationHours); err != nil {
				dst.QbdVacationHours = nil
			} else {
				match++
			}
		}
	} else {
		dst.QbdVacationHours = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.QbdVacationHours = nil

		return fmt.Errorf("data matches more than one schema in oneOf(QbdEmployeePayrollInfoVacationHours)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(QbdEmployeePayrollInfoVacationHours)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src QbdEmployeePayrollInfoVacationHours) MarshalJSON() ([]byte, error) {
	if src.QbdVacationHours != nil {
		return json.Marshal(&src.QbdVacationHours)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *QbdEmployeePayrollInfoVacationHours) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.QbdVacationHours != nil {
		return obj.QbdVacationHours
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj QbdEmployeePayrollInfoVacationHours) GetActualInstanceValue() (interface{}) {
	if obj.QbdVacationHours != nil {
		return *obj.QbdVacationHours
	}

	// all schemas are nil
	return nil
}

type NullableQbdEmployeePayrollInfoVacationHours struct {
	value *QbdEmployeePayrollInfoVacationHours
	isSet bool
}

func (v NullableQbdEmployeePayrollInfoVacationHours) Get() *QbdEmployeePayrollInfoVacationHours {
	return v.value
}

func (v *NullableQbdEmployeePayrollInfoVacationHours) Set(val *QbdEmployeePayrollInfoVacationHours) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdEmployeePayrollInfoVacationHours) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdEmployeePayrollInfoVacationHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdEmployeePayrollInfoVacationHours(val *QbdEmployeePayrollInfoVacationHours) *NullableQbdEmployeePayrollInfoVacationHours {
	return &NullableQbdEmployeePayrollInfoVacationHours{value: val, isSet: true}
}

func (v NullableQbdEmployeePayrollInfoVacationHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdEmployeePayrollInfoVacationHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


