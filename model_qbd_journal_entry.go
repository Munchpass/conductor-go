/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdJournalEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdJournalEntry{}

// QbdJournalEntry struct for QbdJournalEntry
type QbdJournalEntry struct {
	// The unique identifier assigned by QuickBooks to this journal entry. This ID is unique across all transaction types.
	Id string `json:"id"`
	// The type of object. This value is always `\"qbd_journal_entry\"`.
	ObjectType string `json:"objectType"`
	// The date and time when this journal entry was created, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). The time zone is the same as the user's time zone in QuickBooks.
	CreatedAt string `json:"createdAt"`
	// The date and time when this journal entry was last updated, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). The time zone is the same as the user's time zone in QuickBooks.
	UpdatedAt string `json:"updatedAt"`
	// The current QuickBooks-assigned revision number of this journal entry object, which changes each time the object is modified. When updating this object, you must provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The date of this journal entry, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate string `json:"transactionDate"`
	// The case-sensitive user-defined reference number for this journal entry, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user.
	RefNumber string `json:"refNumber"`
	// Indicates whether this journal entry is an adjustment entry. When `true`, QuickBooks retains the original entry information to maintain an audit trail of the adjustments.
	IsAdjustment bool `json:"isAdjustment"`
	// Indicates whether this journal entry is an adjustment made in the company's home currency for a transaction that was originally recorded in a foreign currency.
	IsHomeCurrencyAdjustment bool `json:"isHomeCurrencyAdjustment"`
	// Indicates whether the amounts in this journal entry were entered in the company's home currency rather than a foreign currency. When `true`, amounts are in the home currency regardless of the `currency` field.
	AreAmountsEnteredInHomeCurrency bool `json:"areAmountsEnteredInHomeCurrency"`
	Currency QbdJournalEntryCurrency `json:"currency"`
	// The market exchange rate between this journal entry's currency and the home currency in QuickBooks at the time of this transaction. Represented as a decimal value (e.g., 1.2345 for 1 EUR = 1.2345 USD if USD is the home currency).
	ExchangeRate float32 `json:"exchangeRate"`
	// A globally unique identifier (GUID) you, the developer, can provide for tracking this object in your external system. This field is immutable and can only be set during object creation.
	ExternalId string `json:"externalId"`
	// The journal entry's debit lines.
	DebitLines []QbdJournalDebitLine `json:"debitLines"`
	// The journal entry's credit lines.
	CreditLines []QbdJournalCreditLine `json:"creditLines"`
	// The custom fields for the journal entry object, added as user-defined data extensions, not included in the standard QuickBooks object.
	CustomFields []QbdCustomField `json:"customFields"`
	AdditionalProperties map[string]interface{}
}

type _QbdJournalEntry QbdJournalEntry

// NewQbdJournalEntry instantiates a new QbdJournalEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdJournalEntry(id string, objectType string, createdAt string, updatedAt string, revisionNumber string, transactionDate string, refNumber string, isAdjustment bool, isHomeCurrencyAdjustment bool, areAmountsEnteredInHomeCurrency bool, currency QbdJournalEntryCurrency, exchangeRate float32, externalId string, debitLines []QbdJournalDebitLine, creditLines []QbdJournalCreditLine, customFields []QbdCustomField) *QbdJournalEntry {
	this := QbdJournalEntry{}
	this.Id = id
	this.ObjectType = objectType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.RevisionNumber = revisionNumber
	this.TransactionDate = transactionDate
	this.RefNumber = refNumber
	this.IsAdjustment = isAdjustment
	this.IsHomeCurrencyAdjustment = isHomeCurrencyAdjustment
	this.AreAmountsEnteredInHomeCurrency = areAmountsEnteredInHomeCurrency
	this.Currency = currency
	this.ExchangeRate = exchangeRate
	this.ExternalId = externalId
	this.DebitLines = debitLines
	this.CreditLines = creditLines
	this.CustomFields = customFields
	return &this
}

// NewQbdJournalEntryWithDefaults instantiates a new QbdJournalEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdJournalEntryWithDefaults() *QbdJournalEntry {
	this := QbdJournalEntry{}
	return &this
}

// GetId returns the Id field value
func (o *QbdJournalEntry) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QbdJournalEntry) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *QbdJournalEntry) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *QbdJournalEntry) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *QbdJournalEntry) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *QbdJournalEntry) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *QbdJournalEntry) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *QbdJournalEntry) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QbdJournalEntry) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QbdJournalEntry) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetTransactionDate returns the TransactionDate field value
func (o *QbdJournalEntry) GetTransactionDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetTransactionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionDate, true
}

// SetTransactionDate sets field value
func (o *QbdJournalEntry) SetTransactionDate(v string) {
	o.TransactionDate = v
}

// GetRefNumber returns the RefNumber field value
func (o *QbdJournalEntry) GetRefNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefNumber
}

// GetRefNumberOk returns a tuple with the RefNumber field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetRefNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefNumber, true
}

// SetRefNumber sets field value
func (o *QbdJournalEntry) SetRefNumber(v string) {
	o.RefNumber = v
}

// GetIsAdjustment returns the IsAdjustment field value
func (o *QbdJournalEntry) GetIsAdjustment() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAdjustment
}

// GetIsAdjustmentOk returns a tuple with the IsAdjustment field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetIsAdjustmentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAdjustment, true
}

// SetIsAdjustment sets field value
func (o *QbdJournalEntry) SetIsAdjustment(v bool) {
	o.IsAdjustment = v
}

// GetIsHomeCurrencyAdjustment returns the IsHomeCurrencyAdjustment field value
func (o *QbdJournalEntry) GetIsHomeCurrencyAdjustment() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsHomeCurrencyAdjustment
}

// GetIsHomeCurrencyAdjustmentOk returns a tuple with the IsHomeCurrencyAdjustment field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetIsHomeCurrencyAdjustmentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsHomeCurrencyAdjustment, true
}

// SetIsHomeCurrencyAdjustment sets field value
func (o *QbdJournalEntry) SetIsHomeCurrencyAdjustment(v bool) {
	o.IsHomeCurrencyAdjustment = v
}

// GetAreAmountsEnteredInHomeCurrency returns the AreAmountsEnteredInHomeCurrency field value
func (o *QbdJournalEntry) GetAreAmountsEnteredInHomeCurrency() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AreAmountsEnteredInHomeCurrency
}

// GetAreAmountsEnteredInHomeCurrencyOk returns a tuple with the AreAmountsEnteredInHomeCurrency field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetAreAmountsEnteredInHomeCurrencyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AreAmountsEnteredInHomeCurrency, true
}

// SetAreAmountsEnteredInHomeCurrency sets field value
func (o *QbdJournalEntry) SetAreAmountsEnteredInHomeCurrency(v bool) {
	o.AreAmountsEnteredInHomeCurrency = v
}

// GetCurrency returns the Currency field value
func (o *QbdJournalEntry) GetCurrency() QbdJournalEntryCurrency {
	if o == nil {
		var ret QbdJournalEntryCurrency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetCurrencyOk() (*QbdJournalEntryCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *QbdJournalEntry) SetCurrency(v QbdJournalEntryCurrency) {
	o.Currency = v
}

// GetExchangeRate returns the ExchangeRate field value
func (o *QbdJournalEntry) GetExchangeRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetExchangeRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeRate, true
}

// SetExchangeRate sets field value
func (o *QbdJournalEntry) SetExchangeRate(v float32) {
	o.ExchangeRate = v
}

// GetExternalId returns the ExternalId field value
func (o *QbdJournalEntry) GetExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalId, true
}

// SetExternalId sets field value
func (o *QbdJournalEntry) SetExternalId(v string) {
	o.ExternalId = v
}

// GetDebitLines returns the DebitLines field value
func (o *QbdJournalEntry) GetDebitLines() []QbdJournalDebitLine {
	if o == nil {
		var ret []QbdJournalDebitLine
		return ret
	}

	return o.DebitLines
}

// GetDebitLinesOk returns a tuple with the DebitLines field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetDebitLinesOk() ([]QbdJournalDebitLine, bool) {
	if o == nil {
		return nil, false
	}
	return o.DebitLines, true
}

// SetDebitLines sets field value
func (o *QbdJournalEntry) SetDebitLines(v []QbdJournalDebitLine) {
	o.DebitLines = v
}

// GetCreditLines returns the CreditLines field value
func (o *QbdJournalEntry) GetCreditLines() []QbdJournalCreditLine {
	if o == nil {
		var ret []QbdJournalCreditLine
		return ret
	}

	return o.CreditLines
}

// GetCreditLinesOk returns a tuple with the CreditLines field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetCreditLinesOk() ([]QbdJournalCreditLine, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreditLines, true
}

// SetCreditLines sets field value
func (o *QbdJournalEntry) SetCreditLines(v []QbdJournalCreditLine) {
	o.CreditLines = v
}

// GetCustomFields returns the CustomFields field value
func (o *QbdJournalEntry) GetCustomFields() []QbdCustomField {
	if o == nil {
		var ret []QbdCustomField
		return ret
	}

	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value
// and a boolean to check if the value has been set.
func (o *QbdJournalEntry) GetCustomFieldsOk() ([]QbdCustomField, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// SetCustomFields sets field value
func (o *QbdJournalEntry) SetCustomFields(v []QbdCustomField) {
	o.CustomFields = v
}

func (o QbdJournalEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdJournalEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["objectType"] = o.ObjectType
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["revisionNumber"] = o.RevisionNumber
	toSerialize["transactionDate"] = o.TransactionDate
	toSerialize["refNumber"] = o.RefNumber
	toSerialize["isAdjustment"] = o.IsAdjustment
	toSerialize["isHomeCurrencyAdjustment"] = o.IsHomeCurrencyAdjustment
	toSerialize["areAmountsEnteredInHomeCurrency"] = o.AreAmountsEnteredInHomeCurrency
	toSerialize["currency"] = o.Currency
	toSerialize["exchangeRate"] = o.ExchangeRate
	toSerialize["externalId"] = o.ExternalId
	toSerialize["debitLines"] = o.DebitLines
	toSerialize["creditLines"] = o.CreditLines
	toSerialize["customFields"] = o.CustomFields

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdJournalEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"objectType",
		"createdAt",
		"updatedAt",
		"revisionNumber",
		"transactionDate",
		"refNumber",
		"isAdjustment",
		"isHomeCurrencyAdjustment",
		"areAmountsEnteredInHomeCurrency",
		"currency",
		"exchangeRate",
		"externalId",
		"debitLines",
		"creditLines",
		"customFields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdJournalEntry := _QbdJournalEntry{}

	err = json.Unmarshal(data, &varQbdJournalEntry)

	if err != nil {
		return err
	}

	*o = QbdJournalEntry(varQbdJournalEntry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "objectType")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "refNumber")
		delete(additionalProperties, "isAdjustment")
		delete(additionalProperties, "isHomeCurrencyAdjustment")
		delete(additionalProperties, "areAmountsEnteredInHomeCurrency")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "exchangeRate")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "debitLines")
		delete(additionalProperties, "creditLines")
		delete(additionalProperties, "customFields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdJournalEntry struct {
	value *QbdJournalEntry
	isSet bool
}

func (v NullableQbdJournalEntry) Get() *QbdJournalEntry {
	return v.value
}

func (v *NullableQbdJournalEntry) Set(val *QbdJournalEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdJournalEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdJournalEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdJournalEntry(val *QbdJournalEntry) *NullableQbdJournalEntry {
	return &NullableQbdJournalEntry{value: val, isSet: true}
}

func (v NullableQbdJournalEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdJournalEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


