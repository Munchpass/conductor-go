/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails{}

// QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails Details for non-inventory items that are both purchased and sold, such as reimbursable expenses or inventory items that are bought from vendors and sold to customers.  **IMPORTANT**: You must specify either `salesAndPurchaseDetails` or `salesOrPurchaseDetails` when creating a non-inventory item, but never both because an item cannot have both configurations.
type QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails struct {
	// The description of this item that appears on sales forms (e.g., invoices, sales receipts) when sold to customers.
	SalesDescription *string `json:"salesDescription,omitempty"`
	// The price at which this item is sold to customers, represented as a decimal string.
	SalesPrice *string `json:"salesPrice,omitempty"`
	// The income account used to track revenue from sales of this item.
	IncomeAccountId string `json:"incomeAccountId"`
	// The description of this item that appears on purchase forms (e.g., checks, bills, item receipts) when it is ordered or bought from vendors.
	PurchaseDescription *string `json:"purchaseDescription,omitempty"`
	// The cost at which this item is purchased from vendors, represented as a decimal string.
	PurchaseCost *string `json:"purchaseCost,omitempty"`
	// The tax code applied to purchases of this item. Applicable in regions where purchase taxes are used, such as Canada or the UK.
	PurchaseTaxCodeId *string `json:"purchaseTaxCodeId,omitempty"`
	// The expense account used to track costs from purchases of this item.
	ExpenseAccountId string `json:"expenseAccountId"`
	// The preferred vendor from whom this item is typically purchased.
	PreferredVendorId *string `json:"preferredVendorId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails

// NewQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails instantiates a new QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails(incomeAccountId string, expenseAccountId string) *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails {
	this := QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails{}
	this.IncomeAccountId = incomeAccountId
	this.ExpenseAccountId = expenseAccountId
	return &this
}

// NewQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetailsWithDefaults instantiates a new QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetailsWithDefaults() *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails {
	this := QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails{}
	return &this
}

// GetSalesDescription returns the SalesDescription field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetSalesDescription() string {
	if o == nil || IsNil(o.SalesDescription) {
		var ret string
		return ret
	}
	return *o.SalesDescription
}

// GetSalesDescriptionOk returns a tuple with the SalesDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetSalesDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SalesDescription) {
		return nil, false
	}
	return o.SalesDescription, true
}

// HasSalesDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) HasSalesDescription() bool {
	if o != nil && !IsNil(o.SalesDescription) {
		return true
	}

	return false
}

// SetSalesDescription gets a reference to the given string and assigns it to the SalesDescription field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) SetSalesDescription(v string) {
	o.SalesDescription = &v
}

// GetSalesPrice returns the SalesPrice field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetSalesPrice() string {
	if o == nil || IsNil(o.SalesPrice) {
		var ret string
		return ret
	}
	return *o.SalesPrice
}

// GetSalesPriceOk returns a tuple with the SalesPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetSalesPriceOk() (*string, bool) {
	if o == nil || IsNil(o.SalesPrice) {
		return nil, false
	}
	return o.SalesPrice, true
}

// HasSalesPrice returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) HasSalesPrice() bool {
	if o != nil && !IsNil(o.SalesPrice) {
		return true
	}

	return false
}

// SetSalesPrice gets a reference to the given string and assigns it to the SalesPrice field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) SetSalesPrice(v string) {
	o.SalesPrice = &v
}

// GetIncomeAccountId returns the IncomeAccountId field value
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetIncomeAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncomeAccountId
}

// GetIncomeAccountIdOk returns a tuple with the IncomeAccountId field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetIncomeAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncomeAccountId, true
}

// SetIncomeAccountId sets field value
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) SetIncomeAccountId(v string) {
	o.IncomeAccountId = v
}

// GetPurchaseDescription returns the PurchaseDescription field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetPurchaseDescription() string {
	if o == nil || IsNil(o.PurchaseDescription) {
		var ret string
		return ret
	}
	return *o.PurchaseDescription
}

// GetPurchaseDescriptionOk returns a tuple with the PurchaseDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetPurchaseDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseDescription) {
		return nil, false
	}
	return o.PurchaseDescription, true
}

// HasPurchaseDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) HasPurchaseDescription() bool {
	if o != nil && !IsNil(o.PurchaseDescription) {
		return true
	}

	return false
}

// SetPurchaseDescription gets a reference to the given string and assigns it to the PurchaseDescription field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) SetPurchaseDescription(v string) {
	o.PurchaseDescription = &v
}

// GetPurchaseCost returns the PurchaseCost field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetPurchaseCost() string {
	if o == nil || IsNil(o.PurchaseCost) {
		var ret string
		return ret
	}
	return *o.PurchaseCost
}

// GetPurchaseCostOk returns a tuple with the PurchaseCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetPurchaseCostOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseCost) {
		return nil, false
	}
	return o.PurchaseCost, true
}

// HasPurchaseCost returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) HasPurchaseCost() bool {
	if o != nil && !IsNil(o.PurchaseCost) {
		return true
	}

	return false
}

// SetPurchaseCost gets a reference to the given string and assigns it to the PurchaseCost field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) SetPurchaseCost(v string) {
	o.PurchaseCost = &v
}

// GetPurchaseTaxCodeId returns the PurchaseTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetPurchaseTaxCodeId() string {
	if o == nil || IsNil(o.PurchaseTaxCodeId) {
		var ret string
		return ret
	}
	return *o.PurchaseTaxCodeId
}

// GetPurchaseTaxCodeIdOk returns a tuple with the PurchaseTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetPurchaseTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.PurchaseTaxCodeId) {
		return nil, false
	}
	return o.PurchaseTaxCodeId, true
}

// HasPurchaseTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) HasPurchaseTaxCodeId() bool {
	if o != nil && !IsNil(o.PurchaseTaxCodeId) {
		return true
	}

	return false
}

// SetPurchaseTaxCodeId gets a reference to the given string and assigns it to the PurchaseTaxCodeId field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) SetPurchaseTaxCodeId(v string) {
	o.PurchaseTaxCodeId = &v
}

// GetExpenseAccountId returns the ExpenseAccountId field value
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetExpenseAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpenseAccountId
}

// GetExpenseAccountIdOk returns a tuple with the ExpenseAccountId field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetExpenseAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpenseAccountId, true
}

// SetExpenseAccountId sets field value
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) SetExpenseAccountId(v string) {
	o.ExpenseAccountId = v
}

// GetPreferredVendorId returns the PreferredVendorId field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetPreferredVendorId() string {
	if o == nil || IsNil(o.PreferredVendorId) {
		var ret string
		return ret
	}
	return *o.PreferredVendorId
}

// GetPreferredVendorIdOk returns a tuple with the PreferredVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) GetPreferredVendorIdOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredVendorId) {
		return nil, false
	}
	return o.PreferredVendorId, true
}

// HasPreferredVendorId returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) HasPreferredVendorId() bool {
	if o != nil && !IsNil(o.PreferredVendorId) {
		return true
	}

	return false
}

// SetPreferredVendorId gets a reference to the given string and assigns it to the PreferredVendorId field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) SetPreferredVendorId(v string) {
	o.PreferredVendorId = &v
}

func (o QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SalesDescription) {
		toSerialize["salesDescription"] = o.SalesDescription
	}
	if !IsNil(o.SalesPrice) {
		toSerialize["salesPrice"] = o.SalesPrice
	}
	toSerialize["incomeAccountId"] = o.IncomeAccountId
	if !IsNil(o.PurchaseDescription) {
		toSerialize["purchaseDescription"] = o.PurchaseDescription
	}
	if !IsNil(o.PurchaseCost) {
		toSerialize["purchaseCost"] = o.PurchaseCost
	}
	if !IsNil(o.PurchaseTaxCodeId) {
		toSerialize["purchaseTaxCodeId"] = o.PurchaseTaxCodeId
	}
	toSerialize["expenseAccountId"] = o.ExpenseAccountId
	if !IsNil(o.PreferredVendorId) {
		toSerialize["preferredVendorId"] = o.PreferredVendorId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"incomeAccountId",
		"expenseAccountId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails := _QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails{}

	err = json.Unmarshal(data, &varQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails(varQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "salesDescription")
		delete(additionalProperties, "salesPrice")
		delete(additionalProperties, "incomeAccountId")
		delete(additionalProperties, "purchaseDescription")
		delete(additionalProperties, "purchaseCost")
		delete(additionalProperties, "purchaseTaxCodeId")
		delete(additionalProperties, "expenseAccountId")
		delete(additionalProperties, "preferredVendorId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails struct {
	value *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails
	isSet bool
}

func (v NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) Get() *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails {
	return v.value
}

func (v *NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) Set(val *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails(val *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) *NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails {
	return &NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


