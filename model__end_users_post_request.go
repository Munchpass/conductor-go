/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EndUsersPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndUsersPostRequest{}

// EndUsersPostRequest struct for EndUsersPostRequest
type EndUsersPostRequest struct {
	// The end-user's company name that will be shown elsewhere in Conductor.
	CompanyName string `json:"companyName"`
	// The end-user's unique identifier from your system. Maps users between your database and Conductor. Must be unique for each user. If you have only one user, you may use any string value.
	SourceId string `json:"sourceId"`
	// The end-user's email address for identification purposes. Setting this field will not cause any emails to be sent.
	Email string `json:"email"`
}

type _EndUsersPostRequest EndUsersPostRequest

// NewEndUsersPostRequest instantiates a new EndUsersPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndUsersPostRequest(companyName string, sourceId string, email string) *EndUsersPostRequest {
	this := EndUsersPostRequest{}
	this.CompanyName = companyName
	this.SourceId = sourceId
	this.Email = email
	return &this
}

// NewEndUsersPostRequestWithDefaults instantiates a new EndUsersPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndUsersPostRequestWithDefaults() *EndUsersPostRequest {
	this := EndUsersPostRequest{}
	return &this
}

// GetCompanyName returns the CompanyName field value
func (o *EndUsersPostRequest) GetCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value
// and a boolean to check if the value has been set.
func (o *EndUsersPostRequest) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyName, true
}

// SetCompanyName sets field value
func (o *EndUsersPostRequest) SetCompanyName(v string) {
	o.CompanyName = v
}

// GetSourceId returns the SourceId field value
func (o *EndUsersPostRequest) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *EndUsersPostRequest) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *EndUsersPostRequest) SetSourceId(v string) {
	o.SourceId = v
}

// GetEmail returns the Email field value
func (o *EndUsersPostRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *EndUsersPostRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *EndUsersPostRequest) SetEmail(v string) {
	o.Email = v
}

func (o EndUsersPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndUsersPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["companyName"] = o.CompanyName
	toSerialize["sourceId"] = o.SourceId
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

func (o *EndUsersPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"companyName",
		"sourceId",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndUsersPostRequest := _EndUsersPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEndUsersPostRequest)

	if err != nil {
		return err
	}

	*o = EndUsersPostRequest(varEndUsersPostRequest)

	return err
}

type NullableEndUsersPostRequest struct {
	value *EndUsersPostRequest
	isSet bool
}

func (v NullableEndUsersPostRequest) Get() *EndUsersPostRequest {
	return v.value
}

func (v *NullableEndUsersPostRequest) Set(val *EndUsersPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEndUsersPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEndUsersPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndUsersPostRequest(val *EndUsersPostRequest) *NullableEndUsersPostRequest {
	return &NullableEndUsersPostRequest{value: val, isSet: true}
}

func (v NullableEndUsersPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndUsersPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


