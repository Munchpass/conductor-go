/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdAccount{}

// QbdAccount struct for QbdAccount
type QbdAccount struct {
	// The unique identifier assigned by QuickBooks to this account. This ID is unique across all accounts but not across different QuickBooks object types.
	Id string `json:"id"`
	// The type of object. This value is always `\"qbd_account\"`.
	ObjectType string `json:"objectType"`
	// The date and time when this account was created, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). The time zone is the same as the user's time zone in QuickBooks.
	CreatedAt string `json:"createdAt"`
	// The date and time when this account was last updated, in ISO 8601 format (YYYY-MM-DDThh:mm:ss±hh:mm). The time zone is the same as the user's time zone in QuickBooks.
	UpdatedAt string `json:"updatedAt"`
	// The current QuickBooks-assigned revision number of this account object, which changes each time the object is modified. When updating this object, you must provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The case-insensitive name of this account. Not guaranteed to be unique because it does not include the names of its hierarchical parent objects like `fullName` does. For example, two accounts could both have the `name` \"Accounts-Payable\", but they could have unique `fullName` values, such as \"Corporate:Accounts-Payable\" and \"Finance:Accounts-Payable\".
	Name string `json:"name"`
	// The case-insensitive fully-qualified unique name of this account, formed by combining the names of its hierarchical parent objects with its own `name`, separated by colons. For example, if an account is under \"Corporate\" and has the `name` \"Accounts-Payable\", its `fullName` would be \"Corporate:Accounts-Payable\".  **NOTE**: Unlike `name`, `fullName` is guaranteed to be unique across all account objects. However, `fullName` can still be arbitrarily changed by the QuickBooks user when they modify the underlying `name` field.
	FullName string `json:"fullName"`
	// Indicates whether this account is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive bool `json:"isActive"`
	Parent QbdAccountParent `json:"parent"`
	// The depth level of this account in the hierarchy. A top-level account has a `sublevel` of 0; each subsequent sublevel increases this number by 1. For example, an account with a `fullName` of \"Corporate:Accounts-Payable\" would have a `sublevel` of 1.
	Sublevel float32 `json:"sublevel"`
	// The classification of this account, indicating its purpose within the chart of accounts.  **NOTE**: You cannot create an account of type `non_posting` through the API because QuickBooks creates these accounts behind the scenes.
	AccountType string `json:"accountType"`
	// Indicates if this account is a special account automatically created by QuickBooks for specific purposes.
	SpecialAccountType string `json:"specialAccountType"`
	// Indicates whether this account is used for tracking taxes.
	IsTaxAccount bool `json:"isTaxAccount"`
	// The account's account number, which appears in the QuickBooks chart of accounts, reports, and graphs.  Note that if the \"Use Account Numbers\" preference is turned off in QuickBooks, the account number may not be visible in the user interface, but it can still be set and retrieved through the API.
	AccountNumber string `json:"accountNumber"`
	// The bank account number or identifying note for this account. Access to this field may be restricted based on permissions.
	BankAccountNumber string `json:"bankAccountNumber"`
	// A description of this account.
	Description string `json:"description"`
	// The current balance of this account only, excluding balances from any subordinate accounts, represented as a decimal string. Compare with `totalBalance`. Note that income accounts and balance sheet accounts may not have balances.
	Balance string `json:"balance"`
	// The combined balance of this account and all its sub-accounts, represented as a decimal string. For example, the `totalBalance` for XYZ Bank would be the total of the balances of all its sub-accounts (checking, savings, and so on). If XYZ Bank did not have any sub-accounts, `totalBalance` and `balance` would be the same.
	TotalBalance string `json:"totalBalance"`
	SalesTaxCode QbdAccountSalesTaxCode `json:"salesTaxCode"`
	TaxLineDetails QbdAccountTaxLineDetails `json:"taxLineDetails"`
	// Indicates how this account is classified for cash flow reporting. If `none`, the account has not been classified. If `not_applicable`, the account does not qualify to be classified (e.g., a bank account tracking cash transactions is not part of a cash flow report).
	CashFlowClassification string `json:"cashFlowClassification"`
	Currency QbdAccountCurrency `json:"currency"`
	// The custom fields for the account object, added as user-defined data extensions, not included in the standard QuickBooks object.
	CustomFields []QbdCustomField `json:"customFields"`
	AdditionalProperties map[string]interface{}
}

type _QbdAccount QbdAccount

// NewQbdAccount instantiates a new QbdAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdAccount(id string, objectType string, createdAt string, updatedAt string, revisionNumber string, name string, fullName string, isActive bool, parent QbdAccountParent, sublevel float32, accountType string, specialAccountType string, isTaxAccount bool, accountNumber string, bankAccountNumber string, description string, balance string, totalBalance string, salesTaxCode QbdAccountSalesTaxCode, taxLineDetails QbdAccountTaxLineDetails, cashFlowClassification string, currency QbdAccountCurrency, customFields []QbdCustomField) *QbdAccount {
	this := QbdAccount{}
	this.Id = id
	this.ObjectType = objectType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.RevisionNumber = revisionNumber
	this.Name = name
	this.FullName = fullName
	this.IsActive = isActive
	this.Parent = parent
	this.Sublevel = sublevel
	this.AccountType = accountType
	this.SpecialAccountType = specialAccountType
	this.IsTaxAccount = isTaxAccount
	this.AccountNumber = accountNumber
	this.BankAccountNumber = bankAccountNumber
	this.Description = description
	this.Balance = balance
	this.TotalBalance = totalBalance
	this.SalesTaxCode = salesTaxCode
	this.TaxLineDetails = taxLineDetails
	this.CashFlowClassification = cashFlowClassification
	this.Currency = currency
	this.CustomFields = customFields
	return &this
}

// NewQbdAccountWithDefaults instantiates a new QbdAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdAccountWithDefaults() *QbdAccount {
	this := QbdAccount{}
	return &this
}

// GetId returns the Id field value
func (o *QbdAccount) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QbdAccount) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *QbdAccount) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *QbdAccount) SetObjectType(v string) {
	o.ObjectType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *QbdAccount) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *QbdAccount) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *QbdAccount) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *QbdAccount) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QbdAccount) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QbdAccount) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetName returns the Name field value
func (o *QbdAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QbdAccount) SetName(v string) {
	o.Name = v
}

// GetFullName returns the FullName field value
func (o *QbdAccount) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *QbdAccount) SetFullName(v string) {
	o.FullName = v
}

// GetIsActive returns the IsActive field value
func (o *QbdAccount) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *QbdAccount) SetIsActive(v bool) {
	o.IsActive = v
}

// GetParent returns the Parent field value
func (o *QbdAccount) GetParent() QbdAccountParent {
	if o == nil {
		var ret QbdAccountParent
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetParentOk() (*QbdAccountParent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parent, true
}

// SetParent sets field value
func (o *QbdAccount) SetParent(v QbdAccountParent) {
	o.Parent = v
}

// GetSublevel returns the Sublevel field value
func (o *QbdAccount) GetSublevel() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Sublevel
}

// GetSublevelOk returns a tuple with the Sublevel field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetSublevelOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sublevel, true
}

// SetSublevel sets field value
func (o *QbdAccount) SetSublevel(v float32) {
	o.Sublevel = v
}

// GetAccountType returns the AccountType field value
func (o *QbdAccount) GetAccountType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetAccountTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountType, true
}

// SetAccountType sets field value
func (o *QbdAccount) SetAccountType(v string) {
	o.AccountType = v
}

// GetSpecialAccountType returns the SpecialAccountType field value
func (o *QbdAccount) GetSpecialAccountType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpecialAccountType
}

// GetSpecialAccountTypeOk returns a tuple with the SpecialAccountType field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetSpecialAccountTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecialAccountType, true
}

// SetSpecialAccountType sets field value
func (o *QbdAccount) SetSpecialAccountType(v string) {
	o.SpecialAccountType = v
}

// GetIsTaxAccount returns the IsTaxAccount field value
func (o *QbdAccount) GetIsTaxAccount() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTaxAccount
}

// GetIsTaxAccountOk returns a tuple with the IsTaxAccount field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetIsTaxAccountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTaxAccount, true
}

// SetIsTaxAccount sets field value
func (o *QbdAccount) SetIsTaxAccount(v bool) {
	o.IsTaxAccount = v
}

// GetAccountNumber returns the AccountNumber field value
func (o *QbdAccount) GetAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountNumber, true
}

// SetAccountNumber sets field value
func (o *QbdAccount) SetAccountNumber(v string) {
	o.AccountNumber = v
}

// GetBankAccountNumber returns the BankAccountNumber field value
func (o *QbdAccount) GetBankAccountNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BankAccountNumber
}

// GetBankAccountNumberOk returns a tuple with the BankAccountNumber field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetBankAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BankAccountNumber, true
}

// SetBankAccountNumber sets field value
func (o *QbdAccount) SetBankAccountNumber(v string) {
	o.BankAccountNumber = v
}

// GetDescription returns the Description field value
func (o *QbdAccount) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *QbdAccount) SetDescription(v string) {
	o.Description = v
}

// GetBalance returns the Balance field value
func (o *QbdAccount) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *QbdAccount) SetBalance(v string) {
	o.Balance = v
}

// GetTotalBalance returns the TotalBalance field value
func (o *QbdAccount) GetTotalBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalBalance
}

// GetTotalBalanceOk returns a tuple with the TotalBalance field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetTotalBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalBalance, true
}

// SetTotalBalance sets field value
func (o *QbdAccount) SetTotalBalance(v string) {
	o.TotalBalance = v
}

// GetSalesTaxCode returns the SalesTaxCode field value
func (o *QbdAccount) GetSalesTaxCode() QbdAccountSalesTaxCode {
	if o == nil {
		var ret QbdAccountSalesTaxCode
		return ret
	}

	return o.SalesTaxCode
}

// GetSalesTaxCodeOk returns a tuple with the SalesTaxCode field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetSalesTaxCodeOk() (*QbdAccountSalesTaxCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SalesTaxCode, true
}

// SetSalesTaxCode sets field value
func (o *QbdAccount) SetSalesTaxCode(v QbdAccountSalesTaxCode) {
	o.SalesTaxCode = v
}

// GetTaxLineDetails returns the TaxLineDetails field value
func (o *QbdAccount) GetTaxLineDetails() QbdAccountTaxLineDetails {
	if o == nil {
		var ret QbdAccountTaxLineDetails
		return ret
	}

	return o.TaxLineDetails
}

// GetTaxLineDetailsOk returns a tuple with the TaxLineDetails field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetTaxLineDetailsOk() (*QbdAccountTaxLineDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxLineDetails, true
}

// SetTaxLineDetails sets field value
func (o *QbdAccount) SetTaxLineDetails(v QbdAccountTaxLineDetails) {
	o.TaxLineDetails = v
}

// GetCashFlowClassification returns the CashFlowClassification field value
func (o *QbdAccount) GetCashFlowClassification() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CashFlowClassification
}

// GetCashFlowClassificationOk returns a tuple with the CashFlowClassification field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetCashFlowClassificationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CashFlowClassification, true
}

// SetCashFlowClassification sets field value
func (o *QbdAccount) SetCashFlowClassification(v string) {
	o.CashFlowClassification = v
}

// GetCurrency returns the Currency field value
func (o *QbdAccount) GetCurrency() QbdAccountCurrency {
	if o == nil {
		var ret QbdAccountCurrency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetCurrencyOk() (*QbdAccountCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *QbdAccount) SetCurrency(v QbdAccountCurrency) {
	o.Currency = v
}

// GetCustomFields returns the CustomFields field value
func (o *QbdAccount) GetCustomFields() []QbdCustomField {
	if o == nil {
		var ret []QbdCustomField
		return ret
	}

	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value
// and a boolean to check if the value has been set.
func (o *QbdAccount) GetCustomFieldsOk() ([]QbdCustomField, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// SetCustomFields sets field value
func (o *QbdAccount) SetCustomFields(v []QbdCustomField) {
	o.CustomFields = v
}

func (o QbdAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["objectType"] = o.ObjectType
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["revisionNumber"] = o.RevisionNumber
	toSerialize["name"] = o.Name
	toSerialize["fullName"] = o.FullName
	toSerialize["isActive"] = o.IsActive
	toSerialize["parent"] = o.Parent
	toSerialize["sublevel"] = o.Sublevel
	toSerialize["accountType"] = o.AccountType
	toSerialize["specialAccountType"] = o.SpecialAccountType
	toSerialize["isTaxAccount"] = o.IsTaxAccount
	toSerialize["accountNumber"] = o.AccountNumber
	toSerialize["bankAccountNumber"] = o.BankAccountNumber
	toSerialize["description"] = o.Description
	toSerialize["balance"] = o.Balance
	toSerialize["totalBalance"] = o.TotalBalance
	toSerialize["salesTaxCode"] = o.SalesTaxCode
	toSerialize["taxLineDetails"] = o.TaxLineDetails
	toSerialize["cashFlowClassification"] = o.CashFlowClassification
	toSerialize["currency"] = o.Currency
	toSerialize["customFields"] = o.CustomFields

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"objectType",
		"createdAt",
		"updatedAt",
		"revisionNumber",
		"name",
		"fullName",
		"isActive",
		"parent",
		"sublevel",
		"accountType",
		"specialAccountType",
		"isTaxAccount",
		"accountNumber",
		"bankAccountNumber",
		"description",
		"balance",
		"totalBalance",
		"salesTaxCode",
		"taxLineDetails",
		"cashFlowClassification",
		"currency",
		"customFields",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdAccount := _QbdAccount{}

	err = json.Unmarshal(data, &varQbdAccount)

	if err != nil {
		return err
	}

	*o = QbdAccount(varQbdAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "objectType")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "name")
		delete(additionalProperties, "fullName")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "sublevel")
		delete(additionalProperties, "accountType")
		delete(additionalProperties, "specialAccountType")
		delete(additionalProperties, "isTaxAccount")
		delete(additionalProperties, "accountNumber")
		delete(additionalProperties, "bankAccountNumber")
		delete(additionalProperties, "description")
		delete(additionalProperties, "balance")
		delete(additionalProperties, "totalBalance")
		delete(additionalProperties, "salesTaxCode")
		delete(additionalProperties, "taxLineDetails")
		delete(additionalProperties, "cashFlowClassification")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "customFields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdAccount struct {
	value *QbdAccount
	isSet bool
}

func (v NullableQbdAccount) Get() *QbdAccount {
	return v.value
}

func (v *NullableQbdAccount) Set(val *QbdAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdAccount(val *QbdAccount) *NullableQbdAccount {
	return &NullableQbdAccount{value: val, isSet: true}
}

func (v NullableQbdAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


