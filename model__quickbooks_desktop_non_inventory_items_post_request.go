/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopNonInventoryItemsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopNonInventoryItemsPostRequest{}

// QuickbooksDesktopNonInventoryItemsPostRequest struct for QuickbooksDesktopNonInventoryItemsPostRequest
type QuickbooksDesktopNonInventoryItemsPostRequest struct {
	// The case-insensitive name of this non-inventory item. Not guaranteed to be unique because it does not include the names of its hierarchical parent objects like `fullName` does. For example, two non-inventory items could both have the `name` \"Printer Ink Cartridge\", but they could have unique `fullName` values, such as \"Office Supplies:Printer Ink Cartridge\" and \"Miscellaneous:Printer Ink Cartridge\".  Maximum length: 31 characters.
	Name string `json:"name"`
	Barcode *QuickbooksDesktopNonInventoryItemsPostRequestBarcode `json:"barcode,omitempty"`
	// Indicates whether this non-inventory item is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// The parent non-inventory item one level above this one in the hierarchy. For example, if this non-inventory item has a `fullName` of \"Office Supplies:Printer Ink Cartridge\", its parent has a `fullName` of \"Office Supplies\". If this non-inventory item is at the top level, this field will be `null`.
	ParentId *string `json:"parentId,omitempty"`
	// The non-inventory item's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default.
	ClassId *string `json:"classId,omitempty"`
	// The non-inventory item's stock keeping unit (SKU), which is sometimes the manufacturer's part number.
	Sku *string `json:"sku,omitempty"`
	// The unit-of-measure set associated with this non-inventory item, which consists of a base unit and related units.
	UnitOfMeasureSetId *string `json:"unitOfMeasureSetId,omitempty"`
	// The default sales-tax code for this non-inventory item, determining whether it is taxable or non-taxable. This can be overridden at the transaction-line level.  Default codes include \"Non\" (non-taxable) and \"Tax\" (taxable), but custom codes can also be created in QuickBooks. If QuickBooks is not set up to charge sales tax (via the \"Do You Charge Sales Tax?\" preference), it will assign the default non-taxable code to all sales.
	SalesTaxCodeId *string `json:"salesTaxCodeId,omitempty"`
	SalesOrPurchaseDetails *QuickbooksDesktopNonInventoryItemsPostRequestSalesOrPurchaseDetails `json:"salesOrPurchaseDetails,omitempty"`
	SalesAndPurchaseDetails *QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails `json:"salesAndPurchaseDetails,omitempty"`
	// A globally unique identifier (GUID) you, the developer, can provide for tracking this object in your external system. This field is immutable and can only be set during object creation.  **IMPORTANT**: This field must be formatted as a valid GUID; otherwise, QuickBooks will return an error.
	ExternalId *string `json:"externalId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopNonInventoryItemsPostRequest QuickbooksDesktopNonInventoryItemsPostRequest

// NewQuickbooksDesktopNonInventoryItemsPostRequest instantiates a new QuickbooksDesktopNonInventoryItemsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopNonInventoryItemsPostRequest(name string) *QuickbooksDesktopNonInventoryItemsPostRequest {
	this := QuickbooksDesktopNonInventoryItemsPostRequest{}
	this.Name = name
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// NewQuickbooksDesktopNonInventoryItemsPostRequestWithDefaults instantiates a new QuickbooksDesktopNonInventoryItemsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopNonInventoryItemsPostRequestWithDefaults() *QuickbooksDesktopNonInventoryItemsPostRequest {
	this := QuickbooksDesktopNonInventoryItemsPostRequest{}
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// GetName returns the Name field value
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetName(v string) {
	o.Name = v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetBarcode() QuickbooksDesktopNonInventoryItemsPostRequestBarcode {
	if o == nil || IsNil(o.Barcode) {
		var ret QuickbooksDesktopNonInventoryItemsPostRequestBarcode
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetBarcodeOk() (*QuickbooksDesktopNonInventoryItemsPostRequestBarcode, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given QuickbooksDesktopNonInventoryItemsPostRequestBarcode and assigns it to the Barcode field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetBarcode(v QuickbooksDesktopNonInventoryItemsPostRequestBarcode) {
	o.Barcode = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetParentId(v string) {
	o.ParentId = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetClassId(v string) {
	o.ClassId = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetSku(v string) {
	o.Sku = &v
}

// GetUnitOfMeasureSetId returns the UnitOfMeasureSetId field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetUnitOfMeasureSetId() string {
	if o == nil || IsNil(o.UnitOfMeasureSetId) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasureSetId
}

// GetUnitOfMeasureSetIdOk returns a tuple with the UnitOfMeasureSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetUnitOfMeasureSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasureSetId) {
		return nil, false
	}
	return o.UnitOfMeasureSetId, true
}

// HasUnitOfMeasureSetId returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasUnitOfMeasureSetId() bool {
	if o != nil && !IsNil(o.UnitOfMeasureSetId) {
		return true
	}

	return false
}

// SetUnitOfMeasureSetId gets a reference to the given string and assigns it to the UnitOfMeasureSetId field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetUnitOfMeasureSetId(v string) {
	o.UnitOfMeasureSetId = &v
}

// GetSalesTaxCodeId returns the SalesTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetSalesTaxCodeId() string {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		var ret string
		return ret
	}
	return *o.SalesTaxCodeId
}

// GetSalesTaxCodeIdOk returns a tuple with the SalesTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetSalesTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		return nil, false
	}
	return o.SalesTaxCodeId, true
}

// HasSalesTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasSalesTaxCodeId() bool {
	if o != nil && !IsNil(o.SalesTaxCodeId) {
		return true
	}

	return false
}

// SetSalesTaxCodeId gets a reference to the given string and assigns it to the SalesTaxCodeId field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetSalesTaxCodeId(v string) {
	o.SalesTaxCodeId = &v
}

// GetSalesOrPurchaseDetails returns the SalesOrPurchaseDetails field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetSalesOrPurchaseDetails() QuickbooksDesktopNonInventoryItemsPostRequestSalesOrPurchaseDetails {
	if o == nil || IsNil(o.SalesOrPurchaseDetails) {
		var ret QuickbooksDesktopNonInventoryItemsPostRequestSalesOrPurchaseDetails
		return ret
	}
	return *o.SalesOrPurchaseDetails
}

// GetSalesOrPurchaseDetailsOk returns a tuple with the SalesOrPurchaseDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetSalesOrPurchaseDetailsOk() (*QuickbooksDesktopNonInventoryItemsPostRequestSalesOrPurchaseDetails, bool) {
	if o == nil || IsNil(o.SalesOrPurchaseDetails) {
		return nil, false
	}
	return o.SalesOrPurchaseDetails, true
}

// HasSalesOrPurchaseDetails returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasSalesOrPurchaseDetails() bool {
	if o != nil && !IsNil(o.SalesOrPurchaseDetails) {
		return true
	}

	return false
}

// SetSalesOrPurchaseDetails gets a reference to the given QuickbooksDesktopNonInventoryItemsPostRequestSalesOrPurchaseDetails and assigns it to the SalesOrPurchaseDetails field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetSalesOrPurchaseDetails(v QuickbooksDesktopNonInventoryItemsPostRequestSalesOrPurchaseDetails) {
	o.SalesOrPurchaseDetails = &v
}

// GetSalesAndPurchaseDetails returns the SalesAndPurchaseDetails field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetSalesAndPurchaseDetails() QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails {
	if o == nil || IsNil(o.SalesAndPurchaseDetails) {
		var ret QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails
		return ret
	}
	return *o.SalesAndPurchaseDetails
}

// GetSalesAndPurchaseDetailsOk returns a tuple with the SalesAndPurchaseDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetSalesAndPurchaseDetailsOk() (*QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails, bool) {
	if o == nil || IsNil(o.SalesAndPurchaseDetails) {
		return nil, false
	}
	return o.SalesAndPurchaseDetails, true
}

// HasSalesAndPurchaseDetails returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasSalesAndPurchaseDetails() bool {
	if o != nil && !IsNil(o.SalesAndPurchaseDetails) {
		return true
	}

	return false
}

// SetSalesAndPurchaseDetails gets a reference to the given QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails and assigns it to the SalesAndPurchaseDetails field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetSalesAndPurchaseDetails(v QuickbooksDesktopNonInventoryItemsPostRequestSalesAndPurchaseDetails) {
	o.SalesAndPurchaseDetails = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *QuickbooksDesktopNonInventoryItemsPostRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

func (o QuickbooksDesktopNonInventoryItemsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopNonInventoryItemsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.UnitOfMeasureSetId) {
		toSerialize["unitOfMeasureSetId"] = o.UnitOfMeasureSetId
	}
	if !IsNil(o.SalesTaxCodeId) {
		toSerialize["salesTaxCodeId"] = o.SalesTaxCodeId
	}
	if !IsNil(o.SalesOrPurchaseDetails) {
		toSerialize["salesOrPurchaseDetails"] = o.SalesOrPurchaseDetails
	}
	if !IsNil(o.SalesAndPurchaseDetails) {
		toSerialize["salesAndPurchaseDetails"] = o.SalesAndPurchaseDetails
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopNonInventoryItemsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopNonInventoryItemsPostRequest := _QuickbooksDesktopNonInventoryItemsPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopNonInventoryItemsPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopNonInventoryItemsPostRequest(varQuickbooksDesktopNonInventoryItemsPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "barcode")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "parentId")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "sku")
		delete(additionalProperties, "unitOfMeasureSetId")
		delete(additionalProperties, "salesTaxCodeId")
		delete(additionalProperties, "salesOrPurchaseDetails")
		delete(additionalProperties, "salesAndPurchaseDetails")
		delete(additionalProperties, "externalId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopNonInventoryItemsPostRequest struct {
	value *QuickbooksDesktopNonInventoryItemsPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopNonInventoryItemsPostRequest) Get() *QuickbooksDesktopNonInventoryItemsPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopNonInventoryItemsPostRequest) Set(val *QuickbooksDesktopNonInventoryItemsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopNonInventoryItemsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopNonInventoryItemsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopNonInventoryItemsPostRequest(val *QuickbooksDesktopNonInventoryItemsPostRequest) *NullableQuickbooksDesktopNonInventoryItemsPostRequest {
	return &NullableQuickbooksDesktopNonInventoryItemsPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopNonInventoryItemsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopNonInventoryItemsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


