/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopChecksIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopChecksIdPostRequest{}

// QuickbooksDesktopChecksIdPostRequest struct for QuickbooksDesktopChecksIdPostRequest
type QuickbooksDesktopChecksIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the check object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The bank account from which the funds are being drawn for this check; e.g., Checking or Savings. This check will decrease the balance of this account.
	BankAccountId *string `json:"bankAccountId,omitempty"`
	// The person or company who will receive this check.
	PayeeId *string `json:"payeeId,omitempty"`
	// The case-sensitive user-defined reference number for this check, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user.  **IMPORTANT**: For checks, this field is the check number.
	RefNumber *string `json:"refNumber,omitempty"`
	// The date written on this check, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate *string `json:"transactionDate,omitempty"`
	// The memo that is printed on this check.
	Memo *string `json:"memo,omitempty"`
	Address *QuickbooksDesktopChecksPostRequestAddress `json:"address,omitempty"`
	// Indicates whether this check is included in the queue of documents for QuickBooks to print.
	IsQueuedForPrint *bool `json:"isQueuedForPrint,omitempty"`
	// The sales-tax code for this check, determining whether it is taxable or non-taxable. If set, this overrides any sales-tax codes defined on the payee. This can be overridden on the check's individual lines.  Default codes include \"Non\" (non-taxable) and \"Tax\" (taxable), but custom codes can also be created in QuickBooks. If QuickBooks is not set up to charge sales tax (via the \"Do You Charge Sales Tax?\" preference), it will assign the default non-taxable code to all sales.
	SalesTaxCodeId *string `json:"salesTaxCodeId,omitempty"`
	// The market exchange rate between this check's currency and the home currency in QuickBooks at the time of this transaction. Represented as a decimal value (e.g., 1.2345 for 1 EUR = 1.2345 USD if USD is the home currency).
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`
	// Transactions to be paid by this check. This will create a link between this check and the specified transactions.  **IMPORTANT**: By default, QuickBooks will not return any information about the linked transactions in this endpoint's response even when this request is successful. To see the transactions linked via this field, refetch the check and check the `linkedTransactions` response field. If fetching a list of checks, you must also specify the parameter `includeLinkedTransactions=true` to see the `linkedTransactions` response field.
	ApplyToTransactions []QuickbooksDesktopChecksPostRequestApplyToTransactionsInner `json:"applyToTransactions,omitempty"`
	// When `true`, removes all existing expense lines associated with this check. To modify or add individual expense lines, use the field `expenseLines` instead.
	ClearExpenseLines *bool `json:"clearExpenseLines,omitempty"`
	// The check's expense lines, each representing one line in this expense.  **IMPORTANT**:  1. Including this array in your update request will **REPLACE** all existing expense lines for the check with this array. To keep any existing expense lines, you must include them in this array even if they have not changed. **Any expense lines not included will be removed.**  2. To add a new expense line, include it here with the `id` field set to `-1`.  3. If you do not wish to modify any expense lines, omit this field entirely to keep them unchanged.
	ExpenseLines []QuickbooksDesktopBillsIdPostRequestExpenseLinesInner `json:"expenseLines,omitempty"`
	// When `true`, removes all existing item lines associated with this check. To modify or add individual item lines, use the field `itemLines` instead.
	ClearItemLines *bool `json:"clearItemLines,omitempty"`
	// The check's item lines, each representing the purchase of a specific item or service.  **IMPORTANT**:  1. Including this array in your update request will **REPLACE** all existing item lines for the check with this array. To keep any existing item lines, you must include them in this array even if they have not changed. **Any item lines not included will be removed.**  2. To add a new item line, include it here with the `id` field set to `-1`.  3. If you do not wish to modify any item lines, omit this field entirely to keep them unchanged.
	ItemLines []QuickbooksDesktopBillsIdPostRequestItemLinesInner `json:"itemLines,omitempty"`
	// The check's item group lines, each representing a predefined set of items bundled together because they are commonly purchased together or grouped for faster entry.  **IMPORTANT**:  1. Including this array in your update request will **REPLACE** all existing item group lines for the check with this array. To keep any existing item group lines, you must include them in this array even if they have not changed. **Any item group lines not included will be removed.**  2. To add a new item group line, include it here with the `id` field set to `-1`.  3. If you do not wish to modify any item group lines, omit this field entirely to keep them unchanged.
	ItemLineGroups []QuickbooksDesktopBillsIdPostRequestItemLineGroupsInner `json:"itemLineGroups,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopChecksIdPostRequest QuickbooksDesktopChecksIdPostRequest

// NewQuickbooksDesktopChecksIdPostRequest instantiates a new QuickbooksDesktopChecksIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopChecksIdPostRequest(revisionNumber string) *QuickbooksDesktopChecksIdPostRequest {
	this := QuickbooksDesktopChecksIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopChecksIdPostRequestWithDefaults instantiates a new QuickbooksDesktopChecksIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopChecksIdPostRequestWithDefaults() *QuickbooksDesktopChecksIdPostRequest {
	this := QuickbooksDesktopChecksIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopChecksIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopChecksIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetBankAccountId returns the BankAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetBankAccountId() string {
	if o == nil || IsNil(o.BankAccountId) {
		var ret string
		return ret
	}
	return *o.BankAccountId
}

// GetBankAccountIdOk returns a tuple with the BankAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetBankAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.BankAccountId) {
		return nil, false
	}
	return o.BankAccountId, true
}

// HasBankAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasBankAccountId() bool {
	if o != nil && !IsNil(o.BankAccountId) {
		return true
	}

	return false
}

// SetBankAccountId gets a reference to the given string and assigns it to the BankAccountId field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetBankAccountId(v string) {
	o.BankAccountId = &v
}

// GetPayeeId returns the PayeeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetPayeeId() string {
	if o == nil || IsNil(o.PayeeId) {
		var ret string
		return ret
	}
	return *o.PayeeId
}

// GetPayeeIdOk returns a tuple with the PayeeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetPayeeIdOk() (*string, bool) {
	if o == nil || IsNil(o.PayeeId) {
		return nil, false
	}
	return o.PayeeId, true
}

// HasPayeeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasPayeeId() bool {
	if o != nil && !IsNil(o.PayeeId) {
		return true
	}

	return false
}

// SetPayeeId gets a reference to the given string and assigns it to the PayeeId field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetPayeeId(v string) {
	o.PayeeId = &v
}

// GetRefNumber returns the RefNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetRefNumber() string {
	if o == nil || IsNil(o.RefNumber) {
		var ret string
		return ret
	}
	return *o.RefNumber
}

// GetRefNumberOk returns a tuple with the RefNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetRefNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RefNumber) {
		return nil, false
	}
	return o.RefNumber, true
}

// HasRefNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasRefNumber() bool {
	if o != nil && !IsNil(o.RefNumber) {
		return true
	}

	return false
}

// SetRefNumber gets a reference to the given string and assigns it to the RefNumber field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetRefNumber(v string) {
	o.RefNumber = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetTransactionDate() string {
	if o == nil || IsNil(o.TransactionDate) {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDate) {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasTransactionDate() bool {
	if o != nil && !IsNil(o.TransactionDate) {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetMemo(v string) {
	o.Memo = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetAddress() QuickbooksDesktopChecksPostRequestAddress {
	if o == nil || IsNil(o.Address) {
		var ret QuickbooksDesktopChecksPostRequestAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetAddressOk() (*QuickbooksDesktopChecksPostRequestAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given QuickbooksDesktopChecksPostRequestAddress and assigns it to the Address field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetAddress(v QuickbooksDesktopChecksPostRequestAddress) {
	o.Address = &v
}

// GetIsQueuedForPrint returns the IsQueuedForPrint field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetIsQueuedForPrint() bool {
	if o == nil || IsNil(o.IsQueuedForPrint) {
		var ret bool
		return ret
	}
	return *o.IsQueuedForPrint
}

// GetIsQueuedForPrintOk returns a tuple with the IsQueuedForPrint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetIsQueuedForPrintOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQueuedForPrint) {
		return nil, false
	}
	return o.IsQueuedForPrint, true
}

// HasIsQueuedForPrint returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasIsQueuedForPrint() bool {
	if o != nil && !IsNil(o.IsQueuedForPrint) {
		return true
	}

	return false
}

// SetIsQueuedForPrint gets a reference to the given bool and assigns it to the IsQueuedForPrint field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetIsQueuedForPrint(v bool) {
	o.IsQueuedForPrint = &v
}

// GetSalesTaxCodeId returns the SalesTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetSalesTaxCodeId() string {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		var ret string
		return ret
	}
	return *o.SalesTaxCodeId
}

// GetSalesTaxCodeIdOk returns a tuple with the SalesTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetSalesTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		return nil, false
	}
	return o.SalesTaxCodeId, true
}

// HasSalesTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasSalesTaxCodeId() bool {
	if o != nil && !IsNil(o.SalesTaxCodeId) {
		return true
	}

	return false
}

// SetSalesTaxCodeId gets a reference to the given string and assigns it to the SalesTaxCodeId field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetSalesTaxCodeId(v string) {
	o.SalesTaxCodeId = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetExchangeRate() float32 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret float32
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetExchangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float32 and assigns it to the ExchangeRate field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetExchangeRate(v float32) {
	o.ExchangeRate = &v
}

// GetApplyToTransactions returns the ApplyToTransactions field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetApplyToTransactions() []QuickbooksDesktopChecksPostRequestApplyToTransactionsInner {
	if o == nil || IsNil(o.ApplyToTransactions) {
		var ret []QuickbooksDesktopChecksPostRequestApplyToTransactionsInner
		return ret
	}
	return o.ApplyToTransactions
}

// GetApplyToTransactionsOk returns a tuple with the ApplyToTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetApplyToTransactionsOk() ([]QuickbooksDesktopChecksPostRequestApplyToTransactionsInner, bool) {
	if o == nil || IsNil(o.ApplyToTransactions) {
		return nil, false
	}
	return o.ApplyToTransactions, true
}

// HasApplyToTransactions returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasApplyToTransactions() bool {
	if o != nil && !IsNil(o.ApplyToTransactions) {
		return true
	}

	return false
}

// SetApplyToTransactions gets a reference to the given []QuickbooksDesktopChecksPostRequestApplyToTransactionsInner and assigns it to the ApplyToTransactions field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetApplyToTransactions(v []QuickbooksDesktopChecksPostRequestApplyToTransactionsInner) {
	o.ApplyToTransactions = v
}

// GetClearExpenseLines returns the ClearExpenseLines field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetClearExpenseLines() bool {
	if o == nil || IsNil(o.ClearExpenseLines) {
		var ret bool
		return ret
	}
	return *o.ClearExpenseLines
}

// GetClearExpenseLinesOk returns a tuple with the ClearExpenseLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetClearExpenseLinesOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearExpenseLines) {
		return nil, false
	}
	return o.ClearExpenseLines, true
}

// HasClearExpenseLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasClearExpenseLines() bool {
	if o != nil && !IsNil(o.ClearExpenseLines) {
		return true
	}

	return false
}

// SetClearExpenseLines gets a reference to the given bool and assigns it to the ClearExpenseLines field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetClearExpenseLines(v bool) {
	o.ClearExpenseLines = &v
}

// GetExpenseLines returns the ExpenseLines field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetExpenseLines() []QuickbooksDesktopBillsIdPostRequestExpenseLinesInner {
	if o == nil || IsNil(o.ExpenseLines) {
		var ret []QuickbooksDesktopBillsIdPostRequestExpenseLinesInner
		return ret
	}
	return o.ExpenseLines
}

// GetExpenseLinesOk returns a tuple with the ExpenseLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetExpenseLinesOk() ([]QuickbooksDesktopBillsIdPostRequestExpenseLinesInner, bool) {
	if o == nil || IsNil(o.ExpenseLines) {
		return nil, false
	}
	return o.ExpenseLines, true
}

// HasExpenseLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasExpenseLines() bool {
	if o != nil && !IsNil(o.ExpenseLines) {
		return true
	}

	return false
}

// SetExpenseLines gets a reference to the given []QuickbooksDesktopBillsIdPostRequestExpenseLinesInner and assigns it to the ExpenseLines field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetExpenseLines(v []QuickbooksDesktopBillsIdPostRequestExpenseLinesInner) {
	o.ExpenseLines = v
}

// GetClearItemLines returns the ClearItemLines field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetClearItemLines() bool {
	if o == nil || IsNil(o.ClearItemLines) {
		var ret bool
		return ret
	}
	return *o.ClearItemLines
}

// GetClearItemLinesOk returns a tuple with the ClearItemLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetClearItemLinesOk() (*bool, bool) {
	if o == nil || IsNil(o.ClearItemLines) {
		return nil, false
	}
	return o.ClearItemLines, true
}

// HasClearItemLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasClearItemLines() bool {
	if o != nil && !IsNil(o.ClearItemLines) {
		return true
	}

	return false
}

// SetClearItemLines gets a reference to the given bool and assigns it to the ClearItemLines field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetClearItemLines(v bool) {
	o.ClearItemLines = &v
}

// GetItemLines returns the ItemLines field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetItemLines() []QuickbooksDesktopBillsIdPostRequestItemLinesInner {
	if o == nil || IsNil(o.ItemLines) {
		var ret []QuickbooksDesktopBillsIdPostRequestItemLinesInner
		return ret
	}
	return o.ItemLines
}

// GetItemLinesOk returns a tuple with the ItemLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetItemLinesOk() ([]QuickbooksDesktopBillsIdPostRequestItemLinesInner, bool) {
	if o == nil || IsNil(o.ItemLines) {
		return nil, false
	}
	return o.ItemLines, true
}

// HasItemLines returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasItemLines() bool {
	if o != nil && !IsNil(o.ItemLines) {
		return true
	}

	return false
}

// SetItemLines gets a reference to the given []QuickbooksDesktopBillsIdPostRequestItemLinesInner and assigns it to the ItemLines field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetItemLines(v []QuickbooksDesktopBillsIdPostRequestItemLinesInner) {
	o.ItemLines = v
}

// GetItemLineGroups returns the ItemLineGroups field value if set, zero value otherwise.
func (o *QuickbooksDesktopChecksIdPostRequest) GetItemLineGroups() []QuickbooksDesktopBillsIdPostRequestItemLineGroupsInner {
	if o == nil || IsNil(o.ItemLineGroups) {
		var ret []QuickbooksDesktopBillsIdPostRequestItemLineGroupsInner
		return ret
	}
	return o.ItemLineGroups
}

// GetItemLineGroupsOk returns a tuple with the ItemLineGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) GetItemLineGroupsOk() ([]QuickbooksDesktopBillsIdPostRequestItemLineGroupsInner, bool) {
	if o == nil || IsNil(o.ItemLineGroups) {
		return nil, false
	}
	return o.ItemLineGroups, true
}

// HasItemLineGroups returns a boolean if a field has been set.
func (o *QuickbooksDesktopChecksIdPostRequest) HasItemLineGroups() bool {
	if o != nil && !IsNil(o.ItemLineGroups) {
		return true
	}

	return false
}

// SetItemLineGroups gets a reference to the given []QuickbooksDesktopBillsIdPostRequestItemLineGroupsInner and assigns it to the ItemLineGroups field.
func (o *QuickbooksDesktopChecksIdPostRequest) SetItemLineGroups(v []QuickbooksDesktopBillsIdPostRequestItemLineGroupsInner) {
	o.ItemLineGroups = v
}

func (o QuickbooksDesktopChecksIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopChecksIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.BankAccountId) {
		toSerialize["bankAccountId"] = o.BankAccountId
	}
	if !IsNil(o.PayeeId) {
		toSerialize["payeeId"] = o.PayeeId
	}
	if !IsNil(o.RefNumber) {
		toSerialize["refNumber"] = o.RefNumber
	}
	if !IsNil(o.TransactionDate) {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.IsQueuedForPrint) {
		toSerialize["isQueuedForPrint"] = o.IsQueuedForPrint
	}
	if !IsNil(o.SalesTaxCodeId) {
		toSerialize["salesTaxCodeId"] = o.SalesTaxCodeId
	}
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if !IsNil(o.ApplyToTransactions) {
		toSerialize["applyToTransactions"] = o.ApplyToTransactions
	}
	if !IsNil(o.ClearExpenseLines) {
		toSerialize["clearExpenseLines"] = o.ClearExpenseLines
	}
	if !IsNil(o.ExpenseLines) {
		toSerialize["expenseLines"] = o.ExpenseLines
	}
	if !IsNil(o.ClearItemLines) {
		toSerialize["clearItemLines"] = o.ClearItemLines
	}
	if !IsNil(o.ItemLines) {
		toSerialize["itemLines"] = o.ItemLines
	}
	if !IsNil(o.ItemLineGroups) {
		toSerialize["itemLineGroups"] = o.ItemLineGroups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopChecksIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopChecksIdPostRequest := _QuickbooksDesktopChecksIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopChecksIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopChecksIdPostRequest(varQuickbooksDesktopChecksIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "bankAccountId")
		delete(additionalProperties, "payeeId")
		delete(additionalProperties, "refNumber")
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "memo")
		delete(additionalProperties, "address")
		delete(additionalProperties, "isQueuedForPrint")
		delete(additionalProperties, "salesTaxCodeId")
		delete(additionalProperties, "exchangeRate")
		delete(additionalProperties, "applyToTransactions")
		delete(additionalProperties, "clearExpenseLines")
		delete(additionalProperties, "expenseLines")
		delete(additionalProperties, "clearItemLines")
		delete(additionalProperties, "itemLines")
		delete(additionalProperties, "itemLineGroups")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopChecksIdPostRequest struct {
	value *QuickbooksDesktopChecksIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopChecksIdPostRequest) Get() *QuickbooksDesktopChecksIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopChecksIdPostRequest) Set(val *QuickbooksDesktopChecksIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopChecksIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopChecksIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopChecksIdPostRequest(val *QuickbooksDesktopChecksIdPostRequest) *NullableQuickbooksDesktopChecksIdPostRequest {
	return &NullableQuickbooksDesktopChecksIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopChecksIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopChecksIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


