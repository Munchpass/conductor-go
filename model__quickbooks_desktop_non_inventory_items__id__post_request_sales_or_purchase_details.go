/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
)

// checks if the QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails{}

// QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails Details for non-inventory items that are exclusively sold or exclusively purchased, but not both. This typically applies to non-inventory items (like a purchased office supply that isn't resold) or service items (like consulting services that are sold but not purchased).  **IMPORTANT**: You cannot specify both `salesOrPurchaseDetails` and `salesAndPurchaseDetails` when modifying a non-inventory item because an item cannot have both configurations.
type QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails struct {
	// A description of this item.
	Description *string `json:"description,omitempty"`
	// The price at which this item is purchased or sold, represented as a decimal string.
	Price *string `json:"price,omitempty"`
	// The price of this item expressed as a percentage, used instead of `price` when the item's cost is calculated as a percentage of another amount. For example, a service item that costs a percentage of another item's price.
	PricePercentage *string `json:"pricePercentage,omitempty"`
	// The posting account to which transactions involving this item are posted. This could be an income account when selling or an expense account when purchasing.
	PostingAccountId *string `json:"postingAccountId,omitempty"`
	// When `true`, applies the new account (specified by the `accountId` field) to all existing transactions associated with this item. This updates historical data and should be used with caution. The update will fail if any affected transaction falls within a closed accounting period. If this parameter is not specified, QuickBooks will prompt the user before making any changes.
	UpdateExistingTransactionsAccount *bool `json:"updateExistingTransactionsAccount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails

// NewQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails instantiates a new QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails() *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails {
	this := QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails{}
	return &this
}

// NewQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetailsWithDefaults instantiates a new QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetailsWithDefaults() *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails {
	this := QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) SetDescription(v string) {
	o.Description = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) SetPrice(v string) {
	o.Price = &v
}

// GetPricePercentage returns the PricePercentage field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetPricePercentage() string {
	if o == nil || IsNil(o.PricePercentage) {
		var ret string
		return ret
	}
	return *o.PricePercentage
}

// GetPricePercentageOk returns a tuple with the PricePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetPricePercentageOk() (*string, bool) {
	if o == nil || IsNil(o.PricePercentage) {
		return nil, false
	}
	return o.PricePercentage, true
}

// HasPricePercentage returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) HasPricePercentage() bool {
	if o != nil && !IsNil(o.PricePercentage) {
		return true
	}

	return false
}

// SetPricePercentage gets a reference to the given string and assigns it to the PricePercentage field.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) SetPricePercentage(v string) {
	o.PricePercentage = &v
}

// GetPostingAccountId returns the PostingAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetPostingAccountId() string {
	if o == nil || IsNil(o.PostingAccountId) {
		var ret string
		return ret
	}
	return *o.PostingAccountId
}

// GetPostingAccountIdOk returns a tuple with the PostingAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetPostingAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.PostingAccountId) {
		return nil, false
	}
	return o.PostingAccountId, true
}

// HasPostingAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) HasPostingAccountId() bool {
	if o != nil && !IsNil(o.PostingAccountId) {
		return true
	}

	return false
}

// SetPostingAccountId gets a reference to the given string and assigns it to the PostingAccountId field.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) SetPostingAccountId(v string) {
	o.PostingAccountId = &v
}

// GetUpdateExistingTransactionsAccount returns the UpdateExistingTransactionsAccount field value if set, zero value otherwise.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetUpdateExistingTransactionsAccount() bool {
	if o == nil || IsNil(o.UpdateExistingTransactionsAccount) {
		var ret bool
		return ret
	}
	return *o.UpdateExistingTransactionsAccount
}

// GetUpdateExistingTransactionsAccountOk returns a tuple with the UpdateExistingTransactionsAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) GetUpdateExistingTransactionsAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateExistingTransactionsAccount) {
		return nil, false
	}
	return o.UpdateExistingTransactionsAccount, true
}

// HasUpdateExistingTransactionsAccount returns a boolean if a field has been set.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) HasUpdateExistingTransactionsAccount() bool {
	if o != nil && !IsNil(o.UpdateExistingTransactionsAccount) {
		return true
	}

	return false
}

// SetUpdateExistingTransactionsAccount gets a reference to the given bool and assigns it to the UpdateExistingTransactionsAccount field.
func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) SetUpdateExistingTransactionsAccount(v bool) {
	o.UpdateExistingTransactionsAccount = &v
}

func (o QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PricePercentage) {
		toSerialize["pricePercentage"] = o.PricePercentage
	}
	if !IsNil(o.PostingAccountId) {
		toSerialize["postingAccountId"] = o.PostingAccountId
	}
	if !IsNil(o.UpdateExistingTransactionsAccount) {
		toSerialize["updateExistingTransactionsAccount"] = o.UpdateExistingTransactionsAccount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) UnmarshalJSON(data []byte) (err error) {
	varQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails := _QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails{}

	err = json.Unmarshal(data, &varQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails(varQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "price")
		delete(additionalProperties, "pricePercentage")
		delete(additionalProperties, "postingAccountId")
		delete(additionalProperties, "updateExistingTransactionsAccount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails struct {
	value *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails
	isSet bool
}

func (v NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) Get() *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails {
	return v.value
}

func (v *NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) Set(val *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails(val *QuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) *NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails {
	return &NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopNonInventoryItemsIdPostRequestSalesOrPurchaseDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


