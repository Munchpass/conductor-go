/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopServiceItemsIdPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopServiceItemsIdPostRequest{}

// QuickbooksDesktopServiceItemsIdPostRequest struct for QuickbooksDesktopServiceItemsIdPostRequest
type QuickbooksDesktopServiceItemsIdPostRequest struct {
	// The current QuickBooks-assigned revision number of the service item object you are updating, which you can get by fetching the object first. Provide the most recent `revisionNumber` to ensure you're working with the latest data; otherwise, the update will return an error.
	RevisionNumber string `json:"revisionNumber"`
	// The case-insensitive name of this service item. Not guaranteed to be unique because it does not include the names of its hierarchical parent objects like `fullName` does. For example, two service items could both have the `name` \"Web-Design\", but they could have unique `fullName` values, such as \"Consulting:Web-Design\" and \"Contracting:Web-Design\".  Maximum length: 31 characters.
	Name *string `json:"name,omitempty"`
	Barcode *QuickbooksDesktopServiceItemsPostRequestBarcode `json:"barcode,omitempty"`
	// Indicates whether this service item is active. Inactive objects are typically hidden from views and reports in QuickBooks. Defaults to `true`.
	IsActive *bool `json:"isActive,omitempty"`
	// The service item's class. Classes can be used to categorize objects into meaningful segments, such as department, location, or type of work. In QuickBooks, class tracking is off by default.
	ClassId *string `json:"classId,omitempty"`
	// The parent service item one level above this one in the hierarchy. For example, if this service item has a `fullName` of \"Consulting:Web-Design\", its parent has a `fullName` of \"Consulting\". If this service item is at the top level, this field will be `null`.
	ParentId *string `json:"parentId,omitempty"`
	// The unit-of-measure set associated with this service item, which consists of a base unit and related units.
	UnitOfMeasureSetId *string `json:"unitOfMeasureSetId,omitempty"`
	// Indicates whether to allow changing the service item's unit-of-measure set (using the `unitOfMeasureSetId` field) when the base unit of the new unit-of-measure set does not match that of the currently assigned set. Without setting this field to `true` in this scenario, the request will fail with an error; hence, this field is equivalent to accepting the warning prompt in the QuickBooks UI.  NOTE: Changing the base unit requires you to update the item's quantities-on-hand and cost to reflect the new unit; otherwise, these values will be inaccurate. Alternatively, consider creating a new item with the desired unit-of-measure set and deactivating the old item.
	ForceUnitOfMeasureChange *bool `json:"forceUnitOfMeasureChange,omitempty"`
	// The default sales-tax code for this service item, determining whether it is taxable or non-taxable. This can be overridden at the transaction-line level.  Default codes include \"Non\" (non-taxable) and \"Tax\" (taxable), but custom codes can also be created in QuickBooks. If QuickBooks is not set up to charge sales tax (via the \"Do You Charge Sales Tax?\" preference), it will assign the default non-taxable code to all sales.
	SalesTaxCodeId *string `json:"salesTaxCodeId,omitempty"`
	SalesOrPurchaseDetails *QuickbooksDesktopServiceItemsIdPostRequestSalesOrPurchaseDetails `json:"salesOrPurchaseDetails,omitempty"`
	SalesAndPurchaseDetails *QuickbooksDesktopServiceItemsIdPostRequestSalesAndPurchaseDetails `json:"salesAndPurchaseDetails,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopServiceItemsIdPostRequest QuickbooksDesktopServiceItemsIdPostRequest

// NewQuickbooksDesktopServiceItemsIdPostRequest instantiates a new QuickbooksDesktopServiceItemsIdPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopServiceItemsIdPostRequest(revisionNumber string) *QuickbooksDesktopServiceItemsIdPostRequest {
	this := QuickbooksDesktopServiceItemsIdPostRequest{}
	this.RevisionNumber = revisionNumber
	return &this
}

// NewQuickbooksDesktopServiceItemsIdPostRequestWithDefaults instantiates a new QuickbooksDesktopServiceItemsIdPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopServiceItemsIdPostRequestWithDefaults() *QuickbooksDesktopServiceItemsIdPostRequest {
	this := QuickbooksDesktopServiceItemsIdPostRequest{}
	return &this
}

// GetRevisionNumber returns the RevisionNumber field value
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetRevisionNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevisionNumber
}

// GetRevisionNumberOk returns a tuple with the RevisionNumber field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetRevisionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevisionNumber, true
}

// SetRevisionNumber sets field value
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetRevisionNumber(v string) {
	o.RevisionNumber = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetName(v string) {
	o.Name = &v
}

// GetBarcode returns the Barcode field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetBarcode() QuickbooksDesktopServiceItemsPostRequestBarcode {
	if o == nil || IsNil(o.Barcode) {
		var ret QuickbooksDesktopServiceItemsPostRequestBarcode
		return ret
	}
	return *o.Barcode
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetBarcodeOk() (*QuickbooksDesktopServiceItemsPostRequestBarcode, bool) {
	if o == nil || IsNil(o.Barcode) {
		return nil, false
	}
	return o.Barcode, true
}

// HasBarcode returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasBarcode() bool {
	if o != nil && !IsNil(o.Barcode) {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given QuickbooksDesktopServiceItemsPostRequestBarcode and assigns it to the Barcode field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetBarcode(v QuickbooksDesktopServiceItemsPostRequestBarcode) {
	o.Barcode = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetClassId(v string) {
	o.ClassId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetParentId(v string) {
	o.ParentId = &v
}

// GetUnitOfMeasureSetId returns the UnitOfMeasureSetId field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetUnitOfMeasureSetId() string {
	if o == nil || IsNil(o.UnitOfMeasureSetId) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasureSetId
}

// GetUnitOfMeasureSetIdOk returns a tuple with the UnitOfMeasureSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetUnitOfMeasureSetIdOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasureSetId) {
		return nil, false
	}
	return o.UnitOfMeasureSetId, true
}

// HasUnitOfMeasureSetId returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasUnitOfMeasureSetId() bool {
	if o != nil && !IsNil(o.UnitOfMeasureSetId) {
		return true
	}

	return false
}

// SetUnitOfMeasureSetId gets a reference to the given string and assigns it to the UnitOfMeasureSetId field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetUnitOfMeasureSetId(v string) {
	o.UnitOfMeasureSetId = &v
}

// GetForceUnitOfMeasureChange returns the ForceUnitOfMeasureChange field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetForceUnitOfMeasureChange() bool {
	if o == nil || IsNil(o.ForceUnitOfMeasureChange) {
		var ret bool
		return ret
	}
	return *o.ForceUnitOfMeasureChange
}

// GetForceUnitOfMeasureChangeOk returns a tuple with the ForceUnitOfMeasureChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetForceUnitOfMeasureChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceUnitOfMeasureChange) {
		return nil, false
	}
	return o.ForceUnitOfMeasureChange, true
}

// HasForceUnitOfMeasureChange returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasForceUnitOfMeasureChange() bool {
	if o != nil && !IsNil(o.ForceUnitOfMeasureChange) {
		return true
	}

	return false
}

// SetForceUnitOfMeasureChange gets a reference to the given bool and assigns it to the ForceUnitOfMeasureChange field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetForceUnitOfMeasureChange(v bool) {
	o.ForceUnitOfMeasureChange = &v
}

// GetSalesTaxCodeId returns the SalesTaxCodeId field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetSalesTaxCodeId() string {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		var ret string
		return ret
	}
	return *o.SalesTaxCodeId
}

// GetSalesTaxCodeIdOk returns a tuple with the SalesTaxCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetSalesTaxCodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SalesTaxCodeId) {
		return nil, false
	}
	return o.SalesTaxCodeId, true
}

// HasSalesTaxCodeId returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasSalesTaxCodeId() bool {
	if o != nil && !IsNil(o.SalesTaxCodeId) {
		return true
	}

	return false
}

// SetSalesTaxCodeId gets a reference to the given string and assigns it to the SalesTaxCodeId field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetSalesTaxCodeId(v string) {
	o.SalesTaxCodeId = &v
}

// GetSalesOrPurchaseDetails returns the SalesOrPurchaseDetails field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetSalesOrPurchaseDetails() QuickbooksDesktopServiceItemsIdPostRequestSalesOrPurchaseDetails {
	if o == nil || IsNil(o.SalesOrPurchaseDetails) {
		var ret QuickbooksDesktopServiceItemsIdPostRequestSalesOrPurchaseDetails
		return ret
	}
	return *o.SalesOrPurchaseDetails
}

// GetSalesOrPurchaseDetailsOk returns a tuple with the SalesOrPurchaseDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetSalesOrPurchaseDetailsOk() (*QuickbooksDesktopServiceItemsIdPostRequestSalesOrPurchaseDetails, bool) {
	if o == nil || IsNil(o.SalesOrPurchaseDetails) {
		return nil, false
	}
	return o.SalesOrPurchaseDetails, true
}

// HasSalesOrPurchaseDetails returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasSalesOrPurchaseDetails() bool {
	if o != nil && !IsNil(o.SalesOrPurchaseDetails) {
		return true
	}

	return false
}

// SetSalesOrPurchaseDetails gets a reference to the given QuickbooksDesktopServiceItemsIdPostRequestSalesOrPurchaseDetails and assigns it to the SalesOrPurchaseDetails field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetSalesOrPurchaseDetails(v QuickbooksDesktopServiceItemsIdPostRequestSalesOrPurchaseDetails) {
	o.SalesOrPurchaseDetails = &v
}

// GetSalesAndPurchaseDetails returns the SalesAndPurchaseDetails field value if set, zero value otherwise.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetSalesAndPurchaseDetails() QuickbooksDesktopServiceItemsIdPostRequestSalesAndPurchaseDetails {
	if o == nil || IsNil(o.SalesAndPurchaseDetails) {
		var ret QuickbooksDesktopServiceItemsIdPostRequestSalesAndPurchaseDetails
		return ret
	}
	return *o.SalesAndPurchaseDetails
}

// GetSalesAndPurchaseDetailsOk returns a tuple with the SalesAndPurchaseDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) GetSalesAndPurchaseDetailsOk() (*QuickbooksDesktopServiceItemsIdPostRequestSalesAndPurchaseDetails, bool) {
	if o == nil || IsNil(o.SalesAndPurchaseDetails) {
		return nil, false
	}
	return o.SalesAndPurchaseDetails, true
}

// HasSalesAndPurchaseDetails returns a boolean if a field has been set.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) HasSalesAndPurchaseDetails() bool {
	if o != nil && !IsNil(o.SalesAndPurchaseDetails) {
		return true
	}

	return false
}

// SetSalesAndPurchaseDetails gets a reference to the given QuickbooksDesktopServiceItemsIdPostRequestSalesAndPurchaseDetails and assigns it to the SalesAndPurchaseDetails field.
func (o *QuickbooksDesktopServiceItemsIdPostRequest) SetSalesAndPurchaseDetails(v QuickbooksDesktopServiceItemsIdPostRequestSalesAndPurchaseDetails) {
	o.SalesAndPurchaseDetails = &v
}

func (o QuickbooksDesktopServiceItemsIdPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopServiceItemsIdPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revisionNumber"] = o.RevisionNumber
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Barcode) {
		toSerialize["barcode"] = o.Barcode
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.UnitOfMeasureSetId) {
		toSerialize["unitOfMeasureSetId"] = o.UnitOfMeasureSetId
	}
	if !IsNil(o.ForceUnitOfMeasureChange) {
		toSerialize["forceUnitOfMeasureChange"] = o.ForceUnitOfMeasureChange
	}
	if !IsNil(o.SalesTaxCodeId) {
		toSerialize["salesTaxCodeId"] = o.SalesTaxCodeId
	}
	if !IsNil(o.SalesOrPurchaseDetails) {
		toSerialize["salesOrPurchaseDetails"] = o.SalesOrPurchaseDetails
	}
	if !IsNil(o.SalesAndPurchaseDetails) {
		toSerialize["salesAndPurchaseDetails"] = o.SalesAndPurchaseDetails
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopServiceItemsIdPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revisionNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopServiceItemsIdPostRequest := _QuickbooksDesktopServiceItemsIdPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopServiceItemsIdPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopServiceItemsIdPostRequest(varQuickbooksDesktopServiceItemsIdPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revisionNumber")
		delete(additionalProperties, "name")
		delete(additionalProperties, "barcode")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "classId")
		delete(additionalProperties, "parentId")
		delete(additionalProperties, "unitOfMeasureSetId")
		delete(additionalProperties, "forceUnitOfMeasureChange")
		delete(additionalProperties, "salesTaxCodeId")
		delete(additionalProperties, "salesOrPurchaseDetails")
		delete(additionalProperties, "salesAndPurchaseDetails")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopServiceItemsIdPostRequest struct {
	value *QuickbooksDesktopServiceItemsIdPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopServiceItemsIdPostRequest) Get() *QuickbooksDesktopServiceItemsIdPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopServiceItemsIdPostRequest) Set(val *QuickbooksDesktopServiceItemsIdPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopServiceItemsIdPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopServiceItemsIdPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopServiceItemsIdPostRequest(val *QuickbooksDesktopServiceItemsIdPostRequest) *NullableQuickbooksDesktopServiceItemsIdPostRequest {
	return &NullableQuickbooksDesktopServiceItemsIdPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopServiceItemsIdPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopServiceItemsIdPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


