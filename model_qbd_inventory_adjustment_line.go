/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdInventoryAdjustmentLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdInventoryAdjustmentLine{}

// QbdInventoryAdjustmentLine struct for QbdInventoryAdjustmentLine
type QbdInventoryAdjustmentLine struct {
	// The unique identifier assigned by QuickBooks to this inventory adjustment line. This ID is unique across all transaction line types.
	Id string `json:"id"`
	// The type of object. This value is always `\"qbd_inventory_adjustment_line\"`.
	ObjectType string `json:"objectType"`
	Item QbdInventoryAdjustmentLineItem `json:"item"`
	// The serial number of the item associated with this inventory adjustment line. This is used for tracking individual units of serialized inventory items.
	SerialNumber string `json:"serialNumber"`
	// Indicates whether this inventory adjustment line's serial number was added or removed from the inventory.
	SerialNumberAction string `json:"serialNumberAction"`
	// The lot number of the item associated with this inventory adjustment line. Used for tracking groups of inventory items that are purchased or manufactured together.
	LotNumber string `json:"lotNumber"`
	// The expiration date for the serial number or lot number of the item associated with this inventory adjustment line, in ISO 8601 format (YYYY-MM-DD). This is particularly relevant for perishable or time-sensitive inventory items. Note that this field is only supported on QuickBooks Desktop 2023 or later.
	ExpirationDate string `json:"expirationDate"`
	InventorySiteLocation QbdInventoryAdjustmentLineInventorySiteLocation `json:"inventorySiteLocation"`
	// Either a positive or negative number that shows the change in quantity for the inventory item associated with this inventory adjustment line. A positive number increases the quantity, while a negative number decreases it.
	QuantityDifference float32 `json:"quantityDifference"`
	// Either a positive or negative number that shows the change in the total value of the entire stock of the inventory item associated with this inventory adjustment line. A positive number increases the value, while a negative number decreases it.
	ValueDifference float32 `json:"valueDifference"`
	AdditionalProperties map[string]interface{}
}

type _QbdInventoryAdjustmentLine QbdInventoryAdjustmentLine

// NewQbdInventoryAdjustmentLine instantiates a new QbdInventoryAdjustmentLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdInventoryAdjustmentLine(id string, objectType string, item QbdInventoryAdjustmentLineItem, serialNumber string, serialNumberAction string, lotNumber string, expirationDate string, inventorySiteLocation QbdInventoryAdjustmentLineInventorySiteLocation, quantityDifference float32, valueDifference float32) *QbdInventoryAdjustmentLine {
	this := QbdInventoryAdjustmentLine{}
	this.Id = id
	this.ObjectType = objectType
	this.Item = item
	this.SerialNumber = serialNumber
	this.SerialNumberAction = serialNumberAction
	this.LotNumber = lotNumber
	this.ExpirationDate = expirationDate
	this.InventorySiteLocation = inventorySiteLocation
	this.QuantityDifference = quantityDifference
	this.ValueDifference = valueDifference
	return &this
}

// NewQbdInventoryAdjustmentLineWithDefaults instantiates a new QbdInventoryAdjustmentLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdInventoryAdjustmentLineWithDefaults() *QbdInventoryAdjustmentLine {
	this := QbdInventoryAdjustmentLine{}
	return &this
}

// GetId returns the Id field value
func (o *QbdInventoryAdjustmentLine) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QbdInventoryAdjustmentLine) SetId(v string) {
	o.Id = v
}

// GetObjectType returns the ObjectType field value
func (o *QbdInventoryAdjustmentLine) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *QbdInventoryAdjustmentLine) SetObjectType(v string) {
	o.ObjectType = v
}

// GetItem returns the Item field value
func (o *QbdInventoryAdjustmentLine) GetItem() QbdInventoryAdjustmentLineItem {
	if o == nil {
		var ret QbdInventoryAdjustmentLineItem
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetItemOk() (*QbdInventoryAdjustmentLineItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *QbdInventoryAdjustmentLine) SetItem(v QbdInventoryAdjustmentLineItem) {
	o.Item = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *QbdInventoryAdjustmentLine) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *QbdInventoryAdjustmentLine) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetSerialNumberAction returns the SerialNumberAction field value
func (o *QbdInventoryAdjustmentLine) GetSerialNumberAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumberAction
}

// GetSerialNumberActionOk returns a tuple with the SerialNumberAction field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetSerialNumberActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumberAction, true
}

// SetSerialNumberAction sets field value
func (o *QbdInventoryAdjustmentLine) SetSerialNumberAction(v string) {
	o.SerialNumberAction = v
}

// GetLotNumber returns the LotNumber field value
func (o *QbdInventoryAdjustmentLine) GetLotNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LotNumber
}

// GetLotNumberOk returns a tuple with the LotNumber field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetLotNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LotNumber, true
}

// SetLotNumber sets field value
func (o *QbdInventoryAdjustmentLine) SetLotNumber(v string) {
	o.LotNumber = v
}

// GetExpirationDate returns the ExpirationDate field value
func (o *QbdInventoryAdjustmentLine) GetExpirationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationDate, true
}

// SetExpirationDate sets field value
func (o *QbdInventoryAdjustmentLine) SetExpirationDate(v string) {
	o.ExpirationDate = v
}

// GetInventorySiteLocation returns the InventorySiteLocation field value
func (o *QbdInventoryAdjustmentLine) GetInventorySiteLocation() QbdInventoryAdjustmentLineInventorySiteLocation {
	if o == nil {
		var ret QbdInventoryAdjustmentLineInventorySiteLocation
		return ret
	}

	return o.InventorySiteLocation
}

// GetInventorySiteLocationOk returns a tuple with the InventorySiteLocation field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetInventorySiteLocationOk() (*QbdInventoryAdjustmentLineInventorySiteLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InventorySiteLocation, true
}

// SetInventorySiteLocation sets field value
func (o *QbdInventoryAdjustmentLine) SetInventorySiteLocation(v QbdInventoryAdjustmentLineInventorySiteLocation) {
	o.InventorySiteLocation = v
}

// GetQuantityDifference returns the QuantityDifference field value
func (o *QbdInventoryAdjustmentLine) GetQuantityDifference() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.QuantityDifference
}

// GetQuantityDifferenceOk returns a tuple with the QuantityDifference field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetQuantityDifferenceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuantityDifference, true
}

// SetQuantityDifference sets field value
func (o *QbdInventoryAdjustmentLine) SetQuantityDifference(v float32) {
	o.QuantityDifference = v
}

// GetValueDifference returns the ValueDifference field value
func (o *QbdInventoryAdjustmentLine) GetValueDifference() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ValueDifference
}

// GetValueDifferenceOk returns a tuple with the ValueDifference field value
// and a boolean to check if the value has been set.
func (o *QbdInventoryAdjustmentLine) GetValueDifferenceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueDifference, true
}

// SetValueDifference sets field value
func (o *QbdInventoryAdjustmentLine) SetValueDifference(v float32) {
	o.ValueDifference = v
}

func (o QbdInventoryAdjustmentLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdInventoryAdjustmentLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["objectType"] = o.ObjectType
	toSerialize["item"] = o.Item
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["serialNumberAction"] = o.SerialNumberAction
	toSerialize["lotNumber"] = o.LotNumber
	toSerialize["expirationDate"] = o.ExpirationDate
	toSerialize["inventorySiteLocation"] = o.InventorySiteLocation
	toSerialize["quantityDifference"] = o.QuantityDifference
	toSerialize["valueDifference"] = o.ValueDifference

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdInventoryAdjustmentLine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"objectType",
		"item",
		"serialNumber",
		"serialNumberAction",
		"lotNumber",
		"expirationDate",
		"inventorySiteLocation",
		"quantityDifference",
		"valueDifference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdInventoryAdjustmentLine := _QbdInventoryAdjustmentLine{}

	err = json.Unmarshal(data, &varQbdInventoryAdjustmentLine)

	if err != nil {
		return err
	}

	*o = QbdInventoryAdjustmentLine(varQbdInventoryAdjustmentLine)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "objectType")
		delete(additionalProperties, "item")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "serialNumberAction")
		delete(additionalProperties, "lotNumber")
		delete(additionalProperties, "expirationDate")
		delete(additionalProperties, "inventorySiteLocation")
		delete(additionalProperties, "quantityDifference")
		delete(additionalProperties, "valueDifference")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdInventoryAdjustmentLine struct {
	value *QbdInventoryAdjustmentLine
	isSet bool
}

func (v NullableQbdInventoryAdjustmentLine) Get() *QbdInventoryAdjustmentLine {
	return v.value
}

func (v *NullableQbdInventoryAdjustmentLine) Set(val *QbdInventoryAdjustmentLine) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdInventoryAdjustmentLine) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdInventoryAdjustmentLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdInventoryAdjustmentLine(val *QbdInventoryAdjustmentLine) *NullableQbdInventoryAdjustmentLine {
	return &NullableQbdInventoryAdjustmentLine{value: val, isSet: true}
}

func (v NullableQbdInventoryAdjustmentLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdInventoryAdjustmentLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


