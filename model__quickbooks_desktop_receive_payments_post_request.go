/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QuickbooksDesktopReceivePaymentsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickbooksDesktopReceivePaymentsPostRequest{}

// QuickbooksDesktopReceivePaymentsPostRequest struct for QuickbooksDesktopReceivePaymentsPostRequest
type QuickbooksDesktopReceivePaymentsPostRequest struct {
	// The customer or customer-job to which the payment for this receive-payment is credited.
	CustomerId string `json:"customerId"`
	// The Accounts-Receivable (A/R) account to which this receive-payment is assigned, used to track the amount owed. If not specified, QuickBooks Desktop will use its default A/R account.  **IMPORTANT**: If this receive-payment is linked to other transactions, this A/R account must match the `receivablesAccount` used in all linked transactions. For example, when refunding a credit card payment, the A/R account must match the one used in the original credit transactions being refunded.
	ReceivablesAccountId *string `json:"receivablesAccountId,omitempty"`
	// The date of this receive-payment, in ISO 8601 format (YYYY-MM-DD).
	TransactionDate string `json:"transactionDate"`
	// The case-sensitive user-defined reference number for this receive-payment, which can be used to identify the transaction in QuickBooks. This value is not required to be unique and can be arbitrarily changed by the QuickBooks user. When left blank in this create request, this field will be left blank in QuickBooks (i.e., it does *not* auto-increment).
	RefNumber *string `json:"refNumber,omitempty"`
	// The total monetary amount of this receive-payment, represented as a decimal string.  **NOTE**: The sum of the `paymentAmount` amounts in the `applyToTransactions` array cannot exceed the `totalAmount`, or you will receive an error.
	TotalAmount string `json:"totalAmount"`
	// The market exchange rate between this receive-payment's currency and the home currency in QuickBooks at the time of this transaction. Represented as a decimal value (e.g., 1.2345 for 1 EUR = 1.2345 USD if USD is the home currency).
	ExchangeRate *float32 `json:"exchangeRate,omitempty"`
	// The receive-payment's payment method (e.g., cash, check, credit card).  **NOTE**: If this receive-payment contains credit card transaction data supplied from QuickBooks Merchant Services (QBMS) transaction responses, you must specify a credit card payment method (e.g., \"Visa\", \"MasterCard\", etc.).
	PaymentMethodId *string `json:"paymentMethodId,omitempty"`
	// A memo or note for this receive-payment that will be displayed at the beginning of reports containing details about this receive-payment.
	Memo *string `json:"memo,omitempty"`
	// The account where the funds for this receive-payment will be or have been deposited. If omitted, QuickBooks will use the default Undeposited Funds account.
	DepositToAccountId *string `json:"depositToAccountId,omitempty"`
	CreditCardTransaction *QuickbooksDesktopReceivePaymentsPostRequestCreditCardTransaction `json:"creditCardTransaction,omitempty"`
	// A globally unique identifier (GUID) you, the developer, can provide for tracking this object in your external system. This field is immutable and can only be set during object creation.  **IMPORTANT**: This field must be formatted as a valid GUID; otherwise, QuickBooks will return an error.
	ExternalId *string `json:"externalId,omitempty"`
	// When `true`, QuickBooks applies `totalAmount` to any outstanding transaction that exactly matches `totalAmount`. If no exact match is found, this receive-payment is applied to the oldest outstanding transaction for the customer-job. When `false`, QuickBooks records the payment but does not apply it to any specific transaction, causing the amount to appear as a credit on the customer-job's next transaction.  **IMPORTANT**: You must specify either `isAutoApply` or `applyToTransactions` when creating a receive-payment, but never both.
	IsAutoApply *bool `json:"isAutoApply,omitempty"`
	// The invoices to be paid by this receive-payment. This will create a link between this receive-payment and the specified invoices.  **IMPORTANT**: In each `applyToTransactions` object, you must specify either `paymentAmount`, `applyCredits`, `discountAmount`, or any combination of these; if none of these are specified, you will receive an error for an empty transaction.  **IMPORTANT**: The target invoice must have `isPaid=false`, otherwise, QuickBooks will report this object as \"cannot be found\".  **NOTE**: You must specify either `isAutoApply` or `applyToTransactions` when creating a receive-payment, but never both.
	ApplyToTransactions []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInner `json:"applyToTransactions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuickbooksDesktopReceivePaymentsPostRequest QuickbooksDesktopReceivePaymentsPostRequest

// NewQuickbooksDesktopReceivePaymentsPostRequest instantiates a new QuickbooksDesktopReceivePaymentsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickbooksDesktopReceivePaymentsPostRequest(customerId string, transactionDate string, totalAmount string) *QuickbooksDesktopReceivePaymentsPostRequest {
	this := QuickbooksDesktopReceivePaymentsPostRequest{}
	this.CustomerId = customerId
	this.TransactionDate = transactionDate
	this.TotalAmount = totalAmount
	var isAutoApply bool = false
	this.IsAutoApply = &isAutoApply
	return &this
}

// NewQuickbooksDesktopReceivePaymentsPostRequestWithDefaults instantiates a new QuickbooksDesktopReceivePaymentsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickbooksDesktopReceivePaymentsPostRequestWithDefaults() *QuickbooksDesktopReceivePaymentsPostRequest {
	this := QuickbooksDesktopReceivePaymentsPostRequest{}
	var isAutoApply bool = false
	this.IsAutoApply = &isAutoApply
	return &this
}

// GetCustomerId returns the CustomerId field value
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetCustomerId(v string) {
	o.CustomerId = v
}

// GetReceivablesAccountId returns the ReceivablesAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetReceivablesAccountId() string {
	if o == nil || IsNil(o.ReceivablesAccountId) {
		var ret string
		return ret
	}
	return *o.ReceivablesAccountId
}

// GetReceivablesAccountIdOk returns a tuple with the ReceivablesAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetReceivablesAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivablesAccountId) {
		return nil, false
	}
	return o.ReceivablesAccountId, true
}

// HasReceivablesAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasReceivablesAccountId() bool {
	if o != nil && !IsNil(o.ReceivablesAccountId) {
		return true
	}

	return false
}

// SetReceivablesAccountId gets a reference to the given string and assigns it to the ReceivablesAccountId field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetReceivablesAccountId(v string) {
	o.ReceivablesAccountId = &v
}

// GetTransactionDate returns the TransactionDate field value
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetTransactionDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetTransactionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionDate, true
}

// SetTransactionDate sets field value
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetTransactionDate(v string) {
	o.TransactionDate = v
}

// GetRefNumber returns the RefNumber field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetRefNumber() string {
	if o == nil || IsNil(o.RefNumber) {
		var ret string
		return ret
	}
	return *o.RefNumber
}

// GetRefNumberOk returns a tuple with the RefNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetRefNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RefNumber) {
		return nil, false
	}
	return o.RefNumber, true
}

// HasRefNumber returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasRefNumber() bool {
	if o != nil && !IsNil(o.RefNumber) {
		return true
	}

	return false
}

// SetRefNumber gets a reference to the given string and assigns it to the RefNumber field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetRefNumber(v string) {
	o.RefNumber = &v
}

// GetTotalAmount returns the TotalAmount field value
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetTotalAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetTotalAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmount, true
}

// SetTotalAmount sets field value
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetTotalAmount(v string) {
	o.TotalAmount = v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetExchangeRate() float32 {
	if o == nil || IsNil(o.ExchangeRate) {
		var ret float32
		return ret
	}
	return *o.ExchangeRate
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetExchangeRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExchangeRate) {
		return nil, false
	}
	return o.ExchangeRate, true
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasExchangeRate() bool {
	if o != nil && !IsNil(o.ExchangeRate) {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given float32 and assigns it to the ExchangeRate field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetExchangeRate(v float32) {
	o.ExchangeRate = &v
}

// GetPaymentMethodId returns the PaymentMethodId field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetPaymentMethodId() string {
	if o == nil || IsNil(o.PaymentMethodId) {
		var ret string
		return ret
	}
	return *o.PaymentMethodId
}

// GetPaymentMethodIdOk returns a tuple with the PaymentMethodId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetPaymentMethodIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethodId) {
		return nil, false
	}
	return o.PaymentMethodId, true
}

// HasPaymentMethodId returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasPaymentMethodId() bool {
	if o != nil && !IsNil(o.PaymentMethodId) {
		return true
	}

	return false
}

// SetPaymentMethodId gets a reference to the given string and assigns it to the PaymentMethodId field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetPaymentMethodId(v string) {
	o.PaymentMethodId = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetMemo(v string) {
	o.Memo = &v
}

// GetDepositToAccountId returns the DepositToAccountId field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetDepositToAccountId() string {
	if o == nil || IsNil(o.DepositToAccountId) {
		var ret string
		return ret
	}
	return *o.DepositToAccountId
}

// GetDepositToAccountIdOk returns a tuple with the DepositToAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetDepositToAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.DepositToAccountId) {
		return nil, false
	}
	return o.DepositToAccountId, true
}

// HasDepositToAccountId returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasDepositToAccountId() bool {
	if o != nil && !IsNil(o.DepositToAccountId) {
		return true
	}

	return false
}

// SetDepositToAccountId gets a reference to the given string and assigns it to the DepositToAccountId field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetDepositToAccountId(v string) {
	o.DepositToAccountId = &v
}

// GetCreditCardTransaction returns the CreditCardTransaction field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetCreditCardTransaction() QuickbooksDesktopReceivePaymentsPostRequestCreditCardTransaction {
	if o == nil || IsNil(o.CreditCardTransaction) {
		var ret QuickbooksDesktopReceivePaymentsPostRequestCreditCardTransaction
		return ret
	}
	return *o.CreditCardTransaction
}

// GetCreditCardTransactionOk returns a tuple with the CreditCardTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetCreditCardTransactionOk() (*QuickbooksDesktopReceivePaymentsPostRequestCreditCardTransaction, bool) {
	if o == nil || IsNil(o.CreditCardTransaction) {
		return nil, false
	}
	return o.CreditCardTransaction, true
}

// HasCreditCardTransaction returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasCreditCardTransaction() bool {
	if o != nil && !IsNil(o.CreditCardTransaction) {
		return true
	}

	return false
}

// SetCreditCardTransaction gets a reference to the given QuickbooksDesktopReceivePaymentsPostRequestCreditCardTransaction and assigns it to the CreditCardTransaction field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetCreditCardTransaction(v QuickbooksDesktopReceivePaymentsPostRequestCreditCardTransaction) {
	o.CreditCardTransaction = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetIsAutoApply returns the IsAutoApply field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetIsAutoApply() bool {
	if o == nil || IsNil(o.IsAutoApply) {
		var ret bool
		return ret
	}
	return *o.IsAutoApply
}

// GetIsAutoApplyOk returns a tuple with the IsAutoApply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetIsAutoApplyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoApply) {
		return nil, false
	}
	return o.IsAutoApply, true
}

// HasIsAutoApply returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasIsAutoApply() bool {
	if o != nil && !IsNil(o.IsAutoApply) {
		return true
	}

	return false
}

// SetIsAutoApply gets a reference to the given bool and assigns it to the IsAutoApply field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetIsAutoApply(v bool) {
	o.IsAutoApply = &v
}

// GetApplyToTransactions returns the ApplyToTransactions field value if set, zero value otherwise.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetApplyToTransactions() []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInner {
	if o == nil || IsNil(o.ApplyToTransactions) {
		var ret []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInner
		return ret
	}
	return o.ApplyToTransactions
}

// GetApplyToTransactionsOk returns a tuple with the ApplyToTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) GetApplyToTransactionsOk() ([]QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInner, bool) {
	if o == nil || IsNil(o.ApplyToTransactions) {
		return nil, false
	}
	return o.ApplyToTransactions, true
}

// HasApplyToTransactions returns a boolean if a field has been set.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) HasApplyToTransactions() bool {
	if o != nil && !IsNil(o.ApplyToTransactions) {
		return true
	}

	return false
}

// SetApplyToTransactions gets a reference to the given []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInner and assigns it to the ApplyToTransactions field.
func (o *QuickbooksDesktopReceivePaymentsPostRequest) SetApplyToTransactions(v []QuickbooksDesktopBillCheckPaymentsPostRequestApplyToTransactionsInner) {
	o.ApplyToTransactions = v
}

func (o QuickbooksDesktopReceivePaymentsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickbooksDesktopReceivePaymentsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customerId"] = o.CustomerId
	if !IsNil(o.ReceivablesAccountId) {
		toSerialize["receivablesAccountId"] = o.ReceivablesAccountId
	}
	toSerialize["transactionDate"] = o.TransactionDate
	if !IsNil(o.RefNumber) {
		toSerialize["refNumber"] = o.RefNumber
	}
	toSerialize["totalAmount"] = o.TotalAmount
	if !IsNil(o.ExchangeRate) {
		toSerialize["exchangeRate"] = o.ExchangeRate
	}
	if !IsNil(o.PaymentMethodId) {
		toSerialize["paymentMethodId"] = o.PaymentMethodId
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	if !IsNil(o.DepositToAccountId) {
		toSerialize["depositToAccountId"] = o.DepositToAccountId
	}
	if !IsNil(o.CreditCardTransaction) {
		toSerialize["creditCardTransaction"] = o.CreditCardTransaction
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.IsAutoApply) {
		toSerialize["isAutoApply"] = o.IsAutoApply
	}
	if !IsNil(o.ApplyToTransactions) {
		toSerialize["applyToTransactions"] = o.ApplyToTransactions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuickbooksDesktopReceivePaymentsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customerId",
		"transactionDate",
		"totalAmount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuickbooksDesktopReceivePaymentsPostRequest := _QuickbooksDesktopReceivePaymentsPostRequest{}

	err = json.Unmarshal(data, &varQuickbooksDesktopReceivePaymentsPostRequest)

	if err != nil {
		return err
	}

	*o = QuickbooksDesktopReceivePaymentsPostRequest(varQuickbooksDesktopReceivePaymentsPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customerId")
		delete(additionalProperties, "receivablesAccountId")
		delete(additionalProperties, "transactionDate")
		delete(additionalProperties, "refNumber")
		delete(additionalProperties, "totalAmount")
		delete(additionalProperties, "exchangeRate")
		delete(additionalProperties, "paymentMethodId")
		delete(additionalProperties, "memo")
		delete(additionalProperties, "depositToAccountId")
		delete(additionalProperties, "creditCardTransaction")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "isAutoApply")
		delete(additionalProperties, "applyToTransactions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuickbooksDesktopReceivePaymentsPostRequest struct {
	value *QuickbooksDesktopReceivePaymentsPostRequest
	isSet bool
}

func (v NullableQuickbooksDesktopReceivePaymentsPostRequest) Get() *QuickbooksDesktopReceivePaymentsPostRequest {
	return v.value
}

func (v *NullableQuickbooksDesktopReceivePaymentsPostRequest) Set(val *QuickbooksDesktopReceivePaymentsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickbooksDesktopReceivePaymentsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickbooksDesktopReceivePaymentsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickbooksDesktopReceivePaymentsPostRequest(val *QuickbooksDesktopReceivePaymentsPostRequest) *NullableQuickbooksDesktopReceivePaymentsPostRequest {
	return &NullableQuickbooksDesktopReceivePaymentsPostRequest{value: val, isSet: true}
}

func (v NullableQuickbooksDesktopReceivePaymentsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickbooksDesktopReceivePaymentsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


