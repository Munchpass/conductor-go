/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdMultiCurrencyPreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdMultiCurrencyPreferences{}

// QbdMultiCurrencyPreferences struct for QbdMultiCurrencyPreferences
type QbdMultiCurrencyPreferences struct {
	// Indicates whether the multicurrency feature is enabled for this company file. Once multicurrency is enabled for a company file, it cannot be disabled.
	IsMultiCurrencyEnabled bool `json:"isMultiCurrencyEnabled"`
	HomeCurrency QbdMultiCurrencyPreferencesHomeCurrency `json:"homeCurrency"`
	AdditionalProperties map[string]interface{}
}

type _QbdMultiCurrencyPreferences QbdMultiCurrencyPreferences

// NewQbdMultiCurrencyPreferences instantiates a new QbdMultiCurrencyPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdMultiCurrencyPreferences(isMultiCurrencyEnabled bool, homeCurrency QbdMultiCurrencyPreferencesHomeCurrency) *QbdMultiCurrencyPreferences {
	this := QbdMultiCurrencyPreferences{}
	this.IsMultiCurrencyEnabled = isMultiCurrencyEnabled
	this.HomeCurrency = homeCurrency
	return &this
}

// NewQbdMultiCurrencyPreferencesWithDefaults instantiates a new QbdMultiCurrencyPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdMultiCurrencyPreferencesWithDefaults() *QbdMultiCurrencyPreferences {
	this := QbdMultiCurrencyPreferences{}
	return &this
}

// GetIsMultiCurrencyEnabled returns the IsMultiCurrencyEnabled field value
func (o *QbdMultiCurrencyPreferences) GetIsMultiCurrencyEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMultiCurrencyEnabled
}

// GetIsMultiCurrencyEnabledOk returns a tuple with the IsMultiCurrencyEnabled field value
// and a boolean to check if the value has been set.
func (o *QbdMultiCurrencyPreferences) GetIsMultiCurrencyEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMultiCurrencyEnabled, true
}

// SetIsMultiCurrencyEnabled sets field value
func (o *QbdMultiCurrencyPreferences) SetIsMultiCurrencyEnabled(v bool) {
	o.IsMultiCurrencyEnabled = v
}

// GetHomeCurrency returns the HomeCurrency field value
func (o *QbdMultiCurrencyPreferences) GetHomeCurrency() QbdMultiCurrencyPreferencesHomeCurrency {
	if o == nil {
		var ret QbdMultiCurrencyPreferencesHomeCurrency
		return ret
	}

	return o.HomeCurrency
}

// GetHomeCurrencyOk returns a tuple with the HomeCurrency field value
// and a boolean to check if the value has been set.
func (o *QbdMultiCurrencyPreferences) GetHomeCurrencyOk() (*QbdMultiCurrencyPreferencesHomeCurrency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HomeCurrency, true
}

// SetHomeCurrency sets field value
func (o *QbdMultiCurrencyPreferences) SetHomeCurrency(v QbdMultiCurrencyPreferencesHomeCurrency) {
	o.HomeCurrency = v
}

func (o QbdMultiCurrencyPreferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdMultiCurrencyPreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isMultiCurrencyEnabled"] = o.IsMultiCurrencyEnabled
	toSerialize["homeCurrency"] = o.HomeCurrency

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdMultiCurrencyPreferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isMultiCurrencyEnabled",
		"homeCurrency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdMultiCurrencyPreferences := _QbdMultiCurrencyPreferences{}

	err = json.Unmarshal(data, &varQbdMultiCurrencyPreferences)

	if err != nil {
		return err
	}

	*o = QbdMultiCurrencyPreferences(varQbdMultiCurrencyPreferences)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "isMultiCurrencyEnabled")
		delete(additionalProperties, "homeCurrency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdMultiCurrencyPreferences struct {
	value *QbdMultiCurrencyPreferences
	isSet bool
}

func (v NullableQbdMultiCurrencyPreferences) Get() *QbdMultiCurrencyPreferences {
	return v.value
}

func (v *NullableQbdMultiCurrencyPreferences) Set(val *QbdMultiCurrencyPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdMultiCurrencyPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdMultiCurrencyPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdMultiCurrencyPreferences(val *QbdMultiCurrencyPreferences) *NullableQbdMultiCurrencyPreferences {
	return &NullableQbdMultiCurrencyPreferences{value: val, isSet: true}
}

func (v NullableQbdMultiCurrencyPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdMultiCurrencyPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


