/*
Conductor API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package conductor

import (
	"encoding/json"
	"fmt"
)

// checks if the QbdReportsPreferences type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QbdReportsPreferences{}

// QbdReportsPreferences struct for QbdReportsPreferences
type QbdReportsPreferences struct {
	// Determines how the aging periods are calculated in accounts receivable and accounts payable reports for this company file. When set to `age_from_due_date`, the overdue days shown in these reports begin with the due date on the invoice. When set to `age_from_transaction_date`, the overdue days begin with the date the transaction was created.
	AgingReportBasis string `json:"agingReportBasis"`
	// Indicates whether summary reports for this company file use cash-basis or accrual-basis bookkeeping. With `accrual` basis, transactions are recorded when they occur regardless of when payment is received or made. With `cash` basis, transactions are recorded only when payment is received or made.
	SummaryReportBasis string `json:"summaryReportBasis"`
	AdditionalProperties map[string]interface{}
}

type _QbdReportsPreferences QbdReportsPreferences

// NewQbdReportsPreferences instantiates a new QbdReportsPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQbdReportsPreferences(agingReportBasis string, summaryReportBasis string) *QbdReportsPreferences {
	this := QbdReportsPreferences{}
	this.AgingReportBasis = agingReportBasis
	this.SummaryReportBasis = summaryReportBasis
	return &this
}

// NewQbdReportsPreferencesWithDefaults instantiates a new QbdReportsPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQbdReportsPreferencesWithDefaults() *QbdReportsPreferences {
	this := QbdReportsPreferences{}
	return &this
}

// GetAgingReportBasis returns the AgingReportBasis field value
func (o *QbdReportsPreferences) GetAgingReportBasis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgingReportBasis
}

// GetAgingReportBasisOk returns a tuple with the AgingReportBasis field value
// and a boolean to check if the value has been set.
func (o *QbdReportsPreferences) GetAgingReportBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgingReportBasis, true
}

// SetAgingReportBasis sets field value
func (o *QbdReportsPreferences) SetAgingReportBasis(v string) {
	o.AgingReportBasis = v
}

// GetSummaryReportBasis returns the SummaryReportBasis field value
func (o *QbdReportsPreferences) GetSummaryReportBasis() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SummaryReportBasis
}

// GetSummaryReportBasisOk returns a tuple with the SummaryReportBasis field value
// and a boolean to check if the value has been set.
func (o *QbdReportsPreferences) GetSummaryReportBasisOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SummaryReportBasis, true
}

// SetSummaryReportBasis sets field value
func (o *QbdReportsPreferences) SetSummaryReportBasis(v string) {
	o.SummaryReportBasis = v
}

func (o QbdReportsPreferences) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QbdReportsPreferences) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["agingReportBasis"] = o.AgingReportBasis
	toSerialize["summaryReportBasis"] = o.SummaryReportBasis

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QbdReportsPreferences) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"agingReportBasis",
		"summaryReportBasis",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQbdReportsPreferences := _QbdReportsPreferences{}

	err = json.Unmarshal(data, &varQbdReportsPreferences)

	if err != nil {
		return err
	}

	*o = QbdReportsPreferences(varQbdReportsPreferences)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "agingReportBasis")
		delete(additionalProperties, "summaryReportBasis")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQbdReportsPreferences struct {
	value *QbdReportsPreferences
	isSet bool
}

func (v NullableQbdReportsPreferences) Get() *QbdReportsPreferences {
	return v.value
}

func (v *NullableQbdReportsPreferences) Set(val *QbdReportsPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableQbdReportsPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableQbdReportsPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQbdReportsPreferences(val *QbdReportsPreferences) *NullableQbdReportsPreferences {
	return &NullableQbdReportsPreferences{value: val, isSet: true}
}

func (v NullableQbdReportsPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQbdReportsPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


